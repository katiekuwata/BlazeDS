<?xml version="1.0" standalone="no"?>
<!--
/*************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

-->
<project name="mxunit-enterprise" default="main" basedir="../../../..">
    <property environment="env"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${env.ANT_HOME}/lib/ant-contrib-1.0b2.jar"/>
    <property name="HOMEPATH" value="${env.HOMEDRIVE}${env.HOMEPATH}" />

    <property name="qa.dir" location="${basedir}"/>
    <!--  automation.build is passed on from automation.xml  -->    
    <property name="automation.build" value="${qa.dir}/build.xml"/>
    
    <property name="blazeds.dir" location="${qa.dir}/../" />

    <property name="mxunitDir" value="${qa.dir}/apps/qa-regress/testsuites/mxunit" />
    <property name="previous.generated.testfiles" value="**/*.swf,**/*.properties,**/*.output,**/*.html"/>

    <property name="compiler.type" value="mxmlc"/>

    <if >
        <os family="windows" />
        <then>
            <property name="mxunitBrowserFactory" value="tools.ant.mxunit.browsers.IEBrowser"/>
            <property name="mxmlcCommand" value="mxmlc.exe" />
        </then>
        <elseif>
            <os family="mac" />
            <then>
                <property name="mxunitBrowserFactory" value="tools.ant.mxunit.browsers.MacSafari"/>
                <property name="mxmlcCommand" value="mxmlc" />
             </then>
        </elseif>
        <else>
            <property name="mxunitBrowserFactory" value=""/>
            <property name="mxmlcCommand" value="mxmlc" />
        </else>
    </if>
    
    <property name="isSSL" value="false"/>
    <!--these properties are passed in via regression.properties -->
    <property name="https.url" value="https://localhost:9400"/>
    <property name="http.url" value="http://localhost:8400"/>
    
    <if>
        <equals arg1="${isSSL}" arg2="true"/>
        <then>
            <property name="appserver.baseurl" value="${https.url}"/>
            <property name="mxunit.testsuite" value="sslSuite"/>
            <property name="feature" value="ssl"/>
        </then>
        <else>
            <property name="appserver.baseurl" value="${http.url}"/>
            <property name="mxunit.testsuite" value="mxunit"/>
            <property name="feature" value="full"/>
        </else> 
    </if>

    <property name="appserver.qa.contextroot" value="qa-regress"/>
    <property name="appserver" value="tomcat"/>
    <!--set default value of appserver.dir -->
    <property name="appserver.dir" value="${blazeds.dir}/servers/apache-tomcat-6.0.14"/>
    <property name="tomcat.dir" value="${appserver.dir}"/>

    <property name="product" value="server" />
        
    <property name="qa.mxunit.timeout" value="90" />
    <property name="qa.mxunit.timeout.ms" value="120000" />

    <property file="${qa.dir}/features/${feature}.properties" />
    <property file="${qa.dir}/features/common.properties" />
    <property file="${mxunitDir}/local.properties" />
    
    <property name="server.mxunit.includes" value="**/*.mxml" />

    <property file="${qa.dir}/local.properties" />
    
    <!-- Read in excludes.properties file --> 
    <property file="${qa.dir}/features/excludes.properties" />
        
    <!-- excludes for product -->        
    <propertycopy name="server.mxunit.excludes" from="mxunit.${product}.all.excludes" silent="true" />
        
    <!-- appserver specific excludes -->        
    <propertycopy name="mxunit.appserver.excludes" from="mxunit.${appserver}.excludes" silent="true" />
    
    <!-- All mxunit tests to include-->
    <property name="mxunit.includes.all" value="${server.mxunit.includes},${server.mxunit.common.includes}"/>
    
    <!-- All mxunit tests to exclude-->
    <property name="mxunit.excludes.all" value="${server.mxunit.excludes},${mxunit.bugs.excludes},${mxunit.appserver.excludes},${server.mxunit.common.excludes}"/>
    
    <property name="mxunitgen.dir" value="${mxunitDir}/gen" />
    
    <property name="server.mxunit.dir" value="${mxunitDir}/tests" />
    <property name="server.mxunit.airdir" value="${mxunitDir}/airtests"/>
    <property name="config.dir" value="${qa.dir}/apps/qa-regress/WEB-INF/flex"/>

    <property name="src.debug" value="on"/>
    <property name="alwaysshowreport" value="true"/>

    <!-- sets the name of the BrowserFactory class used by MXUnit to launch browsers. -->
    <property name="mxunitBrowserFactory" value="tools.ant.mxunit.browsers.IEBrowser"/>
    <property name="remotebrowser.browserServerHost" value="localhost"/>
    <property name="remotebrowser.browserServerPort" value="7777"/>
    <property name="remotebrowser.browserServerTimeout" value="300"/>
    <property name="remotebrowser.browserServerPingTimeout" value="300"/>
    <property name="remotebrowser.browserServerBrowser" value="ie"/>
    <!-- if air.enabled is set to true, an air app descriptor will get created by the CommandLineMXMLCompiler for each test --> 
    <property name="air.enabled" value="false"/>
    <property name="server.name" value="localhost"/>
    <property name="server.port" value="8400"/>

    <if>
        <isset property="env.PROGRAMFILES"/>
        <then>
            <!-- If running under cygwin -->
            <property name="browser" value="${env.PROGRAMFILES}/Internet Explorer" />
            <property name="browserrpt" value="${env.PROGRAMFILES}/Internet Explorer/iexplore" />
        </then>
    <elseif>
        <isset property="env.ProgramFiles"/>
        <then>
            <!-- If running from cmd.exe  -->
            <property name="browser" value="${env.ProgramFiles}/Internet Explorer" />
            <property name="browserrpt" value="${env.ProgramFiles}/Internet Explorer/iexplore" />
        </then>        
    </elseif>
    <else>
        <!-- If not running on Windows you must explicitly override browser property -->
        <property name="browser" value=""/>
        <property name="browserrpt" value=""/>
    </else>
    </if>

    <!-- Where the mxunit reports will be created -->
    <property name="mxunit.reports" value="${mxunitDir}/reports"/>
    <property name="mxunit.airreports" value="${mxunitDir}/airreports"/>
    
    <!-- Where the mxunit tests are located -->
    <property name="mxunit.testDir" value="${mxunitDir}/tests"/>        
    
    <!-- URL to webapp where mxunit tests are deployed -->
    <property name="mxunit.baseurl" value="${appserver.baseurl}/${appserver.qa.contextroot}"/>
    
    <!-- used to specify output files from JUnit.  Value can be 'plain' or 'xml'. -->
    <property name="qa.junit.format" value="xml"/>

    <!-- extension to place on output file names -->
    <property name="qa.junit.ext" value=".xml"/>

    <!-- whether to stop the build if an error occurs -->
    <property name="qa.junit.haltonerror" value="no"/>

    <!-- whether to stop the build if a test fails or an error occurs -->
    <property name="qa.junit.haltonfailure" value="no"/>

    <path id="flex.test.classpath">
        <fileset dir="${qa.dir}/lib">
          <include name="qa-mxunit.jar" />
          <include name="qa-utils.jar" />
          <include name="xalan.jar" />
          <include name="ms*.jar" /><!--include sqlserver drivers; used by loadresults target -->
          <include name="commons-httpclient-3.0.1.jar"/>
          <include name="commons-logging.jar"/>
          <include name="commons-codec-1.3.jar"/>
          <include name="xalan.jar"/>
        </fileset>
    </path>

    <property name="ant-contrib.jar" location="${env.ANT_HOME}/lib/ant-contrib-1.0b2.jar"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib.jar}"/>

    <target name="main" depends="run,report,viewreport"/>

    <target name="startserver">
        <ant antfile="${automation.build}" target="appServer.start">
            <property name="appserver" value="${appserver}"/>
            <property name="tomcat.dir" value="${tomcat.dir}"/>           
        </ant>
    </target>

    <target name="stopserver">
        <ant antfile="${automation.build}" target="appServer.stop">
            <property name="appserver" value="${appserver}"/>
            <property name="tomcat.dir" value="${tomcat.dir}"/>            
        </ant>
    </target>

    <target name="clean" description="-- cleanup old report and actual files">
        <echo message="Deleting old results and files from previous testsuite build"/>
        <delete dir="${mxunit.reports}" quiet="true"/>
        <delete dir="${mxunitgen.dir}" quiet="true"/>       
    </target>

    <target name="prepare" description="-- create test suite directories, fileset">
        <echo message="Preparing testsuite."/>
        <mkdir dir="${mxunit.reports}"/>
        
        <property file="${qa.dir}/features/excludes.properties" />
        
        <!-- excludes in all scenarios-->        
        <propertycopy name="server.mxunit.excludes" from="mxunit.${product}.all.excludes" silent="true" />
        
        <!-- appserver specific excludes -->        
        <propertycopy name="mxunit.appserver.excludes" from="mxunit.${appserver}.excludes" silent="true" />
        
        <echo>Includes=${mxunit.includes.all}</echo>
        <echo>Excludes=${mxunit.excludes.all}</echo>
        <echo>Bugs Excludes=${mxunit.bugs.excludes}</echo>
        <echo>Appserver specific excludes=${mxunit.appserver.excludes}</echo>    
        <echo>Common Excludes=${server.mxunit.common.excludes}</echo>
    </target>
    
    <target name="cleanswfs" description="--> deletes all swfs and tag files">
        <echo>mxunit.testDir - ${mxunit.testDir}
            previous.generated.testfiles - ${previous.generated.testfiles}
        </echo>
        <delete quiet="true">
            <fileset dir="${mxunit.testDir}" includes="${previous.generated.testfiles}" />
        </delete>
    </target>

    <taskdef name="mxunitTask" classname="tools.ant.mxunit.MXUnitRunner">
        <classpath refid="flex.test.classpath"/>
    </taskdef>
    
    <target name="run" depends="clean,prepare,cleanswfs,startserver,compileandrun,stopserver"/>
    
    <target name="justCompile" depends="clean,prepare,cleanswfs,justcompile" description="--> compile tests"/>
    
    <target name="compileandrun">       
        <property name="mxunit.testurl" value="${mxunit.baseurl}/testsuites/mxunit/tests"/>
        <property name="flex.config.file" value="${config.dir}/flex-config.xml" />
        <property name="config.dir" value="${qa.dir}/apps/qa-regress/WEB-INF/flex" />
        <property name="mxmlc.dir" value="${blazeds.dir}/bin" />
        <property name="compc.dir" value="${blazeds.dir}/bin" />
        <property name="mxmlc.exe" value="${mxmlcCommand}" />
        <if>
            <equals arg1="${mxunitBrowserFactory}" arg2="tools.ant.mxunit.browsers.RemoteBrowser" />
        <then>
            <echo message="Using RemoteBrowser with host: ${remotebrowser.browserServerHost} and port: ${remotebrowser.browserServerPort}." />
        </then>
        </if>
        <mxunitTask timeout="${qa.mxunit.timeout.ms}" compilers="1"  browsers="1" testDir="${mxunit.testDir}"
            testURL="${mxunit.testurl}"
            reportDir="${mxunit.reports}">
                <mxmlCompilerFactory class="tools.ant.mxunit.compilers.CommandLineMXMLCompiler"/>
                <browserFactory class="${mxunitBrowserFactory}" 
                                runtimepath="${browser}"/>
                
                <fileset id="mxunit.tests" dir="${mxunit.testDir}"
                             includes="${mxunit.includes.all},${server.mxunit.common.includes}"
                             excludes="${mxunit.excludes.all},${mxunit.bugs.excludes},${mxunit.appserver.excludes},${server.mxunit.common.excludes}" />

                <systemproperty key="mxmlc.args" value="+configname=air"/>
                <systemproperty key="air" value="${air.enabled}"/>
                <systemproperty key="runtimePath" value="${runtimePath}"/>
                <systemproperty key="swfProxyUrl" value="${appserver.baseurl}/${appserver.qa.contextroot}/testContainer.html" />
                <systemproperty key="mxmlcdir" value="${mxmlc.dir}" />
                <systemproperty key="mxmlcexe" value="${mxmlc.exe}" />
                <systemproperty key="services" value="${config.dir}/services-config.xml" />
                <systemproperty key="loadconfig" value="${flex.config.file}"/>
                <systemproperty key="contextroot" value="${appserver.qa.contextroot}"/>
                <systemproperty key="isSSL" value="${isSSL}"/>
                <systemproperty key="browserServerHost" value="${remotebrowser.browserServerHost}"/>
                <systemproperty key="browserServerPort" value="${remotebrowser.browserServerPort}"/>
                <systemproperty key="browserServerTimeout" value="${remotebrowser.browserServerTimeout}"/>
                <systemproperty key="browserServerPingTimeout" value="${remotebrowser.browserServerPingTimeout}"/>
                <systemproperty key="browserServerBrowser" value="${remotebrowser.browserServerBrowser}"/>
        </mxunitTask>
    </target>

    <target name="justrun">
        <property name="flex.config.file" value="${config.dir}/flex-config.xml" />
        <property name="mxmlc.dir" value="${blazeds.dir}/bin" />
        <property name="compc.dir" value="${blazeds.dir}/bin" />
        <property name="mxmlc.exe" value="${mxmlcCommand}" />
        <if>
            <equals arg1="${mxunitBrowserFactory}" arg2="tools.ant.mxunit.browsers.RemoteBrowser" />
        <then>
            <echo message="Using RemoteBrowser with host: ${remotebrowser.browserServerHost} and port: ${remotebrowser.browserServerPort}." />
        </then>
        </if>
        <mxunitTask timeout="${qa.mxunit.timeout.ms}" compilers="1"  browsers="1" testDir="${server.mxunit.dir}"
            testURL="${appserver.baseurl}/${appserver.qa.contextroot}/testsuites/mxunit/tests"
            reportDir="${mxunit.reports}">              
                <browserFactory class="${mxunitBrowserFactory}" 
                                runtimepath="${browser}"/>
                
                <fileset id="mxunit.tests" dir="${server.mxunit.dir}"
                    includes="${mxunit.includes.all},${server.mxunit.common.includes}"
                    excludes="${mxunit.excludes.all},${mxunit.bugs.excludes},${mxunit.appserver.excludes},${server.mxunit.common.excludes}" />

                <systemproperty key="air" value="${air.enabled}"/>
                <systemproperty key="runtimePath" value="${runtimePath}"/>
                <systemproperty key="swfProxyUrl" value="${appserver.baseurl}/${appserver.qa.contextroot}/testContainer.html" />
                <systemproperty key="mxmlcdir" value="${mxmlc.dir}" />
                <systemproperty key="mxmlcexe" value="${mxmlc.exe}" />
                <systemproperty key="services" value="${config.dir}/services-config.xml" />
                <systemproperty key="loadconfig" value="${flex.config.file}"/>
                <systemproperty key="contextroot" value="${appserver.qa.contextroot}"/>
                <systemproperty key="isSSL" value="false"/>
                <systemproperty key="browserServerHost" value="${remotebrowser.browserServerHost}"/>
                <systemproperty key="browserServerPort" value="${remotebrowser.browserServerPort}"/>
                <systemproperty key="browserServerTimeout" value="${remotebrowser.browserServerTimeout}"/>
                <systemproperty key="browserServerPingTimeout" value="${remotebrowser.browserServerPingTimeout}"/> 
                <systemproperty key="browserServerBrowser" value="${remotebrowser.browserServerBrowser}"/>                  
        </mxunitTask>
    </target>

     <!-- Warning: justcompile doesn't report compiler errors and watch out for 404 errors when running -->
     <target name="justcompile">
        <property name="flex.config.file" value="${config.dir}/flex-config.xml" />
        <property name="mxmlc.dir" value="${blazeds.dir}/bin" />
        <property name="compc.dir" value="${blazeds.dir}/bin" />
        <property name="mxmlc.exe" value="${mxmlcCommand}" />
        <mxunitTask timeout="${qa.mxunit.timeout.ms}" compilers="1"  browsers="1" testDir="${server.mxunit.dir}"
            testURL="${appserver.baseurl}/${appserver.qa.contextroot}/testsuites/mxunit/tests"
            reportDir="${mxunit.reports}">
                <mxmlCompilerFactory class="tools.ant.mxunit.compilers.CommandLineMXMLCompiler"/>
            
                <fileset id="mxunit.tests" dir="${server.mxunit.dir}"
                    includes="${mxunit.includes.all},${server.mxunit.common.includes}"
                    excludes="${mxunit.excludes.all},${mxunit.bugs.excludes},${mxunit.appserver.excludes},${server.mxunit.common.excludes}" />
                <systemproperty key="mxmlc.args" value="+configname=air"/>
                <systemproperty key="swfProxyUrl" value="${appserver.baseurl}/${appserver.qa.contextroot}/testContainer.html" />
                <systemproperty key="air" value="${air.enabled}"/>
                <systemproperty key="mxmlcdir" value="${mxmlc.dir}" />
                <systemproperty key="mxmlcexe" value="${mxmlc.exe}" />
                <systemproperty key="services" value="${config.dir}/services-config.xml" />
                <systemproperty key="loadconfig" value="${flex.config.file}"/>
                <systemproperty key="contextroot" value="${appserver.qa.contextroot}"/>
                <systemproperty key="isSSL" value="false"/>
        </mxunitTask>
    </target>
    
    <target name="report" unless="server.mxunit.disablereport.set" description="--> create html report">
        <replace dir="${mxunit.reports}" token="\" value="/">
            <include name="TEST-*.xml"/>
        </replace>
        <junitreport todir="${mxunit.reports}">
            <fileset dir="${mxunit.reports}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" styledir="${mxunitDir}/stylesheets" todir="${mxunit.reports}/html"/>
        </junitreport>
    </target>

    <target name="viewreport" unless="nevershowreport" description="--> view the report in a browser">

        <if>
            <and>
                <equals arg1="${alwaysshowreport}" arg2="false" />
                <not>
                    <equals arg1="${failed}" arg2="true" />
                </not>
            </and>
            <then>
                <echo>Skipping viewreport because alwaysshowreport=${alwaysshowreport} and failed=${failed}.</echo>
            </then>
            <else>
                <echo message="execing browser"/>
                <if>
                    <os family="mac"/>
                    <then>
                        <exec executable="open" dir="${mxunit.reports}/html">
                            <arg line="-n -a Safari ${mxunit.reports}/html/index.html"/>
                        </exec>    
                    </then>
                    <else>
                        <exec executable="${browserrpt}" dir="${mxunit.reports}/html">
                            <arg path="${mxunit.reports}/html/index.html"/>
                        </exec>
                    </else>
                </if>
            </else>
        </if>
    </target>
    
    <!-- Targets to run MXUnit tests with AIR runtime -->
    <target name="mainair" depends="runair">
        <antcall target="report">
            <param name="mxunit.reports" value="${mxunit.airreports}" />
        </antcall>
        <antcall target="viewreport">
            <param name="mxunit.reports" value="${mxunit.airreports}" />
        </antcall>
    </target>
    
    <target name="runair">
        <antcall target="clean">
            <param name="mxunit.reports" value="${mxunit.airreports}" />
        </antcall>
        <antcall target="prepare">
            <param name="mxunit.reports" value="${mxunit.airreports}" />
        </antcall>
        <antcall target="cleanswfs" />
        <antcall target="prepareair" />
        <antcall target="startserver" />
        <antcall target="compileandrunair" />
        <antcall target="stopserver" />
    </target>
    
    <target name="prepareair" description="Setup tests for running with air">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${server.mxunit.airdir}"/>
        </delete>
        <mkdir dir="${server.mxunit.airdir}"/>
        <copy todir="${server.mxunit.airdir}">
            <fileset dir="${server.mxunit.dir}"
                     includes="**/*" excludes="${previous.generated.testfiles}"/>
        </copy>
        <replace dir="${server.mxunit.airdir}" token="mx:Application" value="mx:WindowedApplication">
            <include name="**/*.mxml"/>
        </replace>
        <replace dir="${config.dir}" token="{server.name}" value="${server.name}">
            <include name="services-config.xml"/>
        </replace>
        <replace dir="${config.dir}" token="{server.port}" value="${server.port}">
            <include name="services-config.xml"/>
        </replace>
    </target>
    
    <target name="compileandrunair" description="run tests with air">
        <antcall target="compileandrun">
            <param name="server.mxunit.dir" value="${server.mxunit.airdir}"/>
            <param name="mxunit.testDir" value="${server.mxunit.airdir}"/>
            <param name="air.enabled" value="true"/>
            <param name="mxunitBrowserFactory" value="tools.ant.mxunit.browsers.AIRBrowser"/>
            <param name="flex.config.file" value="${config.dir}/air-config.xml"/>
            <param name="mxunit.testurl" value="${mxunit.baseurl}/testsuites/mxunit/airtests"/>
            <param name="runtimePath" value="${blazeds.dir}/bin" />
            <param name="mxunit.reports" value="${mxunit.airreports}" />
        </antcall>
    </target>
    
    <target name="cleanair" description="run tests with air">
        <antcall target="cleanswfs">
            <param name="server.mxunit.dir" value="${server.mxunit.airdir}"/>
        </antcall>
    </target>
</project>
