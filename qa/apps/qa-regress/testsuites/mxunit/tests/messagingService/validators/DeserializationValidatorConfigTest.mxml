<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" creationComplete="setUp()">
    <mx:Script>
        <![CDATA[
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.AsyncToken;
			import mx.rpc.remoting.mxml.RemoteObject;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.messaging.config.ServerConfig;
            import qa.mxunit.Assert;
            import qa.mxunit.MXUnitManager;
			
			[Bindable]
			private var myData:String;
			
			private var srv:RemoteObject;
			
			private var token:mx.rpc.AsyncToken;
			private var tokenRemove:mx.rpc.AsyncToken;
			
            //amf channel which legacy-collection is true
            private var amfChannel:ChannelSet;
            
            private var manager:MXUnitManager = MXUnitManager.getInstance();

			
       
            private function setUp():void 
            {
				amfChannel = new ChannelSet();
                amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
				srv = new RemoteObject();
				srv.destination="validatorconfig-ro";	
				srv.channelSet = amfChannel;

				srv.addEventListener(ResultEvent.RESULT, resultHandler);
				srv.addEventListener(FaultEvent.FAULT, faultHandler);
				
				//manager.addTests(this, ["testAddValidator"] , 5000);
				manager.addTests(this, ["testAddValidator", "testUpdateValidator", "testRemoveValidator"] , 5000);
            }   
               			
			public function testAddValidator(): void
			{
		        // adds ClassDeserializationValidator
		        manager.currentTest.chain(srv,[FaultEvent.FAULT,ResultEvent.RESULT],resultHandler);
		        token = srv.testSetValidator();
		        token.op = "addValidatorTest";
		        token.final = false;

			}
			public function testRemoveValidator(): void
			{
		        // adds TertiaryTestFilter to MessageFilterChain
		        manager.currentTest.chain(srv,[FaultEvent.FAULT,ResultEvent.RESULT],resultHandler);
		        token = srv.testSetNullValidator();
		        token.op = "removeValidatorTest";
		        token.final = false;

			}

			public function testUpdateValidator(): void
			{
                // updates Validator by removing "blazeds.qa.remotingService.Book" from approved list.
		        manager.currentTest.chain(srv,[FaultEvent.FAULT,ResultEvent.RESULT],resultHandler);
		        token = srv.testSetValidatorBookRemoved();
		        token.op = "updateValidatorTest";
		        token.final = false;
			}
			
       private function resultHandler(e:ResultEvent):void
        {
            
            switch (e.token.op)
            {
                case "addValidatorTest":
                    token = srv.testGetValidator();
                    token.expected = "flex.messaging.validators.ClassDeserializationValidator";
                    token.op = "listAddValidator"; 
                    break;
                case "listAddValidator":
                    token.expected = "flex.messaging.validators.ClassDeserializationValidator";
                    token.op = "donelistAddValidator";
                    Assert.assertEquals(e.token.expected,e.result); 
                    break;
                case "removeValidatorTest":
                    token = srv.testGetValidator();
                    token.expected = "Null Validator Returned";
                    token.op = "listRemoveValidator"; 
                    break;
                case "listRemoveValidator":
                    Assert.assertEquals("Test errored " + e.result,e.token.expected,e.result);
                    token.expected = "Null Validator Returned";
                    token.op = "listRemoveValidator"; 
                    break; 
                case "updateValidatorTest":
                    token = srv.testGetValidator();
                    token.expected = "flex.messaging.validators.ClassDeserializationValidator";
                    token.op = "listUpdateValidator"; 
                    break;
                case "listUpdateValidator":
                    Assert.assertEquals("Test errored " + e.result,e.token.expected,e.result);
                    token.expected = "flex.messaging.validators.ClassDeserializationValidator";
                    token.op = "listUpdateValidator"; 
                    break; 
            }
  
    }
            
        private function faultHandler(e:FaultEvent):void
        {
            Assert.currentTest.doFail(e.fault.faultString);
        }

        ]]>
    </mx:Script>

    <mx:TextInput x="434" y="234" id="resholder" text="{myData}"/>

</mx:Application>

