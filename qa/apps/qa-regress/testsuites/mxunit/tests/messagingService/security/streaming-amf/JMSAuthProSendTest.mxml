<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="startRun()">

    
    <mx:Script>
    <![CDATA[
    	import mx.messaging.config.ServerConfig;
    	import mx.messaging.Channel;
    	import mx.messaging.ChannelSet;
        import mx.messaging.Producer;
        import mx.messaging.Consumer;
        import mx.events.PropertyChangeEvent;
        import mx.rpc.events.*;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.events.*;   
        
        //--------------------------------------------------------------------------
        //
        // Variables
        // 
        //--------------------------------------------------------------------------
        private var con:Consumer;
        private var pro:Producer;
        private var destination:String = "jms_auth_send";
        private var timer:Timer;
        private var cs:ChannelSet;
        private var ch:Channel;
        private var cleanupTimer:Timer = new Timer(2000);

        //--------------------------------------------------------------------------
        //
        // Setup 
        // 
        //--------------------------------------------------------------------------
        /**
         * @private
         */
        private function startRun():void {
        	cleanupTimer.addEventListener(TimerEvent.TIMER,handleCleanup);
        	cs = new ChannelSet(); 
            ch = ServerConfig.getChannel("qa-streaming-amf"); 
            cs.addChannel(ch);                                        
            MXUnitManager.getInstance().addTests(this,["testProducerWithNoCredentials","testProducerWithBadCredentials","testConsumerNoCredProducerNoCred","testProducerWithValidCredentials"],10000);
            //MXUnitManager.getInstance().addTests(this,["testConsumerNoCredProducerNoCred"],10000);                                    
        }
        //--------------------------------------------------------------------------
        //
        // Test Methods 
        // 
        //--------------------------------------------------------------------------              
        
        //testProducerWithNoCredentials
        /**
         * Test that a producer that sends a message to a destination that 
         * uses a send-security-constraint and doesn't set any credendtials
         * gets an error.  
         */         
        public function testProducerWithNoCredentials():void {                        
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination; 
            MXUnitManager.getInstance().currentTest.chain(pro,[MessageFaultEvent.FAULT],proNoCredEventHandler);
            var message:AsyncMessage = new AsyncMessage();
            message.body = "hello";
            pro.send(message);
        }
        /**
         * @private 
         * Handle message fault event that is returned when producer with no credentials
         * sends a message to a destination with a send-security-constraint. 
         */
        private function proNoCredEventHandler(mfe:MessageFaultEvent):void {                                
            var errorMessage:String = "Wrong faultCode, should have been either Client.Authentication or Channel.Authentication.Error"; 
            Assert.assertTrue(errorMessage, mfe.faultCode == "Client.Authentication" || mfe.faultCode == "Channel.Authentication.Error");
            //Assert.assertEquals("Wrong faultCode", "Client.Authentication", mfe.faultCode);
            //Assert.assertEquals("Wrong faultString", "Login required before authorization can proceed.", mfe.faultString);                                                       
        }
        //testProducerWithBadCredentials
        /**
         * Test that a producer that sends a message to a destination that 
         * uses a send-security-constraint and uses an invalid set of credentials
         * gets an error. 
         */         
        public function testProducerWithBadCredentials():void {                        
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination;
            pro.setCredentials("sampleuser","foo"); 
            MXUnitManager.getInstance().currentTest.chain(pro,[MessageFaultEvent.FAULT],proBadCredEventHandler);
            var message:AsyncMessage = new AsyncMessage();
            message.body = "hello";
            pro.send(message);
        }
        /**
         * @private
         */
        private function proBadCredEventHandler(mfe:MessageFaultEvent):void {    
            var errorMessage:String = "Wrong faultCode, should have been either Client.Authentication or Channel.Authentication.Error"; 
            Assert.assertTrue(errorMessage, mfe.faultCode == "Client.Authentication" || mfe.faultCode == "Channel.Authentication.Error");
            //Assert.assertEquals("Wrong faultCode", "Client.Authentication", mfe.faultCode);
            //Assert.assertEquals("Wrong faultString", "Invalid login.", mfe.faultString);           
        }  
        //testProducerWithValidCredentials              
       /**
        * Test that a producer that sends a message to a destination that 
        * uses a send-security-constraint and uses a valid set of credentials
        * doesn't get an authentication error. 
        */  
        public function testProducerWithValidCredentials():void {                        
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination; 
            pro.setCredentials("sampleuser","samplepassword");
            pro.addEventListener(MessageFaultEvent.FAULT,proValidCredEventHandler);
            timer = new Timer(3000);              
            MXUnitManager.getInstance().currentTest.chain(timer,[TimerEvent.TIMER],proValidCredTimerHandler);
            timer.start(); 
            var message:AsyncMessage = new AsyncMessage();
            message.body = "hello";
            pro.send(message);
        }
        /**
         * @private
         */
        private function proValidCredEventHandler(e:MessageFaultEvent):void {
            Assert.fail("Credentials were valid, shouldn't have received fault: " + e.faultCode);                                 
        } 
        /**
         * @private
         */
        private function proValidCredTimerHandler(e:TimerEvent):void {
            //if we got here without the test failing because of an authorization error 
            //assume we passed.
            MXUnitManager.getInstance().currentTest.chain(cleanupTimer,[TimerEvent.TIMER],handleCleanup); 
            cleanUp();      
        } 
        //testConsumerNoCredProducerNoCred  
       /**
        * Test that a consumer can subscribe to a destination that uses a send-security-constraint
        * without supplying credentials and that a producer gets challenged.
        */  
        public function testConsumerNoCredProducerNoCred():void {                        
            con = new Consumer(); 
            con.channelSet = cs;
            con.destination = destination;
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination;            
            //con.addEventListener(MessageAckEvent.ACKNOWLEDGE,consumerAck); 
            MXUnitManager.getInstance().currentTest.chain(con,[MessageAckEvent.ACKNOWLEDGE],consumerAck);            
            con.subscribe();
            
        }
        /**
         * @private
         */
        private function conNoCredProNoCredEventHandler(e:MessageFaultEvent):void {
            Assert.fail("Credentials were valid, shouldn't have received fault: " + e.faultCode);                                 
        }
       /**
        *  Listen for consumer ack events so we can tell when the consumer has subscribed.    
        */
        private function consumerAck(event:MessageAckEvent):void {
            //make sure the ack is for a subscribe operation
            if((event.correlation is CommandMessage) && (CommandMessage(event.correlation).operation == CommandMessage.SUBSCRIBE_OPERATION))
            {
                pro.setCredentials("sampleuser","samplepassword");
                pro.addEventListener(MessageFaultEvent.FAULT,conNoCredProNoCredEventHandler);            
                MXUnitManager.getInstance().currentTest.chain(con,[MessageEvent.MESSAGE],consumerMessageEvent);                
                var message:AsyncMessage = new AsyncMessage();
                message.body = "hello";
                pro.send(message);
            } 
        }
        private function consumerMessageEvent(event:MessageEvent):void 
        {
            Assert.assertEquals("Got wrong message", "hello", event.message.body.toString());  
            MXUnitManager.getInstance().currentTest.chain(cleanupTimer,[TimerEvent.TIMER],handleCleanup); 
            cleanUp();                             
        }
        private function cleanUp():void
	    {
	       pro.logout();
	       cleanupTimer.start();   
        }
	    private function handleCleanup(event:TimerEvent):void
	    {
	       cleanupTimer.removeEventListener(TimerEvent.TIMER,handleCleanup);
	       cleanupTimer.stop(); 
	       Assert.hasPendingTest = false; 
	    }
    ]]>
    </mx:Script>
</mx:Application>