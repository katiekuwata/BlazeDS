<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="startRun()">

    <mx:Producer id="pro" destination="topic_authentication" fault="handleProFault(event)" />
    <mx:Consumer id="con" destination ="topic_authentication" fault="handleConFault(event)" propertyChange="handleConChange(event)"/>
    <mx:Producer id="pro_fail" destination="topic_authentication" fault="handleProFailedFault(event)" />
    <mx:Consumer id="con_fail" destination ="topic_authentication" />
    <mx:Consumer id="con_wrong" destination ="topic_authentication" />
    
    <!--<mx:TextArea id="ta" width="300" height="250" />-->
    <mx:Script>
    <![CDATA[
        import mx.messaging.Channel;
        import mx.messaging.ChannelSet;
        import mx.events.PropertyChangeEvent;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.*;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.config.*;
        import mx.messaging.events.*;   
        
        //--------------------------------------------------------------------------
        //
        // Variables
        // 
        //--------------------------------------------------------------------------
        private var authed:Boolean = false;
        private var delayPassTimer :Timer;
        private var faultHappened: Boolean = false;
        private var cs:ChannelSet;
        private var ch:Channel;
        private var authChecked:Boolean = false; 
        private var cleanupTimer:Timer = new Timer(2000); 
        
        //--------------------------------------------------------------------------
        //
        // Setup 
        // 
        //--------------------------------------------------------------------------
        private function startRun():void {
        	cleanupTimer.addEventListener(TimerEvent.TIMER,handleCleanup); 
        	cs = new ChannelSet(); 
            ch = ServerConfig.getChannel("qa-streaming-amf"); 
            cs.addChannel(ch); 
            pro.channelSet = cs; 
            con.channelSet = cs;
            pro_fail.channelSet = cs;
            con_fail.channelSet = cs;
            con_wrong.channelSet = cs;  
        	//breakout testConsumerWithCredential to a different mxml file
             MXUnitManager.addTests(this,["testProducerNoCredential", "testProducerWithCredential", "testConsumerNoCredential", 
               "testConsumerWithWrongCredential", "testLogout"], 10000);                       
        }

        //--------------------------------------------------------------------------
        //
        // Test Methods 
        // 
        //-------------------------------------------------------------------------- 
        // testConsumerNoCredential
        /**
         * Test that a consumer that attempts to subscribe to a destintation with a security constraint
         * and doesn't supply an credentials gets an authentication challenge. 
         */
        public function testConsumerNoCredential():void
        {
            con_fail.addEventListener(MessageFaultEvent.FAULT, handleConFailedFault);
            con_fail.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, handleConFailedChange);
            con_fail.subscribe();
            Assert.hasPendingTest = true;
        }
                      
        private function handleConFailedFault(event:MessageFaultEvent):void{
            debug("ConFailedFault:" + event.faultCode + " " + event.faultDetail );
            Assert.assertEquals("Client.Authentication", event.faultCode);
            cleanUp();
        }
        
        private function handleConFailedChange(event:PropertyChangeEvent):void{
           if (event.property == "subscribed" && event.newValue ) 
                Assert.fail("Without authentication, subscription request should be denied");
            cleanUp();
        }
        // testConsumerWithCredential
        /**
         * Test that a consumer that attempts to subscribe to a destintation with a security constraint
         * and supplies valid credentials can subscribe successfully. 
         */        
        public function testConsumerWithCredential():void {            
            con.setCredentials("sampleuser","samplepassword");
            authed = true;
            con.subscribe();
            Assert.hasPendingTest = true;
        }
        
        private function handleConFault(event:MessageFaultEvent):void{
           Assert.fail("There should be no fault for consumer after authentication");
           
           cleanUp();
        }
        
        private function handleConChange(event:PropertyChangeEvent):void{
            if (event.property == "subscribed") 
                Assert.assertTrue(true, event.newValue);
            cleanUp();
        }              
        // testConsumerWithWrongCredential
        /**
         * Test that a consumer that attempts to subscribe to a destintation with a security constraint
         * and supplies invalid credentials gets an authorization error.  
         */    
        public function testConsumerWithWrongCredential():void {                        
            con_wrong.addEventListener(MessageFaultEvent.FAULT, handleConWrongFault);
            con_wrong.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, handleConWrongChange);
            con_wrong.setCredentials("guest","guest123");
            authed = true;
            con_wrong.subscribe();
            Assert.hasPendingTest = true;
        }
        
        private function handleConWrongFault(event:MessageFaultEvent):void{
            debug("ConWrongFault:" + event.faultCode + " " + event.faultDetail );
            Assert.assertEquals("Client.Authorization", event.faultCode);
            cleanUp();
        }
        
        private function handleConWrongChange(event:PropertyChangeEvent):void{
           if (event.property == "subscribed" && event.newValue ) 
                Assert.fail("Without correct authorization, subscription request should be denied");
            cleanUp();
        }
        
        // testProducerNoCredential
        /**
         * Test that a producer that attempts to send a message to a destintation with 
         * a security constraint and supplies invalid credentials gets an authentication challenge.  
         */    
        public function testProducerNoCredential():void{
            var msg:IMessage = new AsyncMessage();
            msg.body = "hello";
            pro_fail.send(msg);
            Assert.hasPendingTest = true;
            waitForFault(2000);
        }
        
        private function delayPass(e:Event):void  {
            if (authChecked) 
            {
                authChecked = false; 
                delayPassTimer.stop();           
                if (!faultHappened){               
                    Assert.assertTrue(true, true);
                    Assert.hasPendingTest = false;
                 }	
            } else {
                authChecked = true; 
                checkAuth();     	
            }
            
        }
        
        private function waitForFault(delay:Number = 2000):void   {            
	        faultHappened = false;
	        delayPassTimer = new Timer(delay,0);
	        delayPassTimer.addEventListener(TimerEvent.TIMER, delayPass);
            delayPassTimer.start();           
        }                
       
       private function handleProFailedFault(event:MessageFaultEvent):void{
            debug( "ProducerFailedFault:" + event.faultCode );
            faultHappened = true;
            delayPassTimer.stop();
            Assert.assertEquals("Client.Authentication", event.faultCode);
            Assert.hasPendingTest = false;            
       }
       
       // testProducerWithCredential
        /**
         * Test that a producer that attempts to send a message to a destintation with 
         * a security constraint and supplies valid credentials can send the message without
         * getting a message fault.  
         */    
       public function testProducerWithCredential():void{          
            var msg:IMessage = new AsyncMessage();
            msg.body = "hello from sampeluser";                        
            pro.setCredentials("sampleuser","samplepassword");
            authed = true;
            pro.send(msg);                        
            Assert.hasPendingTest = true;
            waitForFault(2000);
       }
             
       private function handleProFault(event:MessageFaultEvent):void{
           debug("ProducerFault: " + event.faultCode);
           faultHappened = true;
           delayPassTimer.stop();
           Assert.fail("There should be no fault with authentication");
           Assert.hasPendingTest = false;           
       }
       
       private function checkAuth():void{
            if(authed){
                pro.logout();
                con_wrong.logout();
                con_wrong.disconnect();
            }
            authed = false;
       }
       private function cleanUp():void
       {
            checkAuth();
            cleanupTimer.start(); 	
       }
       private function handleCleanup(event:TimerEvent):void
       {
            cleanupTimer.stop(); 
            Assert.hasPendingTest = false; 
       }
       
        /**
         * Test consumer that is authenticated can successfully logout.  
         */          
       public function testLogout(event:Object = null, token:AsyncToken= null):void
          {
          if (event == null)
          {
          	con_wrong.logout();
          	var timer:Timer = new Timer(1000, 1);
          	timer.addEventListener("timer", testLogout);
          	timer.start();
          }
          else
          {
         	Assert.assertTrue(true);
         	Assert.hasPendingTest = false;	
          }   				
          }
  			
       private function debug(msg:String):void{
          //trace(msg);
          //ta.text += msg + "\n";
       }
    ]]>
    </mx:Script>

</mx:Application>