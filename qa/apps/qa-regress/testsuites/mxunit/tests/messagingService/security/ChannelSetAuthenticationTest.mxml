<?xml version="1.0"?>

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">

    

    <mx:Script>
    <![CDATA[
    	import mx.messaging.Producer;
    	import mx.messaging.events.MessageFaultEvent;
    	import mx.messaging.events.MessageEvent;
    	import mx.events.PropertyChangeEvent;
    	import mx.messaging.Consumer;
    	import qa.mxunit.Assert;
    	import mx.rpc.events.FaultEvent;
    	import mx.rpc.events.ResultEvent;
    	import mx.rpc.AsyncResponder;
    	import mx.messaging.Channel;
    	import mx.messaging.config.ServerConfig;
    	import mx.rpc.AsyncToken;
    	import mx.messaging.ChannelSet;
    	import qa.mxunit.MXUnitManager;
        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////                          
        
        /**
        *  Array to hold names of channels that will be tested
        */       
        public var channelNames:Array;
        
        /**
        *  Name of test that is currently being executed. 
        */
        private var currentTest:String; 
        
        /**
        *  Name of the destination to be used by the Producer and the Consumer. 
        */
        private var destination:String = "topic_authentication_channelset_test";                         
        
        /**
        *  Index used to point to channel in the channelNames array for the currently executing test. 
        */
        public var index:int = 0; 
        
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;
        
        /**
        *  Array of test names. Test name will be based on the channel 
        */  
        public var testNames:Array = new Array();
        
        private var testFunctions:Array= ["testLoginLogout"];
        private var handler:Function; 
        ////////////////////////////////////////////////////////////////////////////
        //
        // Methods
        //
        ////////////////////////////////////////////////////////////////////////////  
        

        //testLoginLogout 
              
        public function testLoginLogout():void
        {
            var cs:ChannelSet =  createChannelSet();
            var token:AsyncToken = cs.login("sampleuser", "samplepassword");
            token.op = "login";  
            token.cs = cs;
            handler = manager.currentTest.addAsync(loginLogoutHandler);
            token.addResponder(new AsyncResponder(handler,handler,token)); 
                
        }
        private function loginLogoutHandler(result:Object, token:AsyncToken, params:Object = null):void
        {
            var cs:ChannelSet;
            var fe:FaultEvent; 
            if (token.op == "login") 
            {
            	if (result is ResultEvent) {
            		trace("Login successful");
                    cs = token.cs as ChannelSet; 
                    var token:AsyncToken = cs.logout();
                    token.op = "logout";  
                    token.cs = cs;
                    handler = manager.currentTest.addAsync(loginLogoutHandler);
                    token.addResponder(new AsyncResponder(handler,handler,token));		
                    
            	} else if (result is FaultEvent)
            	{
            		fe = result as FaultEvent;
            		Assert.fail("Login failed " + fe.fault.faultDetail);
            	}
            } else if (token.op == "logout")
            {
                if (result is ResultEvent) {
                    trace("Logout successful");
                    cs = token.cs as ChannelSet;
                    trace(cs.connected); 
                } else if (result is FaultEvent)
                {
                    fe = result as FaultEvent;
                    Assert.fail("Logout failed " + fe.fault.faultDetail);
                }	
            }
        }
        //Utility Methods used for setup and getting channel to run the test over. 
        private function setUp():void        
        {
            //get the list of channel names for the destination from ServerConfig 
            channelNames = (ServerConfig.getChannelSet(destination) as ChannelSet).channelIds;                                                     			
           //create a new generic object to add test functions to
           var testObj:Object = new Object();  
                                           
           /*
            * Loop over the channel names and create a new test function for each channel. 
            * Even though the test function will have a new name it just points to our generic 
            * test function which will need to keep track of which test is being run. 
            */
            for (var x:int = 0; x < testFunctions.length; x++) 
            {
                var testFunc:String = testFunctions[x] as String; 
                
                for (var i:int = 0; i < channelNames.length; i++) 
                {               
                   var channel:Channel = ServerConfig.getChannel(channelNames[i]);               
                   var testName:String = testFunc + "_" + channel.id;               
                   testObj[testName] = this[testFunc];                    
                   testNames.push(testName);                                 
                }                                                                   
            }   
            manager = MXUnitManager.getInstance();
            manager.addTests(testObj,testNames, 10000);                        
        }
        private function createChannelSet():ChannelSet
        {
            if (index == channelNames.length)
                index = 0; 
            //increment the counter to point to the next test
            var pointer:uint = index++; 
            //create a new channel using the next channel name in the list and add it to a new channelset
            var channelName:String = channelNames[pointer]; 
            currentTest = channelName;
            var channel:Channel = ServerConfig.getChannel(channelName, false);      
            var cs:ChannelSet = new ChannelSet();           
            cs.addChannel(channel);
            return cs;
        }              
    ]]>
    </mx:Script>
	<mx:TraceTarget level="0"/>
</mx:Application>