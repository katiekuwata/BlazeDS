<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="startRun()">

    
    <mx:Script>
    <![CDATA[
    	import mx.messaging.config.ServerConfig;
    	import mx.messaging.Channel;
    	import mx.messaging.ChannelSet;
        import mx.messaging.Producer;
        import mx.messaging.Consumer;
        import mx.events.PropertyChangeEvent;
        import mx.rpc.events.*;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.events.*;   
        
        //--------------------------------------------------------------------------
        //
        // Variables
        // 
        //--------------------------------------------------------------------------
        private var con:Consumer;
        private var pro:Producer;
        private var destination:String = "topic_auth_send_and_subscribe";
        private var timer:Timer;
        private var cs:ChannelSet;
        private var ch:Channel;

        //--------------------------------------------------------------------------
        //
        // Setup 
        // 
        //--------------------------------------------------------------------------
        /**
         * @private
         */
        private function startRun():void {      
        	cs = new ChannelSet(); 
            ch = ServerConfig.getChannel("qa-streaming-amf"); 
            cs.addChannel(ch);                              
            MXUnitManager.getInstance().addTests(this,["testConsumerNoCredentials","testConsumerBadCredentials","testProducerWithNoCredentials","testProducerWithBadCredentials","testValidCredentials"],10000);
                                                
        }
        //--------------------------------------------------------------------------
        //
        // Test Methods 
        // 
        //--------------------------------------------------------------------------              
        
        //testConsumerNoCredentials
        /**
         * Test that a consumer that subscribes to a destination that 
         * uses a subscribe-security-constraint and doesn't set any credendtials
         * gets an error.  
         */         
        public function testConsumerNoCredentials():void {                        
            con = new Consumer(); 
            con.channelSet = cs;
            con.destination = destination; 
            MXUnitManager.getInstance().currentTest.chain(con,[MessageFaultEvent.FAULT],conNoCredEventHandler);
            con.subscribe();
        }
        /**
         * @private 
         * Handle message fault event that is returned when consumer with no credentials
         * subscribes to a destination with a subscribe-security-constraint. 
         */
        private function conNoCredEventHandler(e:Event):void {                                
            if (e is MessageFaultEvent) 
            {               
                var mfe:MessageFaultEvent = e as MessageFaultEvent;
                var errorMessage:String = "Wrong faultCode, should have been either Client.Authentication or Channel.Authentication.Error"; 
                Assert.assertTrue(errorMessage, mfe.faultCode == "Client.Authentication" || mfe.faultCode == "Channel.Authentication.Error");
                //Assert.assertEquals("Wrong faultCode", "Client.Authentication", mfe.faultCode);
                //Assert.assertEquals("Wrong faultString", "Login required before authorization can proceed.", mfe.faultString);
                Assert.assertFalse("Consumer should not be subscribed",con.subscribed);                
            } 
                                                                   
        }      
        //testConsumerBadCredentials
        /**
         * Test that a consumer that subscribes to a destination that 
         * uses a subscribe-security-constraint and uses an invalid set of credentials
         * gets an error. 
         */         
        public function testConsumerBadCredentials():void {                        
            con = new Consumer(); 
            con.channelSet = cs;
            con.destination = destination;
            con.setCredentials("sampleuser","foo"); 
            MXUnitManager.getInstance().currentTest.chain(con,[MessageFaultEvent.FAULT],conBadCredEventHandler);
            con.subscribe();
        }
        /**
         * @private
         */
        private function conBadCredEventHandler(mfe:MessageFaultEvent):void {    
            var errorMessage:String = "Wrong faultCode, should have been either Client.Authentication or Channel.Authentication.Error"; 
            Assert.assertTrue(errorMessage, mfe.faultCode == "Client.Authentication" || mfe.faultCode == "Channel.Authentication.Error");
            //Assert.assertEquals("Wrong faultCode", "Client.Authentication", mfe.faultCode);
            //Assert.assertEquals("Wrong faultString", "Invalid login.", mfe.faultString);       
            Assert.assertFalse("Consumer should not be subscribed",con.subscribed);     
        }  
               //testProducerWithNoCredentials
        /**
         * Test that a producer that sends a message to a destination that 
         * uses a send-security-constraint and doesn't set any credendtials
         * gets an error.  
         */         
        public function testProducerWithNoCredentials():void {                        
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination; 
            MXUnitManager.getInstance().currentTest.chain(pro,[MessageFaultEvent.FAULT],proNoCredEventHandler);
            var message:AsyncMessage = new AsyncMessage();
            message.body = "hello";
            pro.send(message);
        }
        /**
         * @private 
         * Handle message fault event that is returned when producer with no credentials
         * sends a message to a destination with a send-security-constraint. 
         */
        private function proNoCredEventHandler(mfe:MessageFaultEvent):void {                                
            var errorMessage:String = "Wrong faultCode, should have been either Client.Authentication or Channel.Authentication.Error"; 
            Assert.assertTrue(errorMessage, mfe.faultCode == "Client.Authentication" || mfe.faultCode == "Channel.Authentication.Error");
            //Assert.assertEquals("Wrong faultCode", "Client.Authentication", mfe.faultCode);
            //Assert.assertEquals("Wrong faultString", "Login required before authorization can proceed.", mfe.faultString);                                                       
        }
        //testProducerWithBadCredentials
        /**
         * Test that a producer that sends a message to a destination that 
         * uses a send-security-constraint and uses an invalid set of credentials
         * gets an error. 
         */         
        public function testProducerWithBadCredentials():void {                        
            pro = new Producer(); 
            pro.channelSet = cs;
            pro.destination = destination;
            pro.setCredentials("sampleuser","foo"); 
            MXUnitManager.getInstance().currentTest.chain(pro,[MessageFaultEvent.FAULT],proBadCredEventHandler);
            var message:AsyncMessage = new AsyncMessage();
            message.body = "hello";
            pro.send(message);
        }
        /**
         * @private
         */
        private function proBadCredEventHandler(mfe:MessageFaultEvent):void {    
            var errorMessage:String = "Wrong faultCode, should have been either Client.Authentication or Channel.Authentication.Error"; 
            Assert.assertTrue(errorMessage, mfe.faultCode == "Client.Authentication" || mfe.faultCode == "Channel.Authentication.Error");
            //Assert.assertEquals("Wrong faultCode", "Client.Authentication", mfe.faultCode);
            //Assert.assertEquals("Wrong faultString", "Login required before authorization can proceed.", mfe.faultString);           
        }  
 
        //testValidCredentials              
       /**
        * Test that a Consumer that subscribes to a destination that 
        * uses a subscribe-security-constraint and uses a valid set of credentials
        * can receive a message from a producer.
        */  
        public function testValidCredentials():void {                        
            con = new Consumer(); 
            con.channelSet = cs;
            con.destination = destination; 
            con.setCredentials("sampleuser","samplepassword");
            MXUnitManager.getInstance().currentTest.chain(con,[MessageAckEvent.ACKNOWLEDGE,MessageFaultEvent.FAULT],conValidCredEventHandler);
            con.subscribe();
            
            pro = new Producer();
            pro.channelSet = cs;
            pro.destination = destination;
        }
        /**
         * @private
         */
        private function conValidCredEventHandler(e:Event):void {
            if (e is MessageFaultEvent) 
            {
                var mfe:MessageFaultEvent = e as MessageFaultEvent;
                Assert.fail("Credentials were valid, shouldn't have received fault: " + mfe.faultCode);      
            } else if (e is MessageAckEvent) 
            {
                var mae:MessageAckEvent = e as MessageAckEvent;
                if((mae.correlation is CommandMessage) && (CommandMessage(mae.correlation).operation == CommandMessage.SUBSCRIBE_OPERATION))
                {
                    MXUnitManager.getInstance().currentTest.chain(con,[MessageEvent.MESSAGE],conValidCredMessageHandler);
                    var msg:IMessage = new AsyncMessage();
                    msg.body = "hello";
                    pro.send(msg);                  
                } 
            }                                       
        } 
        private function conValidCredMessageHandler(e:MessageEvent):void {            
            Assert.assertEquals("Wrong message, should have been 'hello' but was " + e.message.body.toString(), "hello", e.message.body.toString());    
            con.logout();
        }
    ]]>
    </mx:Script>
</mx:Application>