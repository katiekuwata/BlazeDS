<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">           
    
    <mx:Script>
    <![CDATA[
    	import mx.events.PropertyChangeEvent;
        import qa.utils.TestTask;
        import qa.utils.TestTaskEvent;
        import mx.messaging.Producer;
        import mx.messaging.channels.AMFChannel;
        import mx.messaging.Consumer;   
        import mx.messaging.ChannelSet;
        import mx.messaging.Channel;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.config.*;
        import mx.messaging.events.*;
 
        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////                          
        
        /**
        * Name of the channel used in the test;
        */
        public var channelName:String = "qa-rtpush-amf"; 
        /**
        *  Consumer instance used in the test
        */           
        public var con:Consumer;         
        
        /**
        *  Name of the destination to be used by the Producer and the Consumer. 
        */
        private var destination:String = "MyTopic";          
        
        /**
        *  Number of times we have gone through the scenario of disconnecting and subscribing.  
        */           
        public var attempt:int = 0;
                
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;
        
        /**
        *  Producer instance used in the test
        */       
        public var pro:Producer;
                         
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        public function setUp():void {    
                                                                                
            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                                                             
            //Call addTests giving it the object that contains all our test functions and an array of test names
            MXUnitManager.addTests(this,["disconnectSubscribeTest"], 15000);                        
        }
        ////////////////////////////////////////////////////////////////////////////
        //
        // Tests.
        //
        ////////////////////////////////////////////////////////////////////////////       
        /**
        * This test tests that if a consumer subscribes and then disconnects from a destination multiple times 
        * that when they subscribe to the destination again they can receive messages sent to the destination.      
        */
        public function disconnectSubscribeTest():void {  
            
            //setup the producer
            pro = new Producer();
            pro.destination = destination;
            
            //setup the consumer
            con = new Consumer(); 
            con.destination = destination;
            
            /*
             * Use the chain method to setup event handlers for the producer and push an addAsync method onto the stack. Receiving a 
             * message fault a channel fault or an acknowledgement that the server received the message sent by the producer will 
             * remove the addAsync method from the stack. Unless all addAsync methods have been executed the test will time out so 
             * you want to make sure that at least one of the events will get fired. This call is essentially the same as writing 
             * the following code: 
             * var asyncHandler = manager.currentTest.addAsync(producerEventHandler,{"c":con});
             * pro.addEventListener(ChannelFaultEvent.FAULT, asyncHandler);
             * pro.addEventListener(MessageFaultEvent.FAULT, asyncHandler);
             * pro.addEventListener(MessageAckEvent.ACKNOWLEDGE, asyncHandler);   
            */                                        
            manager.currentTest.chain(pro,[MessageFaultEvent.FAULT,ChannelFaultEvent.FAULT,MessageAckEvent.ACKNOWLEDGE],producerEventHandler);
            
            /*
             * Use the chain method to setup event handlers for the consumer and push an addAsync method onto the stack. Receiving a 
             * message fault a channel fault or a message event will cause the addAsync method to be removed from the stack.
             */
            manager.currentTest.chain(con,[MessageFaultEvent.FAULT,ChannelFaultEvent.FAULT,MessageEvent.MESSAGE],consumerEventHandler);
                        
            /*
             * Setup event listener to listen for property changed events from the Consumer. Use this to tell when the 
             * Consumer has subscribed to the destination.    
             */
            con.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,conPropertyChanged); 
                                                            
            var channel:Channel = ServerConfig.getChannel(channelName, false);		
 			var cs:ChannelSet = new ChannelSet(); 			
			cs.addChannel(channel);
			
			//set the consumer and producer to use the new channel set then subscribe the consumer
			con.channelSet = cs; 
			pro.channelSet = cs;            
            con.subscribe();                           
            
        }
        /**
        *  Listen for property change events on the consumer so we can tell when the consumer has subscribed.    
        */
        private function conPropertyChanged(event:PropertyChangeEvent):void {
            //make sure the ack is for a subscribe operation
            if(event.property == "subscribed" && event.oldValue == false && event.newValue == true)
            {
                //test that the subscribe operation was for the channel we are currently testing                 
                Assert.assertTrue("Wrong channel: " + con.channelSet.currentChannel.id, con.channelSet.currentChannel.id == channelName);                              
                
	            //send the message
	            var msg:IMessage = new AsyncMessage();
	            msg.body = "hello" + attempt;
	            pro.send(msg);	                          
            } 
        }
        
        /**
        *  Listen for disconnect events. Because we used chain (the same would be true had we used
        *  addAsync), the handler will get called by MXUnit instead of getting called directly.    
        */
        public function consumerDisconnect(event:ChannelEvent):void {                
            //manager.currentTest.abortAllAsyncFunctions();
            //assert that the consumer is no longer subscribed or connected
            Assert.assertTrue("Consumer shouldn't be subscribed", con.subscribed != true);
            Assert.assertTrue("Consumer shouldn't be connected", con.connected != true);
            if (attempt < 3) 
            {
            	manager.currentTest.chain(pro,[ChannelEvent.DISCONNECT],producerDisconnect); 
                pro.disconnect();               	
            }
        }
        /**
        *  Listen for disconnect events. Because we used chain (the same would be true had we used
        *  addAsync), the handler will get called by MXUnit instead of getting called directly.    
        */
        public function producerDisconnect(event:ChannelEvent):void {                
            //manager.currentTest.abortAllAsyncFunctions();
            //assert that the consumer is no longer subscribed or connected
            Assert.assertTrue("Producer shouldn't be connected", pro.connected != true);
            if (attempt < 3) 
            {
                manager.currentTest.chain(con,[MessageFaultEvent.FAULT,ChannelFaultEvent.FAULT,MessageEvent.MESSAGE],consumerEventHandler);
                con.subscribe();                  
            }
            attempt++; 
        }
        /**
        *  Listen for events from the producer.    
        */
        public function producerEventHandler(event:Event):void 
        {   
            if (event is MessageAckEvent) {
                trace("Producer received ack for message");    
            } else if (event is ChannelFaultEvent) {
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                Assert.fail("Channel faulted with following error while sending message: " + cfe.faultDetail);     
            } else if (event is MessageFaultEvent) {
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                Assert.fail("Message fault while sending message: " + mfe.faultDetail);                
            }
        }
        /**
        *  Listen for events from the consumer. 
        */
        public function consumerEventHandler(event:Event):void
        {   
            if (event is ChannelFaultEvent) {
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                Assert.fail("Consumer channel faulted with the following error: " + cfe.faultDetail);     
            } else if (event is MessageFaultEvent) {            
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                Assert.fail("Consumer got the following message fault: " + mfe.faultDetail);                
            } else if (event is MessageEvent) {                     
                var me:MessageEvent = event as MessageEvent;
                //get the message body from the message and store it.
                var result:String = me.message.body.toString();
                //assert we got the correct message
                Assert.assertEquals("Wrong message: " + result, "hello" + attempt, result);	                               
                manager.currentTest.chain(con,[ChannelEvent.DISCONNECT],consumerDisconnect);                         
            }
            con.disconnect();
        }
       
    ]]>
    </mx:Script>           
    <mx:TraceTarget level="0"/>
</mx:Application>