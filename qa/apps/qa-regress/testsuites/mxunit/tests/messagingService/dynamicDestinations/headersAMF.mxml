<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" creationComplete="runTest()" height="100%" width="100%">

    <mx:Producer id="producer" destination="DynamicDestinationAMF"
        subtopic="foo.bar.baz"
        fault="faultHandler(event, event.target.id)"
        acknowledge="ackHandler(event, event.target.id)"
        channelConnect="connectedHandler(event, event.target.id)"
        channelDisconnect="disconnectedHandler(event, event.target.id)"/>


    <mx:Consumer id="consumer" destination="DynamicDestinationAMF"
        subtopic="foo.bar.baz"
        message="messageHandler(event, event.target.id)"
        fault="faultHandler(event, event.target.id)"
        acknowledge="ackHandler(event, event.target.id)"
        channelConnect="connectedHandler(event, event.target.id)"
        channelDisconnect="disconnectedHandler(event, event.target.id)"/>


    <mx:Script>
        <![CDATA[
        import mx.messaging.events.MessageAckEvent;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;

        import mx.messaging.events.ChannelEvent;
        import mx.messaging.events.MessageEvent;
        import mx.messaging.events.MessageFaultEvent;
        import mx.messaging.messages.AsyncMessage;
        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        //////////////////////////////////////////////////////////////////////////// 
        /**
        * Used for logging. Each producer and consumer component is assigned a
        * different color.  
        */ 
        public var colors:Object = {consumer:"#0AC92B",
                                    producer:"#0000FF"};
        /**
        * When an event on the producer component causes one of the event handlers to 
        * get called information about the event gets stored in this array.   
        */
        public var producerEvents:Array = [];
        /**
        * When an event on the consumer component causes one of the event handlers to 
        * get called information about the event gets stored in this array.   
        */
        public var consumerEvents:Array = [];
        /**
        * When a message event on the consumer component causes the message handler to get 
        * called information about the message gets stored in this array.   
        */
        public var consumerMessages:Array = [];

        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method does all of the testing work and the test methods just verify
        *  the outcome. Be careful not to remove the delay on the MXUnitManager otherwise the 
        *  test methods will be called to verify the results before the test work has finished.   
        */     
        public function runTest():void {

            consumer.subscribe();

            producer.send(new AsyncMessage("1. Message with no headers."));
            producer.send(new AsyncMessage("2. Message with a header in it.", {apples:"oranges", grapes:"raisins"}));

            producer.defaultHeaders = {william:"rules", subtopic:"some subtopic", endpoint:"some endpoint"};

            producer.send(new AsyncMessage("3. Message with default headers."));
            producer.send(new AsyncMessage("4. Message with default headers and specific headers.", {last:"finally", subtopic:"overridden"}));

            MXUnitManager.delay = 10000;
            MXUnitManager.detectTests(this, 10000);
        }
        ////////////////////////////////////////////////////////////////////////////
        //
        // Tests
        //
        ////////////////////////////////////////////////////////////////////////////
        /**
         * The first message sent by the producer in the setup method has no headers. This
         * test method verifies that the message the consumer receives has no headers. 
         */  
        public function testMessageWithNoHeaders():void {
            consumerMessages.sort();
            // verify headers object has only headers named DS*

            var headers:Object = consumerMessages[0].headers;

            for (var i:String in headers) {
                if (i.indexOf("DS") != 0 && i.indexOf("JMS") != 0) {
                    Assert.fail("A header that was not prefixed with 'DS' or 'JMS' was found. " + i + " = " + headers[i]);
                }
            }

            Assert.assertTrue("no failure", true);
        }
        /**
         * The second message sent by the producer in the setup method has two headers, apples 
         * and grapes. This test method verifies that the message the consumer receives 
         * has the apples and grapes headers. 
         */ 
        public function testMessageWithHeaders():void {
            consumerMessages.sort();
            //2 - apples:"oranges", grapes:"raisins"

            Assert.assertEquals("apples header", "oranges", consumerMessages[1].headers.apples);
            Assert.assertEquals("grapes header", "raisins", consumerMessages[1].headers.grapes);
        }
        /**
         * The third message sent by the producer in the setup method has no headers but three 
         * default headers were added to the producer before the producer sent the message. This 
         * test verifies that the message the consumer receives has the expected headers. 
         */ 
        public function testMessageWithDefaultHeaders():void {
            consumerMessages.sort();
            //3 - william:"rules", subtopic:"some subtopic"

            Assert.assertEquals("william header", "rules", consumerMessages[2].headers.william);
            Assert.assertEquals("subtopic header", "some subtopic", consumerMessages[2].headers.subtopic);
            Assert.assertEquals("endpoint header", "some endpoint", consumerMessages[2].headers.endpoint);
        }
        /**
         * The fourth message sent by the producer in the setup method has two headers, one of which overrides 
         * one of the default headers. This test verifies that the message the consumer receives has the 
         * expected headers. 
         */
        public function testMessageWithDefaultAndSpecificHeaders():void {
            consumerMessages.sort();
            //4 - william:"rules", last:"finally", subtopic:"overridden", endpoint:"some endpoint"

            Assert.assertEquals("william header", "rules", consumerMessages[3].headers.william);
            Assert.assertEquals("subtopic header", "overridden", consumerMessages[3].headers.subtopic);
            Assert.assertEquals("endpoint header", "some endpoint", consumerMessages[3].headers.endpoint);
            Assert.assertEquals("last header", "finally", consumerMessages[3].headers.last);
        }
        /**
        * @private
        * Event handler for message events
        */ 
        private function messageHandler(event:MessageEvent, whose:String):void {
            log("<font size='+3'><b>" + whose + " message: " + event.message.headers.from + ": " + event.message.body + "</b></font>", colors[whose]);

            for (var i:String in event.message.headers) {
                log("  " + i + " : " + event.message.headers[i], colors[whose]);
            }

            this[whose + "Messages"].push(event.message);
        }
        /**
        * @private
        * Event handler for message fault events
        */ 
        private function faultHandler(event:MessageFaultEvent, whose:String):void {
            log("*** " + whose + " fault: " + event.faultCode + " : " + event.faultString + " ***", colors[whose]);
            this[whose + "Events"].push("fault: " + event.faultCode + " : " + event.faultString);
        }
        /**
        * @private
        * Event handler for channel connect events
        */ 
        private function connectedHandler(event:ChannelEvent, whose:String):void {
            log(' - ' + whose + ' channelConnect.', colors[whose]);
            this[whose + "Events"].push("channelConnect");
        }
        /**
        * @private
        * Event handler for channel disconnect events
        */ 
        private function disconnectedHandler(event:ChannelEvent, whose:String):void {
            log(' - ' + whose + ' channelDisconnect.', colors[whose]);
            this[whose + "Events"].push("channelDisconnect");
        }
        /**
        * @private
        * Event handler for message ack events
        */ 
        private function ackHandler(event:MessageAckEvent, whose:String):void {
            log(' - ' + whose + ' ack.', colors[whose]);
            this[whose + "Events"].push("ack");
        }
        /**
        * @private
        * Utility method used to log messages to a text field.
        */ 
        private function log(message:String, color:String = "#000000"):void {
            output.htmlText += "<font color='" + color + "'>" + message + "</font>\n";
        }

        ]]>
    </mx:Script>

    <mx:TextArea id="output" height="300" width="500" editable="false" fontSize="10" fontFamily="Arial" />

</mx:Application>