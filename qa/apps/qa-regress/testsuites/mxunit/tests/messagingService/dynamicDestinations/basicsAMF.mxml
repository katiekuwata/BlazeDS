<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" creationComplete="runTest()" height="100%" width="100%">

    <mx:Producer id="producer" destination="DynamicDestinationAMF"
        subtopic="foo.bar.baz"
        fault="faultHandler(event, 'producer')"
        acknowledge="ackHandler(event, 'producer')"
        channelConnect="connectedHandler(event, 'producer')"
        channelDisconnect="disconnectedHandler(event, 'producer')"/>


    <mx:Producer id="producerWithNoMatchingConsumer" destination="DynamicDestinationAMF"
        subtopic="music.alternative.godsmack"
        fault="faultHandler(event, 'producer')"
        acknowledge="ackHandler(event, 'producer')"
        channelConnect="connectedHandler(event, 'producer')"
        channelDisconnect="disconnectedHandler(event, 'producer')"/>


    <mx:Consumer id="matchingConsumer" destination="DynamicDestinationAMF"
        subtopic="foo.bar.baz"
        message="messageHandler(event, 'matchingConsumer')"
        fault="faultHandler(event, 'matchingConsumer')"
        acknowledge="ackHandler(event, 'matchingConsumer')"
        channelConnect="connectedHandler(event, 'matchingConsumer')"
        channelDisconnect="disconnectedHandler(event, 'matchingConsumer')"/>


    <mx:Consumer id="matchingConsumerDifferentDestination" destination="DynamicDestinationDefaultSeparatorAMF"
        subtopic="foo.bar.baz"
        message="messageHandler(event, 'matchingConsumerDifferentDestination')"
        fault="faultHandler(event, 'matchingConsumerDifferentDestination')"
        acknowledge="ackHandler(event, 'matchingConsumerDifferentDestination')"
        channelConnect="connectedHandler(event, 'matchingConsumerDifferentDestination')"
        channelDisconnect="disconnectedHandler(event, 'matchingConsumerDifferentDestination')"/>


    <mx:Consumer id="nonMatchingConsumer" destination="DynamicDestinationAMF"
        subtopic="foo.bar.bananas"
        message="messageHandler(event, 'nonMatchingConsumer')"
        fault="faultHandler(event, 'nonMatchingConsumer')"
        acknowledge="ackHandler(event, 'nonMatchingConsumer')"
        channelConnect="connectedHandler(event, 'nonMatchingConsumer')"
        channelDisconnect="disconnectedHandler(event, 'nonMatchingConsumer')"/>



    <mx:Script>
        <![CDATA[
        import mx.messaging.events.MessageAckEvent;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;

        import mx.messaging.events.ChannelEvent;
        import mx.messaging.events.MessageEvent;
        import mx.messaging.events.MessageFaultEvent;
        import mx.messaging.messages.AsyncMessage;

        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        //////////////////////////////////////////////////////////////////////////// 
        /**
        * Used for logging. Each producer and consumer component is assigned a
        * different color.  
        */ 
        public var colors:Object = {nonMatchingConsumer:"#FF0000",
                                    matchingConsumer:"#0AC92B",
                                    matchingConsumerDifferentDestination:"#FFA54F",
                                    producer:"#0000FF"};
        /**
        * When an event on the Producer component with an id of "producer" causes
        * one of the event handlers to get called information about the event gets 
        * stored in this array.   
        */
        public var producerEvents:Array = [];
        /**
        * When an event on the Producer component with an id of "producerWithNoMatchingConsumer" 
        * causes one of the event handlers to get called information about the event gets 
        * stored in this array.   
        */
        public var producerWithNoMatchingConsumerEvents:Array = [];
        /**
        * When an event on the Consumer component with an id of "matchingConsumer" causes
        * one of the event handlers to get called information about the event gets 
        * stored in this array.   
        */
        public var matchingConsumerEvents:Array = [];
        /**
        * When a message event on the Consumer component with an id of "matchingConsumer" 
        * causes the message handler to get called information about the message gets 
        * stored in this array.   
        */
        public var matchingConsumerMessages:Array = [];
        /**
        * When an event on the Consumer component with an id of "nonMatchingConsumer" causes
        * one of the event handlers to get called information about the event gets 
        * stored in this array.   
        */
        public var nonMatchingConsumerEvents:Array = [];
        /**
        * When a message event on the Consumer component with an id of "nonMatchingConsumer" 
        * causes the message handler to get called information about the message gets 
        * stored in this array.   
        */
        public var nonMatchingConsumerMessages:Array = [];
        /**
        * When an event on the Consumer component with an id of "matchingConsumerDifferentDestination" 
        * causes one of the event handlers to get called information about the event gets 
        * stored in this array.   
        */
        public var matchingConsumerDifferentDestinationEvents:Array = [];
        /**
        * When a message event on the Consumer component with an id of "matchingConsumerDifferentDestination" 
        * causes the message handler to get called information about the message gets 
        * stored in this array.   
        */
        public var matchingConsumerDifferentDestinationMessages:Array = [];

        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method does all of the testing work and the test methods just verify
        *  the outcome. Be careful not to remove the delay on the MXUnitManager otherwise the 
        *  test methods will be called to verify the results before the test work has finished.   
        */        
        public function runTest():void {

            nonMatchingConsumer.subscribe();
            matchingConsumer.subscribe();
            matchingConsumerDifferentDestination.subscribe();

            // calling before and after other producer in case this causes channel to die
            producerWithNoMatchingConsumer.send(new AsyncMessage("I had no idea they were from Boston."));

            var message:AsyncMessage = new AsyncMessage();
            message.body = "Can you hear me now?  Good.";
            message.headers = {from:"t0m"};


            producer.send(message);

            producerWithNoMatchingConsumer.send(new AsyncMessage("Cool."));

            MXUnitManager.delay = 10000;
            MXUnitManager.detectTests(this, 10000);
        }
        ////////////////////////////////////////////////////////////////////////////
        //
        // Tests
        //
        //////////////////////////////////////////////////////////////////////////// 
        /**
         * In the setup method the "producer" was used to send a message to the destination 
         * DynamicDestinationAMF. This test just verifies that there were no errors in the 
         * array of event information stored for this Producer. 
         */  
        public function testProducer():void {
            nonMatchingConsumer.unsubscribe();
            matchingConsumer.unsubscribe();

            Assert.assertDoesNotContain("Subtopics not allowed fault was found", "does not allow subtopics", producerEvents.toString());
            Assert.assertDoesNotContain("Other fault was found", "fault", producerEvents.toString());
        }
        /**
         * In the setup method the "producerWithNoMatchingConsumers" was used to send a message to the
         * destination DynamicDestinationAMF. This test just verifies that there were no errors in the 
         * array of event information stored for this Producer. 
         */  
        public function testProducerWithNoConsumers():void {
            Assert.assertDoesNotContain("Subtopics not allowed fault was found", "does not allow subtopics", producerWithNoMatchingConsumerEvents.toString());
            Assert.assertDoesNotContain("Other fault was found", "fault", producerWithNoMatchingConsumerEvents.toString());
        }
        /**
         * This test verifies that message sent by the Producer "producer" in the setup method was received
         * by the Consumer "matchingConsumer" because the subtopic on the Producer matched the subtopic on the 
         * Consumer. Test test also verifies that the Consumer did not receive any faults.  
         */  
        public function testMatchingConsumer():void {
            Assert.assertContains("Message was not received", "Can you hear me now?  Good.", matchingConsumerMessages.toString());
            Assert.assertEquals("messages length (" + matchingConsumerMessages.toString() + ")", 1, matchingConsumerMessages.length);

            Assert.assertDoesNotContain("Subtopics not allowed fault was found", "does not allow subtopics", matchingConsumerEvents.toString());
            Assert.assertDoesNotContain("Other fault was found", "fault", matchingConsumerEvents.toString());
        }
        /**
         * This test verifies that the Consumer "nonMatchingConsumer" did not receive any messages that were sent
         * by the Producers in the setup method because the Consumer's subtopic did not match the suptopic of either
         * of the Producers. The test also verifies that the consumer did not receive any faults.
         */ 
        public function testNonMatchingConsumer():void {
            Assert.assertDoesNotContain("Message was received", "Can you hear me now?  Good.", nonMatchingConsumerMessages.toString());
            Assert.assertEquals("messages length (" + nonMatchingConsumerMessages.toString() + ")", 0, nonMatchingConsumerMessages.length);

            Assert.assertDoesNotContain("Subtopics not allowed fault was found", "does not allow subtopics", nonMatchingConsumerEvents.toString());
            Assert.assertDoesNotContain("Other fault was found", "fault", nonMatchingConsumerEvents.toString());
        }

        /**
         * This test verifies that the Consumer "matchingConsumerDifferentDestination" did not receive any messages 
         * that were sent by the Producers in the setup method because although the Consumer's subtopic matches 
         * the suptopic of one of the Producers the consumer is subscribed to a different destination. 
         * The test also verifies that the consumer did not receive any faults.
         */ 
        public function testMatchingConsumerDifferentDestination():void {
            Assert.assertDoesNotContain("Message was received", "Can you hear me now?  Good.", matchingConsumerDifferentDestinationMessages.toString());
            Assert.assertEquals("messages length (" + matchingConsumerDifferentDestinationMessages.toString() + ")", 0, matchingConsumerDifferentDestinationMessages.length);

            Assert.assertDoesNotContain("Subtopics not allowed fault was found", "does not allow subtopics", matchingConsumerDifferentDestinationEvents.toString());
            Assert.assertDoesNotContain("Other fault was found", "fault", matchingConsumerDifferentDestinationEvents.toString());
        }
        /**
        * @private
        * Event handler for message events
        */ 
        private function messageHandler(event:MessageEvent, whose:String):void {
            log("<font size='+3'><b>" + whose + " message: " + event.message.headers.from + ": " + event.message.body + "</b></font>", colors[whose]);
            this[whose + "Messages"].push(event.message.headers.from + ": " + event.message.body);
        }
        /**
        * @private
        * Event handler for message fault events
        */ 
        private function faultHandler(event:MessageFaultEvent, whose:String):void {
            log("*** " + whose + " fault: " + event.faultCode + " : " + event.faultString + " ***", colors[whose]);
            this[whose + "Events"].push("fault: " + event.faultCode + " : " + event.faultString);
        }
        /**
        * @private
        * Event handler for channel connect events
        */ 
        private function connectedHandler(event:ChannelEvent, whose:String):void {
            log(' - ' + whose + ' channelConnect.', colors[whose]);
            this[whose + "Events"].push("channelConnect");
        }
        /**
        * @private
        * Event handler for channel disconnect events
        */ 
        private function disconnectedHandler(event:ChannelEvent, whose:String):void {
            log(' - ' + whose + ' channelDisconnect.', colors[whose]);
            this[whose + "Events"].push("channelDisconnect");
        }
        /**
        * @private
        * Event handler for message ack events
        */ 
        private function ackHandler(event:MessageAckEvent, whose:String):void {
            log(' - ' + whose + ' ack.', colors[whose]);
            this[whose + "Events"].push("ack");
        }
        /**
         * @private
         * Utility function used to log messages to a text field.
         */ 
        private function log(message:String, color:String = "#000000"):void {
            output.htmlText += "<font color='" + color + "'>" + message + "</font>\n";
        }


        ]]>
    </mx:Script>

    <mx:TextArea id="output" height="300" width="500" editable="false" fontSize="10" fontFamily="Arial" />

</mx:Application>