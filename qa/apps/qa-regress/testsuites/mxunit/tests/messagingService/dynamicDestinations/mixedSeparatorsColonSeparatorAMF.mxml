<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" creationComplete="runTest()" height="100%" width="100%">

    <mx:HBox>
        <mx:Label text="Producer destination / subtopic" />
        <mx:TextInput id="producerDestination" text="{producer.destination}" />
        <mx:TextInput id="producerSubtopic" text="{producer.subtopic}" />
    </mx:HBox>


    <mx:Producer id="producer" destination="DynamicDestinationColonSeparatorAMF"
        subtopic="foo.bar:baz/bam"
        fault="faultHandler(event, event.target.id)"
        acknowledge="ackHandler(event, event.target.id)"
        channelConnect="connectedHandler(event, event.target.id)"
        channelDisconnect="disconnectedHandler(event, event.target.id)"/>


    <mx:Consumer id="matchingConsumer" destination="DynamicDestinationColonSeparatorAMF"
        subtopic="foo.bar:baz/bam"
        message="messageHandler(event, event.target.id)"
        fault="faultHandler(event, event.target.id)"
        acknowledge="ackHandler(event, event.target.id)"
        channelConnect="connectedHandler(event, event.target.id)"
        channelDisconnect="disconnectedHandler(event, event.target.id)"/>


    <mx:Consumer id="fooDotStarConsumer" destination="DynamicDestinationColonSeparatorAMF"
        subtopic="foo.*"
        message="messageHandler(event, event.target.id)"
        fault="faultHandler(event, event.target.id)"
        acknowledge="ackHandler(event, event.target.id)"
        channelConnect="connectedHandler(event, event.target.id)"
        channelDisconnect="disconnectedHandler(event, event.target.id)"/>


    <mx:Consumer id="fooDotBarColonStarConsumer" destination="DynamicDestinationColonSeparatorAMF"
        subtopic="foo.bar:*"
        message="messageHandler(event, event.target.id)"
        fault="faultHandler(event, event.target.id)"
        acknowledge="ackHandler(event, event.target.id)"
        channelConnect="connectedHandler(event, event.target.id)"
        channelDisconnect="disconnectedHandler(event, event.target.id)"/>


    <mx:Script>
        <![CDATA[
        import mx.messaging.events.MessageAckEvent;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;

        import mx.messaging.events.ChannelEvent;
        import mx.messaging.events.MessageEvent;
        import mx.messaging.events.MessageFaultEvent;
        import mx.messaging.messages.AsyncMessage;

        /**
        * When an event on the producer component causes one of the event handlers to get 
        * called information about the event gets stored in this array.   
        */
        public var producerEvents:Array = [];
        /**
        * When an event on the Consumer component with an id of "matchingConsumer" causes
        * one of the event handlers to get called information about the event gets 
        * stored in this array.   
        */ 
        public var matchingConsumerEvents:Array = [];
        /**
        * When an message event on the Consumer component with an id of "matchingConsumer" causes
        * the message event handler to get called information about the message gets 
        * stored in this array.   
        */   
        public var matchingConsumerMessages:Array = [];
        /**
        * When an event on the Consumer component with an id of "fooDotStarConsumer" causes
        * one of the event handlers to get called information about the event gets 
        * stored in this array.   
        */   
        public var fooDotStarConsumerEvents:Array = [];
        /**
        * When an message event on the Consumer component with an id of "fooDotStarConsumer" causes
        * the message event handler to get called information about the message gets 
        * stored in this array.   
        */  
        public var fooDotStarConsumerMessages:Array = [];
        /**
        * When an event on the Consumer component with an id of "fooDotBarColonStarConsumer" causes
        * one of the event handlers to get called information about the event gets 
        * stored in this array.   
        */   
        public var fooDotBarColonStarConsumerEvents:Array = [];
        /**
        * When an message event on the Consumer component with an id of "fooDotBarColonStarConsumer" causes
        * the message event handler to get called information about the message gets 
        * stored in this array.   
        */
        public var fooDotBarColonStarConsumerMessages:Array = [];

        /**
        * Used for logging. Each producer and consumer component is assigned a
        * different color.  
        */ 
        public var colors:Object = {matchingConsumer:"#0AC92B",
                                    fooDotStarConsumer:"#EE00EE",
                                    fooDotBarColonStarConsumer:"#964514",
                                    producer:"#0000FF"};

        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method does all of the testing work and the test methods just verify
        *  the outcome. Be careful not to remove the delay on the MXUnitManager otherwise the 
        *  test methods will be called to verify the results before the test work has finished.   
        */ 
        public function runTest():void {

            matchingConsumer.subscribe();
            fooDotStarConsumer.subscribe();
            fooDotBarColonStarConsumer.subscribe();


            producer.send(new AsyncMessage("Well, here goes."));

            MXUnitManager.delay = 10000;
            MXUnitManager.detectTests(this, 10000);
        }
        ////////////////////////////////////////////////////////////////////////////
        //
        // Tests
        //
        ////////////////////////////////////////////////////////////////////////////
        /**
        * Test that a producer using a subtopic of "foo.bar:baz/bam" and a consumer 
        * using the same subtopic of "foo.bar:baz/bam" is considered a match and the 
        * consumer will receive the message sent by the producer. 
        */   
        public function testMatchingConsumer():void {
            Assert.assertEquals("messages length", 1, matchingConsumerMessages.length);
            Assert.assertEquals("message", "Well, here goes.", matchingConsumerMessages[0]);
        }
        /**
        * Test that a producer using a subtopic of "foo.bar:baz/bam" and a consumer 
        * using a subtopic of "foo.*" is considered a match and the 
        * consumer will receive the message sent by the producer. 
        */ 
        public function testFooDotStarConsumer():void {
            Assert.assertEquals("messages length", 0, fooDotStarConsumerMessages.length);
            Assert.assertContains("Invalid subtopic error not found.", "The subtopic, 'foo.*', is not valid.", fooDotStarConsumerEvents.toString());
        }
        /**
        * Test that a producer using a subtopic of "foo.bar:baz/bam" and a consumer 
        * using a subtopic of "foo.bar:*" is considered a match and the 
        * consumer will receive the message sent by the producer. 
        */ 
        public function testfooDotBarColonStarConsumer():void {
            Assert.assertEquals("messages length", 1, fooDotBarColonStarConsumerMessages.length);
            Assert.assertEquals("message", "Well, here goes.", fooDotBarColonStarConsumerMessages[0]);
        }
        /**
        *  @private
        *  Event handler for message events 
        */
        private function messageHandler(event:MessageEvent, whose:String):void {
            log("<font size='+3'><b>" + whose + " message: " + event.message.body + "</b></font>", colors[whose]);
            this[whose + "Messages"].push(event.message.body);
        }
        /**
        *  @private
        *  Event handler for message fault events 
        */
        private function faultHandler(event:MessageFaultEvent, whose:String):void {
            log("*** " + whose + " fault: " + event.faultCode + " : " + event.faultString + " ***", colors[whose]);
            this[whose + "Events"].push("fault: " + event.faultCode + " : " + event.faultString);
        }
        /**
        *  @private
        *  Event handler for channel connect event 
        */
        private function connectedHandler(event:ChannelEvent, whose:String):void {
            log(' - ' + whose + ' channelConnect.', colors[whose]);
            this[whose + "Events"].push("channelConnect");
        }
        /**
        *  @private
        *  Event handler for channel disconnect events 
        */
        private function disconnectedHandler(event:ChannelEvent, whose:String):void {
            log(' - ' + whose + ' channelDisconnect.', colors[whose]);
            this[whose + "Events"].push("channelDisconnect");
        }
        /**
        *  @private
        *  Event handler for message ack events 
        */
        private function ackHandler(event:MessageAckEvent, whose:String):void {
            log(' - ' + whose + ' ack.', colors[whose]);
            this[whose + "Events"].push("ack");
        }
        /**
        *  @private
        *  Utility method for logging messages to a text field. 
        */
        private function log(message:String, color:String = "#000000"):void {
            output.htmlText += "<font color='" + color + "'>" + message + "</font>\n";
        }        

        ]]>
    </mx:Script>

    <mx:TextArea id="output" height="300" width="500" editable="false" fontSize="10" fontFamily="Arial" />

</mx:Application>