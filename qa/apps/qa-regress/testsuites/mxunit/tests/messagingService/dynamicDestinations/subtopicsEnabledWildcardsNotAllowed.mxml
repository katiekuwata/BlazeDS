<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" creationComplete="runTest()" height="100%" width="100%">

    <mx:Consumer id="consumer" destination="DynamicDestinationNoWildcards"
        message="messageHandler(event, 'consumer')"
        fault="faultHandler(event, event.target.id)"
        acknowledge="ackHandler(event, event.target.id)"
        channelConnect="connectedHandler(event, event.target.id)"
        channelDisconnect="disconnectedHandler(event, event.target.id)"/>

    <mx:Consumer id="matchingConsumer" destination="DynamicDestinationNoWildcards"
        subtopic="foo.bar.baz"
        message="messageHandler(event, 'matchingConsumer')"
        fault="faultHandler(event, 'matchingConsumer')"
        acknowledge="ackHandler(event, 'matchingConsumer')"
        channelConnect="connectedHandler(event, 'matchingConsumer')"
        channelDisconnect="disconnectedHandler(event, 'matchingConsumer')"/>

    <mx:Producer id="producer" destination="DynamicDestinationNoWildcards"
        fault="faultHandler(event, event.target.id)"
        acknowledge="ackHandler(event, event.target.id)"
        channelConnect="connectedHandler(event, event.target.id)"
        channelDisconnect="disconnectedHandler(event, event.target.id)"/>

    <mx:Script>
        <![CDATA[
        import mx.messaging.events.MessageAckEvent;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;

        import mx.messaging.events.ChannelEvent;
        import mx.messaging.events.MessageEvent;
        import mx.messaging.events.MessageFaultEvent;
        import mx.messaging.messages.AsyncMessage;


        public var matchingConsumerEvents:Array = [];
        public var matchingConsumerMessages:Array = [];
        public var consumerEvents:Array = [];
        public var producerEvents:Array = [];
        public var messages:Array = [];
        public var testsStarted:Boolean = false;

        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method does all of the testing work and the test methods just verify
        *  the outcome. Be careful not to remove the delay on the MXUnitManager otherwise the 
        *  test methods will be called to verify the results before the test work has finished.   
        */
        public function runTest():void {
            consumer.subtopic = "foo.bar.*";
            consumer.subscribe();
            matchingConsumer.subscribe();
            var message:AsyncMessage = new AsyncMessage();
            message.body = "if you can read this then there's a bug";
            message.headers = {from:"t0m"};

            producer.subtopic = "foo.bar.baz";
            producer.send(message);

            MXUnitManager.delay = 10000;
            MXUnitManager.detectTests(this, 10000);
        }

        ////////////////////////////////////////////////////////////////////////////
        //
        // Tests
        //
        ////////////////////////////////////////////////////////////////////////////
        /**
        * Test that when a consumer specifies a subtopic with a wildcard and tries to subscribe to a 
        * destination that does allow wildcards that the consumer receives a fault
        */
        public function testConsumerFault():void {
            Assert.assertContains("Fault not found", "does not allow wildcard subtopics", consumerEvents.toString());
            Assert.assertEquals("messages length (" + messages.toString() + ")", 0, messages.length);
        }
        /**
         * This test verifies that message sent by the Producer "producer" in the setup method was received
         * by the Consumer "matchingConsumer" because the subtopic on the Producer matched the subtopic on the 
         * Consumer. Test test also verifies that the Consumer did not receive any faults.  
         */  
        public function testMatchingConsumer():void {
            Assert.assertContains("Message was not received", "if you can read this then there's a bug", matchingConsumerMessages.toString());
            Assert.assertEquals("messages length (" + matchingConsumerMessages.toString() + ")", 1, matchingConsumerMessages.length);

            Assert.assertDoesNotContain("Subtopics not allowed fault was found", "does not allow subtopics", matchingConsumerEvents.toString());
            Assert.assertDoesNotContain("Other fault was found", "fault", matchingConsumerEvents.toString());
        }

        private function messageHandler(event:MessageEvent, whose:String):void {
            log(String(event.message.headers.from + ": " + event.message.body));
            this[whose + "Messages"].push(event.message.headers.from + ": " + event.message.body);
        }

        private function faultHandler(event:MessageFaultEvent, whose:String):void {
            log("*** " + whose + " fault: " + event.faultCode + " : " + event.faultString + " ***");
            this[whose + "Events"].push("fault: " + event.faultCode + " : " + event.faultString);
        }

        private function connectedHandler(event:ChannelEvent, whose:String):void {
            log(' - ' + whose + ' channelConnect.');
            this[whose + "Events"].push("channelConnect");
        }

        private function disconnectedHandler(event:ChannelEvent, whose:String):void {
            log(' - ' + whose + ' channelDisconnect.');
            this[whose + "Events"].push("channelDisconnect");
        }

        private function ackHandler(event:MessageEvent, whose:String):void {
            log(' - ' + whose + ' ack.');
            this[whose + "Events"].push("ack");
        }

        private function log(message:String):void {
            output.text += message + "\n";
        }
        ]]>
    </mx:Script>

    <mx:TextArea id="output" height="300" width="500" editable="false" />

</mx:Application>