<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">           
    
    <mx:Script>
    <![CDATA[
    	import mx.events.PropertyChangeEvent;
        import mx.messaging.ChannelSet;
        import mx.utils.UIDUtil;
        import mx.messaging.Producer;
        import mx.messaging.channels.AMFChannel;
        import mx.messaging.Consumer;   
        import mx.messaging.Channel;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.config.*;
        import mx.messaging.events.*;
        import qa.utils.TestTask;
        import qa.utils.TestTaskEvent;
 
        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////                          
        
        /**
        *  Array to hold names of channels that will be tested
        */       
        public var channelNames:Array;
        
        /**
        * Consumer instance used in the test.
        */
        public var con:Consumer; 
        
        /**
        *  Name of test that is currently being executed. 
        */
        private var currentTest:String; 
        
        /**
        *  Name of the destination to be used by the Producer and the Consumer. 
        */
        private var destination:String = "MyTopicDefaultPriority09";        
        
        /**
        *  Index used to point to channel in the channelNames array for the currently executing test. 
        */
        public var index:int = 0; 
        
        /**
        *  Counter used to track number of messages received 
        */  
        private var messageCounter:int;
        
        /**
        *  Number of messages to send in the test
        */  
        private var numMessages:int = 100;
        
        /**
        * Producer instance used in the test.
        */
        public var pro:Producer; 
        
        /**
        *  Array of test names. Test name will be based on the channel 
        */                  
        public var testNames:Array = new Array();
        
        /**
        *  TestTask object to listen for test task events. 
        */ 
        private var t:TestTask = new TestTask();
        
           
        /**
        *  place holder for values we generated randomly
        */    
        public var generatedPriorityValues:Array = new Array();     

        /**
        *  place holder for values we generated randomly sorted in descending order (9-0)
        */    
        public var sortedGeneratedPriorityValues:Array = new Array();     

        /**
        *  reverse the order place holder for values we generated randomly sorted in descending NUMERIC order
        */    
        public var reverseSortedGeneratedPriorityValues:Array = new Array();     
        
        /**
        *  place holder for returned values
        */    
        public var actualPriorityValues:Array = new Array();    

        /**
        *  index position for each of the expectedPriorityValues 
        */        
        public var pointer:uint;

        
                                
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests using the list of 
        *  channels available for the destination. This will cause the generic test method
        *  that is defined below to get run once per channel. 
        */
        public function setUp():void {    
            
           //get the list of channel names for the destination from ServerConfig 
           channelNames = (ServerConfig.getChannelSet(destination) as ChannelSet).channelIds;           
                                            
           //create a new generic object to add test functions to
           var testObj:Object = new Object();  
                                           
           /*
            * Loop over the channel names and create a new test function for each channel. 
            * Even though the test function will have a new name it just points to our generic 
            * test function which will need to keep track of which test is being run. 
            */
           for (var i:int = 0; i < channelNames.length; i++) {
               var channel:Channel = ServerConfig.getChannel(channelNames[i]);               
               var testName:String = "test_" + channel.id;               
               testObj[testName] = simpleMessageTest;                    
               testNames.push(testName);                                 
            }                          
            //configure the MXUnitManager                                         
            MXUnitManager.delay = 6000;             
            //Call addTests giving it the object that contains all our test functions and an array of the test names
            MXUnitManager.getInstance().addTests(testObj,testNames, 20000);
        }
        /** 
        * Generate a random number 
        * @return Random Number
        * @error throws Error if low or high is not provided
        */  
        public function randomNumber(low:Number=NaN, high:Number=NaN):Number
        {
          var low:Number = low;
          var high:Number = high;
          var theNumber:Number;
          //trace("low: " + low.toString() + " high: " + high.toString());
        
          if(isNaN(low))
          {
            throw new Error("low must be defined");
          }
          if(isNaN(high))
          {
            throw new Error("high must be defined");
          }
          theNumber = Math.floor(Math.random() * (1+high-low)) + low;
         // trace("theNumber: " + theNumber);
          return theNumber;
        }      
        /**
		* This test tests that a number of messages can be sent and received using a  messaging destination 
		* that uses the ActionScriptAdapter adapter. This test get looped over for all channels available on 
		* the destination used in the test.     
		*/
        public function simpleMessageTest():void {  
            
            //set messageCounter to 0
            messageCounter = 0; 
            
            //setup the producer
            pro = new Producer();
            pro.destination = destination;
            
            
            //setup the consumer
            con = new Consumer(); 
            con.destination = destination;
            
            con.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,consumerPropertyChanged); 
            
            MXUnitManager.getInstance().currentTest.chain(t,[TestTaskEvent.COMPLETED, TestTaskEvent.FAILED],testTaskEventHandler); 
                                   
            
            //create event listeners for faults from producer and consumer
            pro.addEventListener(ChannelFaultEvent.FAULT,producerFaultHandler); 
            pro.addEventListener(MessageFaultEvent.FAULT,producerFaultHandler); 
            con.addEventListener(ChannelFaultEvent.FAULT,consumerFaultHandler);
            con.addEventListener(MessageFaultEvent.FAULT,consumerFaultHandler);             
                        
            //increment the counter to point to the next test
            pointer = index++; 
            
            //create a new channel using the next channel name in the list and add it to a new channelset           
            var channelName:String = channelNames[pointer]; 
            currentTest = channelName;
            var channel:Channel = ServerConfig.getChannel(channelName, false);			
 			var cs:ChannelSet = new ChannelSet(); 			
			cs.addChannel(channel);
			
			//set the consumer and producer to use the new channelset then subscribe the consumer
			con.channelSet = cs;
			pro.channelSet = cs;             
            con.subscribe(UIDUtil.createUID());            
            
            //generate random priority values. These will be used in setting the msg.headers[AbstractMessage.PRIORITY_HEADER]
            //9 being highest priority and 0 being lowest
            for(var i:int = 0; i <numMessages; i++)
            {
                generatedPriorityValues.push(randomNumber(-5, 20));
            }
            
            //sort the generatedPriorityValues in Descending order, which is the order  the messages should be delivered 
            sortedGeneratedPriorityValues = generatedPriorityValues.sort(Array.NUMERIC); 
            reverseSortedGeneratedPriorityValues = sortedGeneratedPriorityValues.reverse();    

        }
        /**
        *  Listen for property change events on the consumer so we can tell when the consumer has subscribed. 
        */
        private function consumerPropertyChanged(event:PropertyChangeEvent):void 
        {
            if(event.property == "subscribed" && con.subscribed == true)
            {
                //test that the subscribe operation was for the channel we are currently testing                 
                Assert.assertTrue("Wrong channel: " + con.channelSet.currentChannel.id, con.channelSet.currentChannel.id == currentTest); 
                
                con.addEventListener(MessageEvent.MESSAGE,msMessage);
       			//send messages in a loop
                for(var i:int = 0; i < numMessages; i++) {
                    var msg:IMessage = new AsyncMessage();
                    //assign the random priority values to the message header
                    msg.headers[AbstractMessage.PRIORITY_HEADER] = generatedPriorityValues[i];
                    msg.body = msg.headers["DSPriority"];
                    pro.send(msg);              
                }
            } 
        }
        /**
        *  Listen for incoming messages. Because we used addAsync, the handler will get called by MXUnit instead of 
        *  getting called directly by the producer.    
        */
        public function msMessage(e:MessageEvent):void
        {
            //get the message header from the message and store it.
            var result:String = e.message.headers["DSPriority"].toString();
            
            //assert we got the messages in the correct order of priority  
            var expected:String = "";
            trace("messageCounter: " + messageCounter.toString());

            if(new Number(reverseSortedGeneratedPriorityValues[messageCounter]) <0)
            {
                expected = "0";
                //throwaway = sortedGeneratedPriorityValues[messageCounter].toString();
                trace("< 0 throwaway " + reverseSortedGeneratedPriorityValues[messageCounter] + " for " + result );
            }else if(reverseSortedGeneratedPriorityValues[messageCounter] >9)
            {
                expected = "9";
                //throwaway = sortedGeneratedPriorityValues[messageCounter].toString();
                trace("> 9 throwaway " + reverseSortedGeneratedPriorityValues[messageCounter] + " for " + result );
            }else
            {
                expected = reverseSortedGeneratedPriorityValues[messageCounter].toString();
                trace("the actual result: " + result + " is within range of the expected value stored in the array: " + reverseSortedGeneratedPriorityValues[messageCounter]);
            }
            Assert.assertEquals("Unexpected Priority: " + result, expected, result);
            //increment our message counter 
            messageCounter++;                         
            if (messageCounter >= numMessages) {
                t.taskCompleted();            
            }
        }
        public function testTaskEventHandler(e:TestTaskEvent):void 
        {   
            con.removeEventListener(MessageEvent.MESSAGE, msMessage);
            con.removeEventListener(ChannelFaultEvent.FAULT, consumerFaultHandler);
            con.removeEventListener(MessageFaultEvent.FAULT, consumerFaultHandler);
            pro.removeEventListener(ChannelFaultEvent.FAULT, producerFaultHandler);
            pro.removeEventListener(MessageFaultEvent.FAULT, producerFaultHandler);
            
            /*
             * If we are here because of a problem disconnect the consumer an fail the test 
             * otherwise add an event listener to handler the disconnect event so that we 
             * can test to see if we were able to disconnect ok.             
             */
            if (e.type == TestTaskEvent.FAILED) {
                con.unsubscribe();
                con.disconnect();
                pro.disconnect();
                Assert.fail(e.message.faultString + ": " + e.message.faultDetail);     
            } else {
                MXUnitManager.getInstance().currentTest.chain(con,[ChannelEvent.DISCONNECT],channelDisconnect);                
                //disconnect the consumer
                con.unsubscribe();
                con.disconnect();
                pro.disconnect();      
            }                                          
        }        
        /**
        *  Listen for disconnect events. Because we used addAsync, the handler will get called by MXUnit instead of 
        *  getting called directly by the producer.   
        */
        public function channelDisconnect(event:ChannelEvent):void {  
            //assert that the consumer is no longer subscribed or connected
            Assert.assertTrue("Consumer shouldn't be subscribed", con.subscribed != true);
            Assert.assertTrue("Consumer shouldn't be connected", con.connected != true);
        }
       /**
        *  Listen for events from the producer.    
        */
        public function producerFaultHandler(event:Event):void 
        {
            var error:ErrorMessage = new ErrorMessage;
            if (event is ChannelFaultEvent) {                
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                error.faultCode = "MessagingTest.Producer.ChannelFault";
                error.faultString = "ChannelFaultEvent on Producer during messaging test";
                error.faultDetail = cfe.faultDetail;
                error.rootCause = cfe as Object;                     
            } else if (event is MessageFaultEvent) {
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                error.faultCode = "MessagingTest.Producer.MessageFault";
                error.faultString = "MessageFaultEvent on Producer during messaging test";
                error.faultDetail = mfe.faultDetail;
                error.rootCause = mfe as Object;                
            }
            t.taskFailed(error); 
        }
        /**
        *  Listen for events from the consumer. 
        */
        public function consumerFaultHandler(event:Event):void
        {
            var error:ErrorMessage = new ErrorMessage;
            if (event is ChannelFaultEvent) {                
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                error.faultCode = "MessagingTest.Consumer.ChannelFault";
                error.faultString = "ChannelFaultEvent on Consumer during messaging test";
                error.faultDetail = cfe.faultDetail;
                error.rootCause = cfe as Object;                     
            } else if (event is MessageFaultEvent) {
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                error.faultCode = "MessagingTest.Consumer.MessageFault";
                error.faultString = "MessageFaultEvent on Consumer during messaging test";
                error.faultDetail = mfe.faultDetail;
                error.rootCause = mfe as Object;                
            }
            t.taskFailed(error); 
        }
       
    ]]>
    </mx:Script>       
</mx:Application>