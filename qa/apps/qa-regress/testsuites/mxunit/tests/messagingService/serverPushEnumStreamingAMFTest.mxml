<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">           
    
    <mx:Script>
    <![CDATA[
    	import mx.events.PropertyChangeEvent;
    	import mx.messaging.Producer;
        import mx.rpc.events.ResultEvent;
        import mx.rpc.events.InvokeEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.remoting.RemoteObject;
        import qa.utils.TestTask;
        import qa.utils.TestTaskEvent;
        import mx.messaging.channels.AMFChannel;
        import mx.messaging.Consumer;   
        import mx.messaging.ChannelSet;
        import mx.messaging.Channel;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.config.*;
        import mx.messaging.events.*;
 
        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////                          
        
        /**
        *  Array to hold names of channels that will be tested
        */       
        public var channelNames:Array;
        
        /**
        * Consumer instance used in the test 
        */
        public var con:Consumer; 
         
        /**
        *  Name of test that is currently being executed. 
        */
        private var currentTest:String; 
        
        /**
        *  Name of the destination to be used by the Producer and the Consumer. 
        */
        private var destination:String = "MyTopic_ENUM_StreamingAMF";          
        
        /**
         *  Allows handlers to be removed, queued, etc. across async response handling.
         */
        public static var handler:Function;           
        
        /**
        *  Index used to point to channel in the channelNames array for the currently executing test. 
        */
        public var index:int = 0; 
        
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;
        
        /**
        *  RemoteObject used to initiate server push message from server to client 
        */  
        
        public var serverPush:RemoteObject = new RemoteObject("ServerPush");  
        
        /**
        *  Array of test names. Test name will be based on the channel 
        */  
        
        public var testNames:Array = new Array();        
        
        
                
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests using the list of 
        *  channels available for the destination. This will cause the generic test method
        *  simpleMessageTest that is defined below to get run once per channel. 
        */
        public function setUp():void {    
            
           //get the list of channel names for the destination from ServerConfig 
           channelNames = (ServerConfig.getChannelSet(destination) as ChannelSet).channelIds;           
                                            
           //create a new generic object to add test functions to
           var testObj:Object = new Object();  
                                           
           /*
            * Loop over the channel names and create a new test function for each channel. 
            * Even though the test function will have a new name it just points to our generic 
            * test function which will need to keep track of which test is being run. 
            */
           for (var i:int = 0; i < channelNames.length; i++) {               
               var channel:Channel = ServerConfig.getChannel(channelNames[i]);               
               var testName:String = "test_" + channel.id;               
               testObj[testName] = simpleMessageTest;                    
               testNames.push(testName);                                 
            }                                      
            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                              
            //MXUnitManager.delay = 6000; //think this should be manager.delay= or manager.addDelay()                                    
           
            //Call addTests giving it the object that contains all our test functions and an array of test names
            MXUnitManager.addTests(testObj,testNames, 20000);                        
        }
      
        /**
		* This test tests that a message intitiated on the server (server push) can be received by a consumer
		* that is subscribed to the destination. The test causes the server push to happen by invoking a remote
		* object. This test get looped over for all channels available on the destination used in the test.     
		*/
        public function simpleMessageTest():void {                               
            
            //setup the consumer
            con= new Consumer(); 
            con.destination = destination;
                                                   
            serverPush.addEventListener(FaultEvent.FAULT, remotingEventHandler); 
            serverPush.addEventListener(ResultEvent.RESULT, remotingEventHandler); 
         
            /*
             * Use the chain method to setup event handlers for the consumer and push an addAsync method onto the stack. Receiving a 
             * message fault a channel fault or a message event will cause the addAsync method to be removed from the stack.
             */
            manager.currentTest.chain(con,[MessageFaultEvent.FAULT,ChannelFaultEvent.FAULT,MessageEvent.MESSAGE],consumerEventHandler);
                        
			//listen for property change events on the consumer
			con.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, consumerPropertyChange);          
                        
            //increment the counter to point to the next test
            var pointer:uint = index++; 
            
            //create a new channel using the next channel name in the list and add it to a new channelset
            var channelName:String = channelNames[pointer]; 
            currentTest = channelName;
            var channel:Channel = ServerConfig.getChannel(channelName, false);		
 			var cs:ChannelSet = new ChannelSet(); 			
			cs.addChannel(channel);
			
			//set the consumer to use the new channel set then subscribe the consumer
			con.channelSet = cs; 
            con.subscribe();
            
                                                  
        }
        /**
        *  Listen for property change events on the consumer so we can tell when consumer is subscribed.    
        */
        private function consumerPropertyChange(event:PropertyChangeEvent):void {
            if(event.property == "subscribed" && con.subscribed)
            {
                //test that the subscribe operation was for the channel we are currently testing                 
                Assert.assertTrue("Wrong channel: " + con.channelSet.currentChannel.id, con.channelSet.currentChannel.id == currentTest);                                 
                //send the message
                serverPush.publishEnumMessage(destination);              
            } 
        }
        
        /**
        *  Listen for disconnect events. 
        */
        public function channelDisconnect(event:ChannelEvent):void 
        { 
            //assert that the consumer is no longer subscribed or connected
            Assert.assertTrue("Consumer shouldn't be subscribed", con.subscribed != true);
            Assert.assertTrue("Consumer shouldn't be connected", con.connected != true);
        }
        /**
        *  Listen for events from the producer.    
        */
        public function remotingEventHandler(event:Event):void 
        {            
           if (event is ResultEvent) {
               trace("Got ack back after invoking operation on remote object.");   
            } else if (event is FaultEvent) {
               var fe:FaultEvent = event as FaultEvent;
               trace("Got fault while invoking remote object: " + fe.fault.faultString);                
            } 
        }
        /**
        *  Listen for events from the consumer. 
        */
        public function consumerEventHandler(event:Event):void
        {   
            if (event is ChannelFaultEvent) {
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                Assert.fail("Consumer channel faulted with the following error: " + cfe.faultDetail);     
            } else if (event is MessageFaultEvent) {            
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                Assert.fail("Consumer got the following message fault: " + mfe.faultDetail);                
            } else if (event is MessageEvent) {                     
                var me:MessageEvent = event as MessageEvent;
                //get the message body from the message and store it.
                var result:String = me.message.body.toString();
                //assert we got the correct message for the channel being tested
                Assert.assertEquals("Wrong message: " + result, "A", result);
                manager.currentTest.chain(con,[ChannelEvent.DISCONNECT],channelDisconnect);              
                    
            }
            //disconnect the consumer and producer
            con.unsubscribe();
            con.disconnect();
        }
       
    ]]>
    </mx:Script>           
</mx:Application>