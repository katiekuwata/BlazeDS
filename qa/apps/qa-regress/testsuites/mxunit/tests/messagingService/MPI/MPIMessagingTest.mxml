<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">           
    
    <mx:Script>
    <![CDATA[
        import qa.utils.TestTask;
        import qa.utils.TestTaskEvent;
        import mx.messaging.Producer;
        import mx.messaging.channels.AMFChannel;
        import mx.messaging.Consumer;   
        import mx.messaging.ChannelSet;
        import mx.messaging.Channel;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.config.*;
        import mx.messaging.events.*;
 
        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////                          
        
        /**
        *  Array to hold names of channels that will be tested
        */       
        public var channelNames:Array;
        
        /**
        *  Name of test that is currently being executed. 
        */
        private var currentTest:String; 
        
        /**
        *  Name of the destination to be used by the Producer and the Consumer. 
        */
        private var destination:String = "MyTopicMPI";          
        
        /**
         *  Allows handlers to be removed, queued, etc. across async response handling.
         */
        public static var handler:Function;           
        
        /**
        *  Index used to point to channel in the channelNames array for the currently executing test. 
        */
        public var index:int = 0; 
        
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;
        
        /**
        *  Array of test names. Test name will be based on the channel 
        */  
        
        public var testNames:Array = new Array();                                        
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests using the list of 
        *  channels available for the destination. This will cause the generic test method
        *  simpleMessageTest that is defined below to get run once per channel. 
        */
        public function setUp():void {    
            
           //get the list of channel names for the destination from ServerConfig 
           channelNames = (ServerConfig.getChannelSet(destination) as ChannelSet).channelIds;           
                                            
           //create a new generic object to add test functions to
           var testObj:Object = new Object();  
                                           
           /*
            * Loop over the channel names and create a new test function for each channel. 
            * Even though the test function will have a new name it just points to our generic 
            * test function which will need to keep track of which test is being run. 
            */
           for (var i:int = 0; i < channelNames.length; i++) {               
               var channel:Channel = ServerConfig.getChannel(channelNames[i]);               
               var testName:String = "test_" + channel.id;               
               testObj[testName] = simpleMessageTest;                    
               testNames.push(testName);                                 
            }                                      
            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                              
            MXUnitManager.delay = 6000; //think this should be manager.delay= or manager.addDelay()                                    
            
            //Call addTests giving it the object that contains all our test functions and an array of test names
            MXUnitManager.addTests(testObj,testNames, 20000);                        
        }
      
        /**
        *  This test sends a message over a channel that has record-message-times and record-message-sizes enabled. The 
        *  test sends a message to a messaging destination. The test then verified that the message that comes back 
        *  from the server has valid MessagePerformanceUtils data.
        */
        public function simpleMessageTest():void {  
            
            //setup the producer
            var pro:Producer = new Producer();
            pro.destination = destination;           
            
            //setup the consumer
            var con:Consumer = new Consumer(); 
            con.destination = destination;
            
            /*
             * Use the chain method to setup event handlers for the producer and push an addAsync method onto the stack. Receiving a 
             * message fault a channel fault or an acknowledgement that the server received the message sent by the producer will 
             * remove the addAsync method from the stack. Unless all addAsync methods have been executed the test will time out so 
             * you want to make sure that at least one of the events will get fired. This call is essentially the same as writing 
             * the following code: 
             * var asyncHandler = manager.currentTest.addAsync(producerEventHandler,{"c":con});
             * pro.addEventListener(ChannelFaultEvent.FAULT, asyncHandler);
             * pro.addEventListener(MessageFaultEvent.FAULT, asyncHandler);
             * pro.addEventListener(MessageAckEvent.ACKNOWLEDGE, asyncHandler);   
            */                                        
            manager.currentTest.chain(pro,[MessageFaultEvent.FAULT,ChannelFaultEvent.FAULT,MessageAckEvent.ACKNOWLEDGE],producerEventHandler,{"c":con});
            
            /*
             * Use the chain method to setup event handlers for the consumer and push an addAsync method onto the stack. Receiving a 
             * message fault a channel fault or a message event will cause the addAsync method to be removed from the stack.
             */
            manager.currentTest.chain(con,[MessageFaultEvent.FAULT,ChannelFaultEvent.FAULT,MessageEvent.MESSAGE],consumerEventHandler,{"c":con, "p":pro});
                        
            /*
             * Use the chain function to setup an event handler for the consumer ack event. The message ack event needs it's own addAsync
             * method because it comes back first, as soon as the consumer has subscribed to the destination. Putting it in the same addAsync
             * call with the rest of the consumer events would cause the test to finish as soon as the message ack event was received which 
             * is not what we want to happen. We still need to have the producer send a message and make sure the consumer receives it.  
            */
            handler = manager.currentTest.chain(con,[MessageAckEvent.ACKNOWLEDGE],consumerAck,{"c":con,"p":pro});            
                        
            //increment the counter to point to the next test
            var pointer:uint = index++; 
            
            //create a new channel using the next channel name in the list and add it to a new channelset
            var channelName:String = channelNames[pointer]; 
            currentTest = channelName;
            var channel:Channel = ServerConfig.getChannel(channelName, false);		
 			var cs:ChannelSet = new ChannelSet(); 			
			cs.addChannel(channel);
			
			//set the consumer to use the new channel set then subscribe the consumer
			con.channelSet = cs;             
            con.subscribe();           
            
            var proChannel:Channel = ServerConfig.getChannel("mpi-polling-amf");  
            var proChannelSet:ChannelSet = new ChannelSet(); 
            proChannelSet.addChannel(proChannel);
            pro.channelSet = proChannelSet;                
            
        }
        /**
        *  Listen for consumer ack events so we can tell when the consumer has subscribed. Because we used chain (the same would be true had we used
        *  addAsync) the handler will get called by MXUnit instead of getting called directly by the producer. This allows the handler to have an 
        *  extra parameter that we use to pass along the Consumer instance that was created in our test function.   
        */
        private function consumerAck(event:MessageAckEvent, params:Object):void {
            //make sure the ack is for a subscribe operation
            if((event.correlation is CommandMessage) && (CommandMessage(event.correlation).operation == CommandMessage.SUBSCRIBE_OPERATION))
            {
                //grab the consumer from params object
                var c:Consumer = params.c as Consumer;
                //grab the producer from params object
                var p:Producer = params.p as Producer;
                //test that the subscribe operation was for the channel we are currently testing                 
                Assert.assertTrue("Wrong channel: " + c.channelSet.currentChannel.id, c.channelSet.currentChannel.id == currentTest); 
                /*
                 * Since we are subscribed remove the event listener for consumer ack events. Then create a new event
                 * listener for message events using chain as we did previously. 
                 */        
                c.removeEventListener(MessageAckEvent.ACKNOWLEDGE, handler);                                
                //send the message
                var msg:IMessage = new AsyncMessage();
                msg.body = "hello " + currentTest;
                p.send(msg);              
            } 
        }
        
        /**
        *  Listen for disconnect events. Because we used chain (the same would be true had we used
        *  addAsync), the handler will get called by MXUnit instead of getting called directly by the 
        *  producer. This allows the handler to have an extra parameter that we use to pass along the 
        *  Consumer instance that was created in our test function.   
        */
        public function channelDisconnect(event:ChannelEvent, params:Object):void {
            var c:Consumer = params.c as Consumer;     
            c.removeEventListener(ChannelEvent.DISCONNECT, handler);    
            //manager.currentTest.abortAllAsyncFunctions();
            //assert that the consumer is no longer subscribed or connected
            Assert.assertTrue("Consumer shouldn't be subscribed", c.subscribed != true);
            Assert.assertTrue("Consumer shouldn't be connected", c.connected != true);
        }
        
        public function channelDisconnectOnError(event:ChannelEvent, params:Object):void {
            var error:Error = params.e as Error;                 
            Assert.fail("Error creating MPI object: " + error.getStackTrace()); 
        }
        /**
        *  Listen for events from the producer.    
        */
        public function producerEventHandler(event:Event, params:Object):void 
        {
            var con:Consumer = params.c as Consumer;
            
            if (event is MessageAckEvent) {
                trace("Producer received ack for message");    
            } else if (event is ChannelFaultEvent) {
                con.unsubscribe();
                con.disconnect();
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                Assert.fail("Channel faulted with following error while sending message: " + cfe.faultDetail);     
            } else if (event is MessageFaultEvent) {
                con.unsubscribe();
                con.disconnect();
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                Assert.fail("Message fault while sending message: " + mfe.faultDetail);                
            }
        }
        /**
        *  Listen for events from the consumer. 
        */
        public function consumerEventHandler(event:Event, params:Object = null):void
        {
            //get the consumer from the params object
            var c:Consumer = params.c as Consumer; 
            var p:Producer = params.p as Producer;
            
            if (event is ChannelFaultEvent) {
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                Assert.fail("Consumer channel faulted with the following error: " + cfe.faultDetail);     
            } else if (event is MessageFaultEvent) {            
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                Assert.fail("Consumer got the following message fault: " + mfe.faultDetail);                
            } else if (event is MessageEvent) {                     
                var me:MessageEvent = event as MessageEvent;
                var mpi:MessagePerformanceUtils;
                var error:Error; 
                try {
                    mpi = new MessagePerformanceUtils(me.message);                                
                } catch (e:Error) {
                    error = e;           
                }               
                if (mpi != null) 
                {
                    //get the message body from the message and store it.
                    var result:String = me.message.body.toString();
                    //assert we got the correct message for the channel being tested
                    Assert.assertEquals("Wrong message: " + result, "hello " + currentTest, result);
                    //assert message size from MPI is greater than 0
                    Assert.assertTrue("MPIPerformanceUtils.messageSize should be greater than 0", mpi.responseMessageSize > 0);
                    /*
                     * Since we got the message remove the event listener for message events. Then create a new event
                     * listener for disconnect events using addAsync as we did previously. 
                     */ 
                     c.removeEventListener(MessageEvent.MESSAGE, handler);
                     handler = manager.currentTest.chain(c,[ChannelEvent.DISCONNECT],channelDisconnect, {"c":c});       
                     c.unsubscribe();
                     c.disconnect(); 
                     //p.disconnect();                
                     
                } else if (mpi == null && error != null) 
                {
                    c.removeEventListener(MessageEvent.MESSAGE, handler);
                    handler = manager.currentTest.chain(c,[ChannelEvent.DISCONNECT],channelDisconnectOnError, {"e":error});                                     
                    c.unsubscribe();
                    c.disconnect(); 
                    //p.disconnect();
                }      
                               
                                                                               
            }            
        }
       
    ]]>
    </mx:Script>           
</mx:Application>