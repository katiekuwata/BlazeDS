<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="run()">
    
    <mx:Producer id="pro" destination="MyTopic"/>
    <mx:Consumer id="con" destination ="MyTopic"/>

    <mx:Script>
    <![CDATA[
        import mx.events.PropertyChangeEvent;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.config.*;
        import mx.messaging.events.*;

        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        //////////////////////////////////////////////////////////////////////////// 
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager = MXUnitManager.getInstance();
        
        /**
         *
         */
        private var messageReceived:Boolean = false;     
        
        /**
        *  Timer used to check if any messages were received. 
        */ 
        private var timer:Timer = new Timer(5000,1); 
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method
        //
        ////////////////////////////////////////////////////////////////////////////        
        public function run():void {                    
            manager.addTests(this,["mixedTestNegative"], 10000);
        }
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Tests
        //
        ////////////////////////////////////////////////////////////////////////////     
        /**
         * Tests that a header "prop1" with a string value of "ralph" and a header
         * with a numerica value of 12 doesn't match the selector expression 
         * "prop1 = 'bob' AND prop2 >= 4". The test has the producer send a message 
         * and then after an interval of 3 seconds tests that the consumer didn't 
         * receive the message.  
         */    
        public function mixedTestNegative():void {
            /*
             * Use the chain method to setup event handlers for the producer and push an addAsync method onto the stack. Receiving a 
             * message fault a channel fault or an acknowledgement that the server received the message sent by the producer will 
             * remove the addAsync method from the stack. Unless all addAsync methods have been executed the test will time out so 
             * you want to make sure that at least one of the events will get fired. This call is essentially the same as writing 
             * the following code: 
             * var asyncHandler = manager.currentTest.addAsync(producerEventHandler,{"c":con});
             * pro.addEventListener(ChannelFaultEvent.FAULT, asyncHandler);
             * pro.addEventListener(MessageFaultEvent.FAULT, asyncHandler);
             * pro.addEventListener(MessageAckEvent.ACKNOWLEDGE, asyncHandler);   
            */                                        
            manager.currentTest.chain(pro,[MessageFaultEvent.FAULT,ChannelFaultEvent.FAULT,MessageAckEvent.ACKNOWLEDGE],producerEventHandler);
            
            //add event listeners for consumer events. don't chain these as we don't expect them to get called
            con.addEventListener(MessageFaultEvent.FAULT, consumerEventHandler);
            con.addEventListener(ChannelFaultEvent.FAULT,consumerEventHandler);
            con.addEventListener(MessageEvent.MESSAGE, consumerEventHandler);
            
            manager.currentTest.chain(timer,[TimerEvent.TIMER],timerEventHandler); 
            timer.start();  
            
            /*
             * Setup event listener to listen for property changed events from the Consumer. Use this to tell when the 
             * Consumer has subscribed to the destination.    
             */
            con.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,consumerPropertyChanged);
            
            con.selector="prop1 = 'bob' AND prop2 >= 4";
            con.subscribe();
        }     
        /**
         * Listen for property change events on the consumer to tell when consumer is subscribed  
         */
        private function consumerPropertyChanged(event:PropertyChangeEvent):void {
            if(event.property == "subscribed" && con.subscribed == true)
            {
                var msg:IMessage = new AsyncMessage();
                msg.body = "hello";
                msg.headers["prop1"] = "ralph";
                msg.headers["prop2"] = 12;
                pro.send(msg);
            }             
        }
       /**
        *  Listen for events from the producer.    
        */
        public function producerEventHandler(event:Event):void 
        {   
            if (event is MessageAckEvent) {
                trace("Producer received ack for message");    
            } else if (event is ChannelFaultEvent) {
                con.unsubscribe();
                con.disconnect();
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                Assert.fail("Channel faulted with following error while sending message: " + cfe.faultDetail);     
            } else if (event is MessageFaultEvent) {
                con.unsubscribe();
                con.disconnect();
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                Assert.fail("Message fault while sending message: " + mfe.faultDetail);                
            }
        }
        /**
        *  Listen for events from the consumer. 
        */
        public function consumerEventHandler(event:Event):void
        {   
            if (event is ChannelFaultEvent) {
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                Assert.fail("Consumer channel faulted with the following error: " + cfe.faultDetail);     
            } else if (event is MessageFaultEvent) {            
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                Assert.fail("Consumer got the following message fault: " + mfe.faultDetail);                
            } else if (event is MessageEvent) {                     
                messageReceived = true;                
            }
        }
        /**
        * Use the timer event handler to check if we received a message which we shouldn't have because the message 
        * header doesn't match the selector expression.     
        */  
        private function timerEventHandler(event:TimerEvent):void 
        {
            if (messageReceived == true)
            {
                Assert.fail("Shouldn't have received a message as the message header didn't match the selector expression");    
            } else {
                manager.currentTest.chain(con,[ChannelEvent.DISCONNECT],channelDisconnect);
                con.unsubscribe();
                con.disconnect();   
            }
            
        }
       /**
        *  Listen for disconnect events.    
        */
        public function channelDisconnect(event:ChannelEvent):void {    
            //assert that the consumer is no longer subscribed or connected
            Assert.assertTrue("Consumer shouldn't be subscribed", con.subscribed != true);
            Assert.assertTrue("Consumer shouldn't be connected", con.connected != true);
        }
    ]]>
    </mx:Script>    
</mx:Application>