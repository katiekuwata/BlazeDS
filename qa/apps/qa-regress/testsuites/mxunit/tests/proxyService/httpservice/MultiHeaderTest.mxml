<?xml version="1.0" ?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setup()">
		
	<mx:Script>
	<![CDATA[
	     /*
	     *  Test case for sending and receiving multiple HTTP headers 
	     *  with the same name through proxy (see bug BLZ-82 and BLZ-96).
	     *  Test against channels with legacy-collection true and false 
	     */
	    
	    import mx.collections.ArrayCollection;	
	    import mx.controls.Alert;
	    import mx.messaging.config.ServerConfig;
		import mx.messaging.ChannelSet;
		import mx.messaging.Channel;
		import mx.messaging.messages.HTTPRequestMessage;
	    import mx.rpc.events.InvokeEvent;	    
	    import mx.rpc.events.FaultEvent;
	    import mx.rpc.events.ResultEvent;
	    import mx.rpc.http.HTTPService;	    
	    import qa.mxunit.*;
	    
	    /*
        *  Array to hold names of channels that will be tested
        */       
        private var channelNames:Array;
                
        /*
        *  Name of test that is currently being executed. 
        */
        private var currentTest:String; 
        private var currentChannelSet:ChannelSet;
        
        /*
        *  Name of the destination to be used by the Producer and the Consumer. 
        */
        private var destination:String = "multiheader_dest";   
        
        /*
        *  Index used to point to channel in the channelNames array for the currently executing test. 
        */
        private var index:int = 0; 
                
		/*
        *  Array of test names. Test name will be based on the channel 
        */    
        private var testNames:Array = new Array();   
        
        private var manager:MXUnitManager = MXUnitManager.getInstance();
        private var hs:HTTPService;
        
         /*
         *  Loop over all available channels for each test
         */
    	private	function setup():void {
    	    
    	   var testFunc:Array = ["testHeaders"];
    	   
           channelNames = (ServerConfig.getChannelSet(destination) as ChannelSet).channelIds;
           
           var testObj:Object = new Object();  
           
           for (var i:int = 0; i < channelNames.length; i++) {
              var channel:Channel = ServerConfig.getChannel(channelNames[i]); 
              
              for (var j:int = 0; j< testFunc.length; j++)
              {                  
                   var testName:String = "test_" + channel.id + "_" + testFunc[j];                
                   testObj[testName] = this[testFunc[j]];
                   testNames.push(testName);             
              }
            } 
                    
            MXUnitManager.addTests(testObj,testNames, 5000);      
        }
        
		public function testHeaders():void
		{   		    
		    hs = new HTTPService();
		    hs.destination = "multiheader_dest"
		    // "/qa-regress/remote/MultipleHeadersTest.jsp"   
		    hs.useProxy = true;		    
		    hs.addEventListener(InvokeEvent.INVOKE, handleInvoke);		    
		    
		    // send multiple header with same name in the request header(see bug BLZ-96)
		    hs.headers.type = ["mxml","as"];		
		  
		    manager.currentTest.chain(hs, [ResultEvent.RESULT, FaultEvent.FAULT], testResultHandler);	
		    
		    //increment the counter to point to the next channel
            var pointer:uint = index++; 
            
            //create a new channel using the next channel name in the list and add it to a new channelset
            var channelName:String = channelNames[pointer]; 
            currentTest = channelName;
            var channel:Channel = ServerConfig.getChannel(channelName, false);		
 			currentChannelSet = new ChannelSet(); 			
			currentChannelSet.addChannel(channel);
			
			//use the new channel set 
			hs.channelSet = currentChannelSet; 	
				
		    hs.send();
		}
		
		private function handleInvoke(event:InvokeEvent):void
		{
		    var httpMessage : HTTPRequestMessage = HTTPRequestMessage(event.message);
            httpMessage.recordHeaders = true; 		  
		}
		
		public function testResultHandler(event:Event):void
		{
		    if ( event is ResultEvent)
		    {
		        // for legacy-collection true channels, the header is returned as an Array
		        // for legacy-collection false channels, the header is returned as an ArrayCollection
		        // convert both to an Array
		        var header:Object = ResultEvent(event).message.headers.responseHeaders["type"];
		        if (header is ArrayCollection)
		            header = (header as ArrayCollection).toArray();
		        		        
		        Assert.assertTrue("header shoudn't be null", header != null);
		        Assert.assertTrue("header should be an Array (len=4) instead of " + (header as Array).length, (header as Array).length == 4);		        		        
		        Assert.assertEquals(["mxml","as","jsp","servlet"], header);
		        
		    }
		    else 
		    {
		        Assert.fail("Test failed: " + FaultEvent(event).fault.faultDetail);
		    }
		}
		
	]]>
	</mx:Script>	
</mx:Application>