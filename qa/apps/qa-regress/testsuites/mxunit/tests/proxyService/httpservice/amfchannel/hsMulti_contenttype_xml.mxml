<?xml version="1.0" ?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:qa="http://www.adobe.com/2006/flexqa" creationComplete="run()">
	
	<!-- result format = e4x -->
	 <mx:HTTPMultiService id="hsE4X" useProxy="true"	destination="echoXml_amf" 
        method = "POST" result="onServiceResult_e4x(event)" fault="onServiceFaultE4X(event)" >
	     <mx:HTTPOperation name="main"  argumentNames="foo" contentType="application/xml"  resultFormat="e4x"/>
	 </mx:HTTPMultiService>
   	
	<!-- result format = object -->
	 <mx:HTTPMultiService id="hsObject" useProxy="true" 	destination="echoXml_amf" contentType="application/xml" resultFormat="object"
        makeObjectsBindable="false"  method = "POST" result="onServiceResult_object(event)"  fault="onServiceFaultObject(event)" >
         <mx:HTTPOperation name="main" argumentNames="foo"/>
     </mx:HTTPMultiService>
   
	<!-- result format = xml -->
	<mx:HTTPMultiService id="hsXML" useProxy="true" destination="echoXml_amf" contentType="application/xml" resultFormat="xml"
        method = "POST" result="onServiceResult_xml(event)" fault="onServiceFaultXML(event)" >
         <mx:HTTPOperation name="main" argumentNames="abc"/>
     </mx:HTTPMultiService>
	
	<mx:Script>
	<![CDATA[
	    import mx.controls.Alert;
	    /****************************************************
        *  HttpService contentType test
        * **************************************************/

		import qa.mxunit.*;
		import mx.rpc.events.*;

        public var fault:Object;
        public var resultE4X:Object;
        public var resultObject:Object;
        public var resultXML:Object;

	public var faultE4X:Object;
        public var faultObject:Object;
        public var faultXML:Object;
	
        public var events:Array;

		//request data
		public var toSend : XML = new XML("<basic><string>string</string><integer>123</integer><float>123.123</float><boolean>true</boolean><array>1</array><array>2</array><array>3</array><object><property>value</property></object></basic>");

        //	toSend.ignoreWhite = true;
	    public var toSendXML:XMLDocument = new XMLDocument();
 		
        public function onServiceResult_e4x(event:ResultEvent):void {
            //Alert.show("result e4x: " + event.result);
			 resultE4X = event.result;
		}

    	public function onServiceResult_xml(event:ResultEvent):void {
    	    //Alert.show("result xml: " + event.result);
			 resultXML= event.result;
		}

		public function onServiceResult_object(event:ResultEvent):void {
		    //Alert.show("result object: " + event.result);
			 resultObject = event.result;
		}
		
        public function onServiceFaultE4X(event:FaultEvent):void {
        	faultE4X = event.fault;
        }
	public function onServiceFaultObject(event:FaultEvent):void {
        	faultObject = event.fault;
        }
	public function onServiceFaultXML(event:FaultEvent):void {
        	faultXML = event.fault;
        }

		public function run():void {
       		toSendXML.ignoreWhite = true;
        	toSendXML.parseXML("<basic><string>string</string><integer>123</integer><float>123.123</float><boolean>true</boolean><array>1</array><array>2</array><array>3</array><object><property>value</property></object></basic>");

			hsE4X.main(toSend);
            hsObject.main.send(toSend);
            hsXML.main.send(toSendXML);
            
            MXUnitManager.delay = 6000;
			MXUnitManager.addTests(this,["Test_e4x","Test_object","Test_xml"],10000);			
		}

		//result = e4x
        public function Test_e4x():void {
			if (faultE4X != null)
				Assert.fail(faultE4X.faultString);
			Assert.assertEquals(toSend.toString(), resultE4X.toString());
		}

	   //result = object
	   public function Test_object():void {
	    if (faultObject != null)
				Assert.fail(faultObject.faultString);
            Assert.isTrue(resultObject.basic != null, "first property should be not be null");
			Assert.isTrue(resultObject.basic.string == "string", "result.basic.string should be string");
			Assert.isTrue(resultObject.basic.string is String, "result.basic.string is String = true");
			Assert.isTrue(resultObject.basic.integer == 123, "result.basic.integer should be 123");
			Assert.isTrue(resultObject.basic.integer is int, "result.basic.integer is int = true");
			Assert.isTrue(resultObject.basic.float == 123.123, "result.basic.float should be 123.123");
			Assert.isTrue(resultObject.basic.float is Number, "result.basic.float is Number = true");
			Assert.isTrue(resultObject.basic.boolean == true, "result.basic.boolean should be true");
			Assert.isTrue(resultObject.basic.boolean is Boolean, "result.basic.boolean is Boolean = true");
			Assert.isTrue(resultObject.basic.array.length == 3, "result.basic.array.length should be 3");
			Assert.isTrue(resultObject.basic.array is Array, "result.basic.array is Array = true");
			Assert.isTrue(resultObject.basic.array[0] == 1, "result.basic.array[0] should be 1");
			Assert.isTrue(resultObject.basic.array[1] == 2, "result.basic.array[1] should be 2");
			Assert.isTrue(resultObject.basic.array[2] == 3, "result.basic.array[2] should be 3");
		}
		
		//result = xml
		public function Test_xml():void {
                        if (faultXML != null)
				Assert.fail(faultXML.faultString);
			Assert.assertEquals(toSendXML.toString(), resultXML.toString() );
		}
	]]>
	</mx:Script>
</mx:Application>