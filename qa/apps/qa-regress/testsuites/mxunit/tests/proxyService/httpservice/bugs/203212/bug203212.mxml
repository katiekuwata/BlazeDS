<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" applicationComplete="run()">

    <mx:TextArea id="output" x="95" y="368" width="432" height="293"/>
    
    <mx:HTTPService id="myService" url="http://localhost:81/"  
        resultFormat = "object"
        result="onServiceResult(event)"
		fault="onServiceFault(event)"
		makeObjectsBindable="false" 
		contentType="application/x-www-form-urlencoded"
		method="GET"/>
		
    <mx:Script>
        <![CDATA[
            /****************************************************
            *  HTTPService test for bug 203212
            * **************************************************/
        
            import TestCase203212;
            import mx.utils.ObjectUtil;
            import qa.mxunit.*;
            import mx.rpc.events.*;
            
            public var dynProps:Object = {name:"Adobe"};
            public var testCase203212:TestCase203212 = new TestCase203212(dynProps, "dynamic property");
            public var request:Object;
            public var result:Object;
            public var dynamicProp:String = "";
            
            public function run():void
            {
                dump(testCase203212);
                myService.addEventListener(InvokeEvent.INVOKE, handleInvokeEvent);
                myService.send(testCase203212);
                MXUnitManager.delay = 5000;
                MXUnitManager.addTests(this,["Test_concreteVars", "Test_dynamicVars"],1000);
            }
            private function dump(obj:Object):void
            {
                this.output.text += "-----------------------------------------\n";
                this.output.text += "dump --> " + ObjectUtil.toString(obj) + "\n";
                this.output.text += "-----------------------------------------\n";
            }
            private function handleInvokeEvent(event:InvokeEvent):void
            {
    			// here we can have a look at the actual soap message being created before its sent
    			// check for the values
    			request = event.message.body["lastName"];
    			dynamicProp = event.message.body["anotherProp"];
    			dump("Actual Request " + request);
			}
			private function onServiceFault(event:FaultEvent):void
			{
			    result = event.fault.faultString;
			}
			
			private function onServiceResult(event:ResultEvent):void
			{
			    result = event.result;
			}
    		
    		public function Test_concreteVars():void 
    		{
    		    dump("service result: " + result);
    			Assert.isTrue(request == "Anonymous", "not true");
    		}			
    		
    		public function Test_dynamicVars():void 
    		{
    			Assert.isTrue(dynamicProp == "dynamic property", "not true");
    		}			
        ]]>
    </mx:Script>

    
</mx:Application>
