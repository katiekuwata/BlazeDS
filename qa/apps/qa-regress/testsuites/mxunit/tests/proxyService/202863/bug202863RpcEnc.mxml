<?xml version="1.0" encoding="utf-8"?>
<!--
/*************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="initApp()">
    <mx:TextArea id="output" height="189"   x="109" y="557" width="759"/>
    <mx:TraceTarget level="8"/>
    <mx:Button x="109" y="529" label="Execute" click="ops()"/>
	<mx:ComboBox x="205" y="529" id="cbEngType" dataProvider="{engTypes}" width="83"></mx:ComboBox>
	<mx:ComboBox x="602" y="529" id="cbWsdls" dataProvider="{wsdls}" width="161" change="cbWsdlsChangeHandler(event)"></mx:ComboBox>
    <mx:NumericStepper id="nsSize" x="391" y="529" width="111" stepSize="5" value="1" minimum="1" maximum="200"/>
    <mx:Label x="205" y="503" text="Engineer Type" width="160" toolTip="Either 'QA' or 'DEV'"/>
    <mx:Label x="603" y="503" text="WebService Type/Doc Style" width="160"/>
    <mx:Label x="391" y="503" text="Dataset Result Size" width="185">
        <mx:toolTip><![CDATA[Normally there are x number of rows.  Take that number and * by Query Size to get large payloads - (# of rows * size = totalsize)]]></mx:toolTip>
    </mx:Label>
    <mx:Script>
        <![CDATA[
            import mx.rpc.AbstractService;
            import mx.rpc.AsyncToken;
            import mx.rpc.AbstractOperation;
            import mx.controls.Alert;
            import mx.utils.ObjectUtil;
            import mx.rpc.soap.Operation; 
            import mx.rpc.soap.WebService;
            import qa.mxunit.*;
            import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			
			private var WebServicePointer:AbstractService;
            private var ws:AbstractService;
            private var expectedRecordCount:Object = {count:50};
            private var actualRecordCount:Object = {count:0};
			private var type:String;
			private var faultType:String;	
			private var obj:Object = new Object();
			private var lOperation:AbstractOperation;
            [Bindable]
			private var engTypes:Array = [{label:"QE", data:1},{label:"Dev", data:2}, {label:"All", data:3}];
			[Bindable]
			private var wsdls:Array = [{label:"Doc/Literal", data:"http://flexteam.macromedia.com:8500/webservices/LargePayloadRpc.cfc?wsdl"},{label:"RPC/Encoded", data:"http://flexteam.macromedia.com:8500/webservices/LargePayloadDoc.cfc?wsdl"}]
            private var actualSOAPRequest:XML;
            private var actualSOAPResponse:Object;
			
            private function initApp():void{
                nsSize.data = 1;
                ops()
            }
			public function Test_RPC_RecordCount():void {
	           Assert.isTrue( expectedRecordCount.count == actualRecordCount.count, "count should equal 50");
			}            
            private function getWebService():AbstractService {
                trace(" call getWebService() ");
                output.text += "-> getWebservice()\n";
                var _ws:WebService = new WebService();
                   if (WebServicePointer == null) {
                        _ws.wsdl=cbWsdls.selectedItem.data;
                        _ws.useProxy = true;
                        _ws.loadWSDL();
                        WebServicePointer = _ws;
                        output.text += "-> using wsdl " +_ws.wsdl+ "  \n";
                        trace("-> return web service.\n") ;
                    }else{
                        // reset WebServicePointer = null for re-use
                        WebServicePointer = null;
                        ws = getWebService();
                    }
                return WebServicePointer;
            }
            private function cbWsdlsChangeHandler(event:Event):void {
                output.text = "";
                output.text += "-> cbWsdls Change Event.\n";   
                ws = null;
                lOperation = null;     
            }
            private function onServiceLoad(event:Event):void {
                output.text += "-> Service load.\n";
                MXUnitManager.delay = 6000;
				MXUnitManager.addTests(this,["Test_RPC_RecordCount"],10000);
            }
            private function onServiceFault(event:FaultEvent):void {
                trace("web service fault: " + event.fault.faultString);
                output.text += "-> Service fault: " + event.fault.faultCode + " - " + event.fault.faultString + ".\n";
            }
            private function onFault(event:FaultEvent):void {
                trace("operation fault: " + event.fault.faultString);
                output.text += "-> Operation fault: " + event.fault.faultCode + " - " + event.fault.faultString + ".\n";
            }
            private function onResult(event:ResultEvent):void {
               //trace("result: " + event.result);
               output.text += "-> Result: " + ObjectUtil.toString(event.result.length) + ".\n";
               output.text += "-> Result: " + ObjectUtil.toString(event.result) + ".\n";
               actualRecordCount.count = event.result.length;
            }            
            private function ops():void{
                output.text = "";
                output.text += "-> Exec Operations \n";
                ws = getWebService();
                ws.addEventListener("fault", onServiceFault);
                ws.addEventListener("load", onServiceLoad);
                lOperation = ws.getOperation("getContacts"); 
			    lOperation.arguments.EngineerType = cbEngType.selectedItem.label;
                lOperation.arguments.size = Number(nsSize.data);
                lOperation.addEventListener(ResultEvent.RESULT,onResult);
                lOperation.addEventListener(FaultEvent.FAULT, onFault);
                var lCall:AsyncToken = ws.getContacts();                
            }
        ]]>
    </mx:Script>
</mx:Application>
