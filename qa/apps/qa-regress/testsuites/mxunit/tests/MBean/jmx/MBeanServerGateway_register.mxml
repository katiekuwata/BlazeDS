<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="run()">
<mx:Script source="MBeanFunctions.as" />
<mx:Script>
	<![CDATA[
	    import mx.messaging.management.Attribute;
		import mx.utils.ObjectUtil;
        import mx.rpc.remoting.RemoteObject;

        import mx.messaging.ChannelSet;
        import mx.messaging.channels.AMFChannel;

        import mx.rpc.events.ResultEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.AsyncToken;
        import mx.rpc.IResponder;
        import mx.rpc.Fault;
        import mx.rpc.AsyncResponder;
        import MBeanFunctions;

        import qa.mxunit.MXUnitManager;
        import qa.mxunit.Assert;

        private var runtimeManagement:RemoteObject;
        private var csAMF:ChannelSet;
        public static var handler:Function;  
        private var manager:MXUnitManager;
        private var simpleObjectName:String = "codecoverage:Simple=ASimpleMBean";
        
  /*  
    These tests are for testing the registerMBean and set/get attribute functions of MBeanServerGateway.
    They use Simple.as mapped to qa.management.Simple.java as a simple MBean to test
  */

        private function run():void
        {
        	//configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                                                               
            // flex/management/jmx/MBeanServerGateway.java
        	runtimeManagement = new RemoteObject("RuntimeManagement");
        	// for security-enabled Websphere
        	runtimeManagement.setCredentials("manager","manager1");
        	
        	manager.addTests(this, ["testregisterMBean","testregisterMBeanException","testsetSimpleAttribute","testsetSimpleAttributes","testgetMBeanAttribute","testgetMBeanAttributeException",
                                    "testgetMBeanAttributeExceptionNoBean","testunregisterMBean","testunregisterMBeanException"], 5000);

        //    manager.detectTests(this,5000);
        }
        
        public function testregisterMBean():void
        {        
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],registerMBeanHandler); 
        	var simple:Simple = new Simple();     
            var token:AsyncToken = runtimeManagement.registerMBean(simple,simpleObjectName);
        }
        
        public function registerMBeanHandler(event:Object = null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\ngetObjectInstance result: " + ObjectUtil.toString(event.result) + "\n";
               
               // resetting simpleObjectName because when running on Websphere, cell, node, and process vars are added on to the MBean name 
               // for example: "codecoverage:Simple=ASimpleMBean,cell=DSTANTEN-XP1Node01Cell,node=DSTANTEN-XP1Node01,process=server1";
               simpleObjectName = event.result.objectName.canonicalName;
               Assert.assertEquals(event.result.className,"qa.management.Simple");
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: " + event.fault.faultCode);
            }
        }
        
         public function testregisterMBeanException():void
        {        
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],registerMBeanExceptionHandler); 
        	// The MBean name used here is irrelevant
            var token:AsyncToken = runtimeManagement.registerMBean("HTTPObjectInstance","flex.runtime.BlazeDS QA Regressions Web Application:MessageBroker=irrelevant");
        }
        
        public function registerMBeanExceptionHandler(event:Object = null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\nregisterMBeanException result: " + ObjectUtil.toString(event.result) + "\n";
               Assert.fail("Passing in a string should cause an exception");
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.assertEquals("The MBean class, 'java.lang.String', is not JMX compliant.", event.fault.faultString );
            }
        }
        
        public function testsetSimpleAttribute():void
        {        
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],setSimpleAttributeHandler);     
        	var attr:Attribute = new Attribute();
            attr.name = "SimpleString";
            attr.value = "some value";
            var token:AsyncToken = runtimeManagement.setAttribute(simpleObjectName,attr);
        }                                                          
        
        public function setSimpleAttributeHandler(event:Object = null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\nsetAttribute result: " + ObjectUtil.toString(event.result) + "\n";
              Assert.assertNull(event.result); 
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: " + event.fault.faultCode);
            }
        }
        
         public function testsetSimpleAttributes():void
        {        
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],setSimpleAttributesHandler); 
        	var attribArray:Array = new Array();   
        	var myAttribute:Attribute = new Attribute();
        	myAttribute.name = "SimpleString";
        	myAttribute.value = "some value";  
        	attribArray.push(myAttribute);
            var token:AsyncToken = runtimeManagement.setAttributes(simpleObjectName,attribArray);
        } 
        
        public function setSimpleAttributesHandler(event:Object = null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\nsetAttribute result: " + ObjectUtil.toString(event.result) + "\n";
               Assert.assertEquals("some value", event.result[0].value); 
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: " + event.fault.faultCode);
            }
        }
            
        
        public function testgetMBeanAttribute():void
        {
            handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],getSimpleAttributeHandler);    
            var token:AsyncToken = runtimeManagement.getAttribute(simpleObjectName,"SimpleString"); 
        	// getMBeanAttribute("flex.runtime.BlazeDS QA Regressions Web Application:id=MessageBroker1,type=MessageBroker","AMFThroughput");
        }
        
        public function getSimpleAttributeHandler(event:Object = null):void   
        {
           if (event is ResultEvent)
           {		 
               out.text += "getAttribute result: " + ObjectUtil.toString(event.result) + "\n";
               Assert.assertEquals("some value", event.result );
           }
           else
           {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: " + event.fault.faultCode);
           }
        }
        
        public function testgetMBeanAttributeException():void
        {
            handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],getSimpleAttributeExceptionHandler);    
            var token:AsyncToken = runtimeManagement.getAttribute(simpleObjectName,"SimpleStringYo"); 
        }
        
        public function getSimpleAttributeExceptionHandler(event:Object = null):void   
        {
           if (event is ResultEvent)
           {		 
               out.text += "getAttribute result: " + ObjectUtil.toString(event.result) + "\n";
            //   Assert.assertEquals("some value", event.result );
           }
           else
           {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.assertContains("The attribute, 'SimpleStringYo', was not found in the MBean, 'codecoverage:Simple=ASimpleMBean", event.fault.faultString );
           }
        }
        
        public function testgetMBeanAttributeExceptionNoBean():void
        {
            handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],getSimpleAttributeNoBeanHandler);    
            var token:AsyncToken = runtimeManagement.getAttribute(simpleObjectName + "Yo","SimpleString"); 
        }
        
        public function getSimpleAttributeNoBeanHandler(event:Object = null):void   
        {
           if (event is ResultEvent)
           {		 
               out.text += "getAttribute result: " + ObjectUtil.toString(event.result) + "\n";
            //   Assert.assertEquals("some value", event.result );
           }
           else
           {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.assertEquals("The MBean, '" + simpleObjectName + "Yo', could not be found.", event.fault.faultString );
           }
        }
        
        
        public function testunregisterMBean():void
        {        
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],unregisterMBeanHandler);      
            var token:AsyncToken = runtimeManagement.unregisterMBean(simpleObjectName);
        }
       
        public function unregisterMBeanHandler(event:Object = null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\nunregisterMBean result: " + ObjectUtil.toString(event.result) + "\n";
               Assert.assertNull(event.result);
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: " + event.fault.faultCode);
            }
        }
        
        public function testunregisterMBeanException():void
        {        
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],unregisterExceptionHandler,{"Operation":"unregisterMBean"});      
            var token:AsyncToken = runtimeManagement.unregisterMBean("flex.runtime.BlazeDS QA Regressions Web Application:MessageBroker=MessageBroker1,id=qa-http,type=MessageBroker.HTTPEndpoint.Yo");
        }
        
        public function unregisterExceptionHandler(event:Object = null, params:Object=null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\n" + params.Operation + " result: " + ObjectUtil.toString(event.result) + "\n";
               Assert.fail("test should fail with an exception");
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault.faultString);
         	   Assert.assertEquals("The MBean, 'flex.runtime.BlazeDS QA Regressions Web Application:MessageBroker=MessageBroker1,id=qa-http,type=MessageBroker.HTTPEndpoint.Yo', could not be found.",event.fault.faultString);
            }
       }
        
        
     ]]>
</mx:Script>
<mx:TextArea id="out" width="90%" height="250"/>

</mx:Application>