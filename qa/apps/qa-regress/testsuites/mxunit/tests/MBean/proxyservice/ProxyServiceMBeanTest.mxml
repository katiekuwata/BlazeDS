<?xml version="1.0" ?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setup()" >

<mx:Script>
	<![CDATA[
	    /*
	     *  Test case for HTTPProxyControlMBean
	     */
	     
	    import mx.rpc.Fault;
	    import mx.rpc.AsyncToken;
	    import mx.rpc.remoting.RemoteObject;
	    import mx.collections.ArrayCollection;	
	    import mx.controls.Alert;
	    import mx.rpc.events.FaultEvent;
	    import mx.rpc.events.ResultEvent;
	    import qa.mxunit.*;
	     	     
	     /*
	      *  MXUnitManager instance
	      */
	     private var manager:MXUnitManager = MXUnitManager.getInstance();
	     
	     /*
         *  remoteojbect for resolving MBean ObjectName. 
         */
        private var helper:RemoteObject;
        
        /*
         *  ro for MBeanServerGateway
         */
        private var ro:RemoteObject;
        
        /*
         *   MBean ObjectName
         */
        private var mbeanName:String;
                
        /*
         *   array of MBean attributes
         */
        private var attrList:Array = new Array();
        
        /*
         *  index for attrubite array
         */
        private var idx:Number=0;
        
        /*
         *  array of all tests
         */
        private var testNames:Array = new Array();
        
        private function setup():void
        {
            ro = new RemoteObject("RuntimeManagement");
    	    ro.setCredentials("manager","manager1");
            ro.addEventListener(ResultEvent.RESULT, handleROEvent);
    	    ro.addEventListener(FaultEvent.FAULT, handleROEvent);   
            
            helper = new RemoteObject("MBeanObjectNameResolver");
	        helper.setCredentials("manager","manager1");
    	    helper.addEventListener(ResultEvent.RESULT, handleHelperResult);
    	    helper.addEventListener(FaultEvent.FAULT, handleHelperFault);
    	    var token:AsyncToken = helper.getObjectNameForService("proxy-service");
    	    token.op = "getMBeanName";
        }
        
        private function handleHelperResult(event:ResultEvent):void
        {
            if (event.token.op == "getMBeanName")
            {  
                mbeanName = event.result.toString();
                log("ObjectName=" + mbeanName);  
                var token:AsyncToken = helper.getMBeanAttributeList(mbeanName);
                token.op = "getMBeanAttributeList";
            }
            else if (event.token.op == "getMBeanAttributeList")
            {   
                var testObject:Object = new Object();
                
                // add testIsRunning first
                testObject["testIsRunning"] =  testIsRunning;
                testNames.push("testIsRunning");
                
                // for each attribute, add a separated test as well
                for (var i:Object in event.result)
                {
                    idx++;
                    var attr:String = event.result[i];
                    attrList[idx] = attr;  
                    var  testName:String =  "testAttribute_" + attr;                                  
                    testNames.push(testName);
                    testObject[testName] = testAttribute;
                }  
                    
                MXUnitManager.addTests(testObject, testNames, 10000);
            }
        }
        
        private function handleHelperFault(event:FaultEvent):void
        {
            log("Fault:" + event.fault.faultString);
            if (event.token.op == "getMBeanName")
                Assert.fail("Fail to get MBean Object Name " + event.fault.faultString);
        }
        
        public function testAttribute():void
        {	
            var pointer:uint = idx--;
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.getAttribute(mbeanName, attrList[pointer]);
            token.op = "getAttribute";
            token.attr = attrList[pointer];
        }
        
        /*
         *  testIsRunning
         */
        public function testIsRunning():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.invoke(mbeanName, "isRunning", null, null);
            token.op = "isRunning";            
        }
        
        public function handleROEvent(event:Event):void
        {            
            if (event is ResultEvent)
            {
                var re:ResultEvent = event as ResultEvent
                if(re.token.op == "getAttribute")
                {   
                    var attr:String = re.token.attr;
                    log(attr + "=" + re.result); 
                    switch (attr)
                    {
                        case "Type":
                            Assert.assertTrue("Type should be HTTPProxyService", re.result.toString() == "HTTPProxyService");
                                
                            break;
                        case "Id":
                            Assert.assertTrue("Id should be proxy-service",  re.result.toString() == "proxy-service");
                        break;
                        default:
                            Assert.assertNotNull(re.result);
                    }
                }            
                else if (re.token.op == "isRunning")
                {
                    log("isRunning=" + re.result);
                    Assert.assertTrue("Service should be running", re.result as Boolean);
                }
            }
            else if (event is FaultEvent)
            {
                log("FaultEvent:" + (event as FaultEvent).fault.faultString );
                if ((event as FaultEvent).token.op == "isRunning")
                    Assert.fail("There should be no fault " + (event as FaultEvent).fault.faultString);
                    
            }
        }
        
        private function log(s:String):void
		{
		    ta.text += s + "\n";
		}
        
		]]>
	</mx:Script>	
	
    <mx:TextArea id="ta" width="50%" height="50%" />
</mx:Application>