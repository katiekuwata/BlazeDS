<?xml version="1.0" ?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setup()" >
		
	<mx:Script>
	<![CDATA[
	     
	     /*
	     *  Test case for SOAPProxyDestination
	     */
	    
	    import mx.rpc.Fault;
	    import mx.rpc.AsyncToken;
	    import mx.rpc.remoting.RemoteObject;
	    import mx.collections.ArrayCollection;
	    import mx.rpc.events.InvokeEvent;	    
	    import mx.rpc.events.FaultEvent;
	    import mx.rpc.events.ResultEvent;
	    import mx.rpc.soap.WebService;	    
	    import qa.mxunit.*;
	    
	     /*
         *  ro for MBeanServerGateway
         */
        private var ro:RemoteObject;
        
        /*
         *  remoteojbect for resolving MBean ObjectName. 
         */
        private var helper:RemoteObject;
        
        /*
         *   MBean ObjectName
         */
        private var mbeanName:String;
                
        /*
        *  Name of the destination  
        */
        private var destination:String = "qa.EchoService";   
                
		private var manager:MXUnitManager = MXUnitManager.getInstance();
        
        private function setup():void
        {
            ro = new RemoteObject("RuntimeManagement");
    	    ro.setCredentials("manager","manager1");
            
            helper = new RemoteObject("MBeanObjectNameResolver");
	    helper.setCredentials("manager","manager1");
    	    helper.addEventListener(ResultEvent.RESULT, handleHelperResult);
    	    helper.addEventListener(FaultEvent.FAULT, handleHelperFault);
    	    var token:AsyncToken = helper.getObjectNameForDestination("proxy-service", destination);
    	    token.op = "getMBeanName";
        }
        
        private function handleHelperResult(event:ResultEvent):void
        {
            if (event.token.op == "getMBeanName")
            {  
                mbeanName = event.result.toString();
                log("ObjectName=" + mbeanName);
                manager.addTests(this, ["testResetCount", "testInvokeSOAPFrequencyBefore", "testSOAPCount", "testLastInvokeSOAPTimestamp", "testInvokeSOAPFrequencyAfter"], 10000);
            }
        }
        
        private function handleHelperFault(event:FaultEvent):void
        {
            log("GetMBeanName Fault:" + event.fault.faultDetail);
            Assert.fail("Fail to get MBean Object Name");
        }
        
         /*
         *  reset the count
         */
        public function testResetCount():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.invoke(mbeanName, "resetInvokeSOAPCount", null, null);
            token.op = "resetInvokeSOAPCount";
        }
        
        public function testSOAPCount():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            runSOAPTest();
        }
        
        public function testLastInvokeSOAPTimestamp():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.getAttribute(mbeanName, "LastInvokeSOAPTimestamp");
            token.op = "getLastInvokeSOAPTimestamp";
        }
        
        public function testInvokeSOAPFrequencyBefore():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.getAttribute(mbeanName, "InvokeSOAPFrequency");
            token.op = "getInvokeSOAPFrequencyBefore";
        }
        
        public function testInvokeSOAPFrequencyAfter():void
        {
            manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
            var token:AsyncToken = ro.getAttribute(mbeanName, "InvokeSOAPFrequency");
            token.op = "getInvokeSOAPFrequencyAfter";
        }
                
        /*
         *   get the InvokeSOAPCount
         */
        private function getCount(op:String):void
        {
            var token:AsyncToken = ro.getAttribute(mbeanName, "InvokeSOAPCount");
            token.op = op;
        }    
                
        public function handleROEvent(e:Event):void
        {            
            if (e is ResultEvent)
            {
                var event:ResultEvent = e as ResultEvent;    
                    
                switch (event.token.op)
                {
                    case "getInvokeSOAPCount":
                        var count:Number = Number(event.result);
                        log("count=" + count);
                        Assert.assertTrue("There should be  1 SOAP invocation!", count==1);
                        break;
                        
                    case "countAfterReset":
                        var rc:Number = Number(event.result);
                        log("countAfterReset=" + rc);
                        Assert.assertTrue("count should be reset to zero", rc==0);
                    break;
                    
                    case "resetInvokeSOAPCount":
                        log("count reset");
                        manager.currentTest.chain(ro, [ResultEvent.RESULT, FaultEvent.FAULT], handleROEvent);
                        getCount("countAfterReset");   
                    break;
                    
                    case "getInvokeSOAPFrequencyBefore":
                        var freqBefore:Number = event.result as Number;
                        log("InvokeSOAPFrequencyBefore=" + freqBefore);
                        Assert.assertTrue("InvokeSOAPFrequencyBefore should equal to zero", freqBefore==0);
                    break;
                    
                    case "getInvokeSOAPFrequencyAfter":
                        var freqAfter:Number = event.result as Number;
                        log("InvokeSOAPFrequencyAfter=" + freqAfter);
                        Assert.assertTrue("InvokeSOAPFrequencyAfter should be greater than zero", freqAfter>0);
                    break;
                    
                    case "getLastInvokeSOAPTimestamp":
                        var d:Date = event.result as Date;
                        log("LastInvokeSOAPTimestamp=" + d);
                        Assert.assertTrue("LastInvokeSOAPTimestamp should be today", d.getDate() == new Date().getDate());
                    break;
                }          
            }
            else if (e is FaultEvent)
            {
                var fe:FaultEvent = e as FaultEvent;
                log("FaultEvent:" + fe.fault.faultString ); 
                Assert.fail("There should be no fault" );
            }
        }
                
         /*
         *  run the soap test
         */
    	private	function runSOAPTest():void {
    	    var ws:WebService = new WebService();
    	    ws.destination = destination;
    	    ws.loadWSDL();
    	    ws.addEventListener(ResultEvent.RESULT, soapTestEventHandler);
    	    ws.addEventListener(FaultEvent.FAULT, soapTestEventHandler);
    	    ws.echoInteger(109);              
        }
        
		public function soapTestEventHandler(event:Event):void
		{
		    // if result/fault events come back, count again
		    log("get SOAP event" + event.type);
		    getCount("getInvokeSOAPCount");
		}
		
		private function log(s:String):void
		{
		    ta.text += s + "\n";
		}		
		
	]]>
	</mx:Script>	
	
	<mx:TextArea id="ta" width="50%" height="50%" />
</mx:Application>