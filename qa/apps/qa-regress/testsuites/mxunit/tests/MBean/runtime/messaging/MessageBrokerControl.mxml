<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="run()">
<mx:Script>
	<![CDATA[
		import mx.utils.ObjectUtil;
        import mx.rpc.remoting.RemoteObject;

        import mx.messaging.ChannelSet;
        import mx.messaging.channels.AMFChannel;

        import mx.rpc.events.ResultEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.AsyncToken;
        import mx.rpc.IResponder;
        import mx.rpc.Fault;
        import mx.rpc.AsyncResponder;

        import qa.mxunit.MXUnitManager;
        import qa.mxunit.Assert;
        
        private var runtimeManagement:RemoteObject;
        private var nameResolver:RemoteObject;
        private var csAMF:ChannelSet;
        public static var handler:Function;  
        private var manager:MXUnitManager;
        private var MBeanObjectName:String;
        private var clientIds:Array;
        
        
        private function run():void
        {
        	//configure the MXUnitManager           
            manager = MXUnitManager.getInstance();  
            
            runtimeManagement = new RemoteObject("RuntimeManagement");
            // for security-enabled Websphere
        	runtimeManagement.setCredentials("manager","manager1");
        	nameResolver = new RemoteObject("MBeanObjectNameResolver");
	    	nameResolver.setCredentials("manager","manager1");
    	    nameResolver.addEventListener(ResultEvent.RESULT, nameResolverHandler);
    	    nameResolver.addEventListener(FaultEvent.FAULT, nameResolverHandler); 
    	    var token:AsyncToken = nameResolver.getObjectNameForMessageBroker();                                                           
        }
        
        public function nameResolverHandler(event:Object = null):void {
            if (event is ResultEvent)
            {	
               out.text += "\nnameResolver result: " + ObjectUtil.toString(event.result) + "\n";
               MBeanObjectName = event.result ;  
            //   MBeanObjectName = "flex.runtime.BlazeDS QA Regressions Web Application:id=MessageBroker1,type=MessageBroker";
   
               manager.addTests(this,["getId","getType","getServices","getEndpoints","getStartTimestamp","getFlexSessionCount","getMaxFlexSessionsInCurrentHour",
                                      "getEnterpriseConnectionCount","getEnterpriseThroughput","isRunning"],4000);
               //"getAMFThroughput", "getHTTPThroughput","getStreamingAMFThroughput","getStreamingHTTPThroughput"
            }
            else
            {     
         	   out.text += "NameResolver failed" + ObjectUtil.toString(event.fault);  
            }
        }
        
      //   this is useful for seeing the exposed attributes and operations
      /*   public function getInfo():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"getInfo","expected":"qa-polling-constraint-amf"});      
            var token:AsyncToken = runtimeManagement.getMBeanInfo(MBeanObjectName);
        }
        
      */  
        // get Attributes
        
        public function getId():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"getId","expected":"MessageBroker1"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "Id");
        }
        
        public function getType():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"getType","expected":"MessageBroker"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "Type");
        }
        
        public function getServices():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"Services"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "Services");
            token.check = "length";
        }
 
        public function getEndpoints():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"Endpoints"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "Endpoints");
            token.check = "length";
        }
        
        public function getStartTimestamp():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],timestampHandler,{"metric":"StartTimestamp"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "StartTimestamp");
            token.check = "timestamp";
        }
        
        public function getFlexSessionCount():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"FlexSessionCount"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "FlexSessionCount");
            token.check = "positive";
        }
        
        public function getMaxFlexSessionsInCurrentHour():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"MaxFlexSessionsInCurrentHour"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "MaxFlexSessionsInCurrentHour");
            token.check = "positive";
        }
        
      // bug  http://bugs.adobe.com/jira/browse/LCDS-331
        
        public function getEnterpriseConnectionCount():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"EnterpriseConnectionCount"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "EnterpriseConnectionCount");
            token.check = "positive";
        }
       
        // including this here only for code coverage
        public function getEnterpriseThroughput():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"EnterpriseThroughput"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "EnterpriseThroughput");
            token.check = "positive";
        }
        
        /* Including commented out throughtput tests here for reference.  But I've included them under each runtime.messaging.endpoint subdirectory where it 
        // makes more sense to test them after a message using each endpoint is sent
        */
        /*
        
        public function getAMFThroughput():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"AMFThroughput"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "AMFThroughput");
            token.check = "positive";
        }
        
        public function getHTTPThroughput():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"HTTPThroughput"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "HTTPThroughput");
            token.check = "positive";
        }
        
        public function getStreamingAMFThroughput():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"StreamingAMFThroughput"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "StreamingAMFThroughput");
            token.check = "positive";
        }
        
        public function getStreamingHTTPThroughput():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"StreamingHTTPThroughput"});      
            var token:AsyncToken = runtimeManagement.getAttribute(MBeanObjectName, "StreamingHTTPThroughput");
            token.check = "positive";
        }
        */
        // invoke operations
        
        public function isRunning():void
        {
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],invokeOperationHandler,{"metric":"isRunning","expected":true});      
            var token:AsyncToken = runtimeManagement.invoke(MBeanObjectName, "isRunning", null, null);
        }
        
        // event handlers  /////////////////////////////////
         
        public function invokeOperationHandler(event:Object = null, params:Object = null):void   
        {
           if (event is ResultEvent)
           {
              out.text += params.metric + " result: " + ObjectUtil.toString(event.result) + "\n";
              if (event.token.check == "positive")
              {
                 Assert.assertTrue(event.result >= 0);    
              }
              else if (event.token.check == "length")
              {
                  clientIds = event.result;
                  Assert.assertTrue(event.result.length > 0 );
              }
              else
              {	
                 Assert.assertEquals(params.expected, event.result);
              }
           }
           else
           {
         	  out.text += ObjectUtil.toString(event.fault);
              Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: "
            		+ event.fault.faultCode);
           }
        }
        
        public function timestampHandler(event:Object = null, params:Object = null):void   
        {
           if (event is ResultEvent)
           {	
              out.text += params.metric + " result: " + event.result + "\n";
              var d:Date = event.result;
              Assert.assertTrue("StartTimestamp should be today", d.getDate() == new Date().getDate() );
           }
           else
           {
         	  out.text += ObjectUtil.toString(event.fault);
              Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: "
            		+ event.fault.faultCode);
            }
        } 
       
    ]]>
</mx:Script>
<mx:TextArea id="out" width="90%" height="250"/>

</mx:Application>