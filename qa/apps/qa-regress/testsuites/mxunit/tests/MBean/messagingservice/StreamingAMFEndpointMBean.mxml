<?xml version="1.0"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">           
    
    <mx:Script>
    <![CDATA[
        import mx.rpc.Fault;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.rpc.remoting.Operation;
        import mx.rpc.remoting.RemoteObject;
        import qa.utils.TestTask;
        import qa.utils.TestTaskEvent;
        import mx.messaging.Producer;
        import mx.messaging.channels.AMFChannel;
        import mx.messaging.Consumer;   
        import mx.messaging.ChannelSet;
        import mx.messaging.Channel;
        import qa.mxunit.Assert;
        import qa.mxunit.MXUnitManager;
        import mx.messaging.messages.*;
        import mx.messaging.config.*;
        import mx.messaging.events.*;
 
        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////                          
        
        /**
        *  Array to hold names of channels that will be tested
        */       
        public var channelNames:Array;
        
        /**
        *  Name of test that is currently being executed. 
        */
        private var currentTest:String; 
        
        /**
        *  Name of the destination to be used by the Producer and the Consumer. 
        */
        private var destination:String = "MyTopic_MBean";          
        
        /**
         *  Allows handlers to be removed, queued, etc. across async response handling.
         */
        public static var handler:Function;           
        
        /**
        *  Index used to point to channel in the channelNames array for the currently executing test. 
        */
        public var index:int = 0; 
        
        /**
        *  Variable to hold singleton instance of the MXUnitManager.  
        */
        private var manager:MXUnitManager;
        
        /**
        * RemoteObject that lets us talk to the MBean Server.  
        */
        private var runtimeManagement:RemoteObject = new RemoteObject("RuntimeManagement");                                       
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        * Configure the MXUnitManager
        */
        public function setUp():void {                            
                                                           
            //configure the MXUnitManager           
            manager = MXUnitManager.getInstance();                                                               
            
            //Call addTests giving it the object that contains all our test functions and an array of test names
            manager.addTests(this,["streamingAMFMBeanTest"], 10000);                        
        }
        ////////////////////////////////////////////////////////////////////////////
        //
        // Tests
        //
        ////////////////////////////////////////////////////////////////////////////      
        /**
        * MXUnit test method. Subscribes to a destination over Streaming AMF Channel and sets up 
        * event handlers for consumer events using MXUnit.chain(). The test subscribes to a destination 
        * over the streaming channel so when we check the MBean the StreamingClientsCount should be 1 or 
        * greater. 
        */
        public function streamingAMFMBeanTest():void {  
            
            var consumer:Consumer = new Consumer(); 
            consumer.destination = destination;
            
            var channelSet:ChannelSet = new ChannelSet(); 
            var channel:Channel = ServerConfig.getChannel("qa-streaming-amf");  
            channelSet.addChannel(channel);
            consumer.channelSet = channelSet;
            
            handler = manager.currentTest.chain(consumer, [ChannelFaultEvent.FAULT, MessageFaultEvent.FAULT, MessageAckEvent.ACKNOWLEDGE],consumerEventHandler,{"c":consumer});
            consumer.setCredentials("manager","manager1"); 
            consumer.subscribe();                       
        }
        /**
         * Handle events from the RemoteObject. If we receive a FaultEvent fail the test. If we 
         * receive a ResultEvent look for the attributes we requested and then test that they 
         * have the expected values.   
        */
        public function remoteManagementHandler(event:Event, params:Object):void {
            var c:Consumer = params.c as Consumer;
            if (event is FaultEvent) {
                var fe:FaultEvent = event as FaultEvent;
                Assert.fail("RemotingService faulted: " + fe.fault.faultString); 
            } else if (event is ResultEvent) {
                var re:ResultEvent = event as ResultEvent;
                var maxStreamingClients:int = 0; 
                var streamingClientsCount:int = 0;
                                
                var result:Array = re.result as Array; 
                for (var i:int = 0; i < result.length; i++) {
                    if (result[i].name == "MaxStreamingClients") {
                        maxStreamingClients = result[i].value;    
                    } else if (result[i].name == "StreamingClientsCount") {
                        streamingClientsCount = result[i].value;
                    }
                }    
                Assert.assertTrue("MaxStreamingClients should be set to 10", maxStreamingClients == 10);
                Assert.assertTrue("StreamingClientsCount should be > 0", streamingClientsCount > 0);
            }
            //cleanup. unsubscribe and disconnect from the consumer
            c.unsubscribe();
            c.disconnect();       
        }
        /**
         * Handle events from the Consumer. If we get a ChannelFaultEvent or MessageFaultEvent we 
         * fail the test. If we get a MessageAckEvent and it is a subscribe operation (consumer is 
         * subscribed) we call the MBean Server gateway to get information about the endpoint.  
        */
        public function consumerEventHandler(event:Event, params:Object):void {
            if (event is ChannelFaultEvent) {
                var cfe:ChannelFaultEvent = event as ChannelFaultEvent;                        
                Assert.fail("Channel faulted with the following error: " + cfe.faultDetail);    
            } else if (event is MessageFaultEvent) {
                var mfe:MessageFaultEvent = event as MessageFaultEvent;
                Assert.fail("Got the following message fault: " + mfe.faultDetail);
            } else if (event is MessageAckEvent) {
                var mae:MessageAckEvent = event as MessageAckEvent;
                if((mae.correlation is CommandMessage) && (CommandMessage(mae.correlation).operation == CommandMessage.SUBSCRIBE_OPERATION))
                {
                    //grab the consumer from params object
                    var c:Consumer = params.c as Consumer;
                    //use the MXUnit.chain method to listen for a ResultEvent or FaultEvent from the remote object.
                    handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],remoteManagementHandler,{"c":c});
                    /*
                     * Call the MBean Server Gateway. The getAttributes method takes a String identifying the object you want to get attributes 
                     * for and the name of the attributes you want to get values for. The easiest way currently to get the object name for the MBean is 
                     * to run the flex-admin app and use the Generic Administration View to drill down and find the object that you want. This view has 
                     * a name field that is what you want to use here.  
                     */
                    runtimeManagement.getAttributes("flex.runtime.BlazeDS QA Regressions Web Application:MessageBroker=MessageBroker1,id=qa-streaming-amf,type=MessageBroker.StreamingAMFEndpoint",["MaxStreamingClients","StreamingClientsCount"]);              
                }
            }
        }
        
       
    ]]>
    </mx:Script>           
</mx:Application>