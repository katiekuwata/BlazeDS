<?xml version="1.0" encoding="iso-8859-1"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:qa="http://www.adobe.com/2006/flexqa" width="800" height="500" creationComplete="runTests()">

<!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
        result="verifyResult(event.result)"
        fault="reportFailure(event.fault.faultString)">
        <mx:method name="getObjectClassName" />
        <mx:method name="echoObject" />
     </mx:RemoteObject>


    <mx:Script>
        <![CDATA[
        import qa.mxunit.*;

        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.utils.ObjectUtil;
        import mx.collections.*;
        import mx.rpc.events.*;


        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;


        private var expected:TestTypedObject;
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        *  Create custom type objects for testing. The difference between the CustomTypeTest is 
        *  that this class is more complex. It contains collection and map and another type object
        */        
        private function runTests():void
        {
            expected = new TestTypedObject();
            expected.prop1 = 3;
            expected.theCollection = ['a',3,new Date(),new TestTypedObject(), new Book()];
            expected.prop2 = "It is prop2";
            expected.me = expected;
            expected.map = new Object();
            expected.map.boston = "here";
            expected.map.me = expected;
            expected.extra = "hey";

            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));

            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));


            MXUnitManager.detectTests(this,20000);
        }
        /**
        *    Test Custom type object through amf Channel
        **/
        public function testEchoAMF():void
        {
            ro.channelSet = amfChannel;
            ro.echoObject(expected);
            Assert.hasPendingTest = true;
        }
        /**
        *    Test Custom type object through http Channel
        **/
        public function testEchoHTTP():void
        {
            ro.channelSet = httpChannel;
            ro.echoObject(expected);
            Assert.hasPendingTest = true;
        }

        private function verifyResult(r:Object):void
        {
            var classInfo:Object = mx.utils.ObjectUtil.getClassInfo(r);
            Assert.assertEquals("Verify classname",classInfo.name ,"TestTypedObject");
            Assert.assertEquals("prop1",r.prop1,3);
            Assert.assertEquals("prop2",r.prop2,"It is prop2");
            Assert.assertTrue("property me refers to itself", r.me == r);
            Assert.assertTrue("property map.me reference to the object",r.map.me == r);
            Assert.assertTrue("Should be instance of Book", r.theCollection[4] is Book);
            Assert.hasPendingTest = false;
        }

        private function reportFailure(s:String):void
        {
            Assert.fail(s);
            Assert.hasPendingTest = false;
        }

        ]]>
    </mx:Script>

</mx:Application>