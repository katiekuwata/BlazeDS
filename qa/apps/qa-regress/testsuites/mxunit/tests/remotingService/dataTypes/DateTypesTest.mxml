<?xml version="1.0"?>

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
            result="testHandler(event,false)" fault="testHandler(event,true)"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;

        private var expectedValue:Date = new Date(1997,6,1);
        private var now:Date = new Date();
        private var expectedArray:Array = [expectedValue,null,now];
        
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        */        
        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));

            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));
        
            MXUnitManager.detectTests(this,20000);

            //MXUnitManager.addTests(this,["testArrayCollectionEchoBooleanClassesAMF"],10000);
        }
        
        /**
        *    Test Java Date through amf channel
        **/
        public function testEchoDateAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDate(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test Java Calendar through amf channel
        **/
        public function testEchoCalendarAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoCalendar(expectedValue);
            call.expected = expectedValue;
        }
        
         /**
        *    Test Java Date with null through amf channel
        **/
        public function testEchoDateNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDate(null);
            call.expected = null;
        }

         /**
        *    Test Java Date[] through amf channel
        **/
        public function testEchoDatesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDates(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Java Date[] with some nulls in the array through amf channel
        **/
        public function testEchoDatesNullsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDates([now,null,expectedValue]);
            call.expected = [now,null,expectedValue];
        }

        /**
        *    Test Java Date in  ArrayList   through amf channel
        **/
        public function testEchoArrayListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Java Date in  ArrayList   through amf channel, passing as actionscript arraycollection
        *    expected result : Array of Dates
        **/
        public function testArrayCollectionEchoArrayListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = expectedArray;
        }
        
        /**
        *    Test Java Date in  ArrayList   through amf channel, passing as actionscript arraycollection
        *    expected result : ArrayCollection of Dates
        **/
        public function testArrayCollectionEchoArrayListAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }
        
        /**
        *    Test Java Date in  ArrayList   through amf channel
        *    expected result: Array of Dates
        **/
        public function testEchoVectorAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Java Date in  HashSet   through amf channel
        *    expected result: Array of Dates
        **/
        public function testEchoHashSetAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoHashSet([now]);
            call.expected = [now];
        }
        
        /**
        *    Test Java Date in  LinkedList   through amf channel
        *    expected result: Array of Dates
        **/
        public function testEchoLinkedListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }


        //http
        /**
        *    Test Date through http channel
        **/
        public function testEchoDateHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDate(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test Date with null value through http channel
        **/
        public function testEchoDateNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDate(null);
            call.expected = null;
        }

        /**
        *    Test Date[] through http channel
        **/
        public function testEchoDatesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDates(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Date[] with some nulls in array through http channel
        **/
        public function testEchoDatesNullsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDates([now,null,expectedValue]);
            call.expected = [now,null,expectedValue];
        }
        
        /**
        *    Test Dates in ArrayList through http channel
        **/
        public function testEchoArrayListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Dates in ArrayList through http channel sending as arraycollection
        **/
        public function testArrayCollectionEchoArrayListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = expectedArray;
        }
        
        /**
        *    Test Dates in ArrayList through http channel sending as arraycollection
        **/
        public function testArrayCollectionEchoArrayListHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }
        
        /**
        *    Test Dates in Vector through http channel sending as arraycollection
        **/
        public function testEchoVectorHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test Dates in HashSet through http channel sending as arraycollection
        **/
        public function testEchoHashSetHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoHashSet([now]);
            call.expected = [now];
        }
        
        /**
        *    Test Dates in LinkedList through http channel sending as arraycollection
        **/
        public function testEchoLinkedListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }

  
        private function testHandler(e:Object, fromFault:Boolean):void
        {
            if (e.token.expectFault)
            {
                Assert.currentTest.doPass(e.fault.faultString);
            }
            else if (fromFault)
            {
                Assert.currentTest.doFail(e.fault.faultString);
            }
            else
            {
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>