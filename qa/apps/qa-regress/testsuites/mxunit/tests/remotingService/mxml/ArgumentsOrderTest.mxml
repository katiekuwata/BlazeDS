<?xml version="1.0"?>

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="MXUnitManager.detectTests(this,3000)">
    <mx:RemoteObject destination="qa.remoting.Test" id="amfRemote" fault="faultHandler(event)">
        <mx:method name="testArgsOrder" result="argsOrderHandler(event)">
            <mx:arguments>
                <param1>1</param1>
                <param2>2</param2>
                <param3>3</param3>
                <param4>4</param4>
                <param5>5</param5>
                <param6>6</param6>
                <param7>4</param7>
            </mx:arguments>
        </mx:method>
        <mx:method name="testMixNumbers" result="mixNumbersHandler(event)">
            <mx:arguments>
                <param1>1</param1>
                <param2>2</param2>
                <param3>3</param3>
                <param4>4</param4>
                <param5>5</param5>
            </mx:arguments>
        </mx:method>
    </mx:RemoteObject>

    <mx:Script>
    <![CDATA[
    import qa.mxunit.*;
    import mx.rpc.events.*;
    public function testArgsOrdering1():void
    {
        var call:Object = amfRemote.testArgsOrder.send();
        call.expected = 4;
        Assert.hasPendingTest = true;
    }

    public function testArgsOrdering2():void
    {
        var call:Object = amfRemote.testArgsOrder(1,2,3,4,5,6,4);
        call.expected = 4;
        Assert.hasPendingTest = true;
    }

    public function testMixNumber1():void
    {
        var call:Object = amfRemote.testMixNumbers.send();
        Assert.hasPendingTest = true;
    }

    public function testMixNumber2():void
    {
        var call:Object = amfRemote.testMixNumbers(1,2,3,4,5);
        Assert.hasPendingTest = true;
    }


    private function argsOrderHandler(e:ResultEvent):void
    {
        Assert.assertEquals(e.token.expected.toString(),e.result.toString());
        Assert.hasPendingTest = false;
    }

    private function mixNumbersHandler(e:ResultEvent):void
    {
        Assert.assertTrue(true);
        Assert.hasPendingTest = false;
    }


    private function faultHandler(e:FaultEvent):void
    {
        Assert.fail(e.fault.faultString);
        Assert.hasPendingTest = false;
    }

    ]]>
    </mx:Script>
</mx:Application>