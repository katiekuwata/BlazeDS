<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="startup()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->
    <!-- Destination Definition -->
    <!-- this is not a good configuration, the exclude-methods block has no meaning -->
    <!--    
    <destination id="qa.secured.nestedConstraints.echoservice.Echo" parent="service">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
            <scope>application</scope>
            <include-methods>
            	<method name="echoShort"/>
            	<method name="echoInt"/>
            	<method name="echoIntClass"/>
            	<method name="echoLong" security-constraint="sample-managers"/>            	
            </include-methods>
            <exclude-methods>
	            <method name="echoString" />
            </exclude-methods>
        </properties>
        <security>
            <security-constraint ref="sample-users"/>
        </security>
    </destination>
    -->

    <mx:RemoteObject id="ro" destination="qa.secured.nestedConstraints.echoservice.Echo"
        result="event.token.resultHandler(event)" fault="event.token.faultHandler(event)"/>
    <mx:Script>
        <![CDATA[
            
            import qa.mxunit.*;
            import mx.rpc.events.*;
            import mx.rpc.AsyncToken;

            private function startup():void
            {
                //these tests have order dependency, please don't change
                var tests:Array = new Array();
                tests.push("testMethodIn");
                tests.push("testMethodNotIn");
                tests.push("testMethodNotInAndEx");
                tests.push("testMethodInDiffSecurityConstraint");
                //comment out since there is application exception which prevent the app continue to run
                //tests.push("testLoginAsDifferentUserWithoutLogout");
                tests.push("testPreviousUnAuthorizationNotDestroyAuthenticatedUser");
                tests.push("testLogoutAuthenticatedUser");
                tests.push("testMethodInAfterLogoutWithMethodCredsOnly");
                tests.push("testMethodInAfterLogoutWithBothRolesCreds");
                MXUnitManager.addTests(this, tests, 10000);
                ro.setCredentials("sampleuser", "samplepassword");   
            }
            /**
            * Test included method in a secured destination
            **/
            public function testMethodIn():void
            {
                var expected:uint = 2;
                var token:AsyncToken = ro.echoShort(expected);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectResultHandler);
                token.expected = expected;
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            /**
            * Test not included method in a secured destination
            **/
            public function testMethodNotIn():void
            {
                var token:AsyncToken = ro.echoShortClass(2);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Server.ResourceUnavailable";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            /**
            * Test not included method and explicitly excluded in a secured destination
            **/
            public function testMethodNotInAndEx():void
            {
                var token:AsyncToken = ro.echoString("2");
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Server.ResourceUnavailable";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            /**
            * Test  included method but have different security constraint
            **/
            public function testMethodInDiffSecurityConstraint():void
            {
                var token:AsyncToken = ro.echoLong(2);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Client.Authorization";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            
            /**
            * Test  login withou previously logout
            **/
            public function testLoginAsDifferentUserWithoutLogout():void
            {
                var token:AsyncToken = ro.echoLong(2);
                ro.setCredentials("samplemanager", "samplepassword");
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Client.Authorization";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            
            /**
            * Test bad login doesn't affect the previous login 
            **/
            public function testPreviousUnAuthorizationNotDestroyAuthenticatedUser():void
            {
                var expected:uint = 2;
                var token:AsyncToken = ro.echoIntClass(expected);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectResultHandler);
                token.expected = expected;
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            
            /**
            *    Test logout
            **/
            public function testLogoutAuthenticatedUser():void
            {
                var expected:uint = 2;
                ro.logout();
                var timer:Timer = new Timer(2000, 1);
                timer.start();
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(logoutHandler);
                timer.addEventListener(TimerEvent.TIMER, handler);
            }
            
            //Dedicated Handlers for particular tests (one-to-one)
            private function logoutHandler(event: Event):void
            {
                var token:AsyncToken = ro.echoIntClass(2);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(afterLogoutInvokeMethodHasConstraintHandler);
                token.resultHandler = handler;
                token.faultHandler = handler;     
            }
            
            private function afterLogoutInvokeMethodHasConstraintHandler(event: Object): void
            {
                if (event is FaultEvent)
                {
                    Assert.assertEquals( "Client.Authentication", event.fault.faultCode);
                }
                else
                {
                    Assert.fail("Should not have result. Security enforced");
                }    
            }
            
            /**
            *    Test included method in different security constraint with required credentials
            **/
            public function testMethodInAfterLogoutWithMethodCredsOnly():void
            {
                ro.setCredentials("samplemanageronly","samplepassword");
                var token:AsyncToken = ro.echoLong(2);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Client.Authentication";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            
            /**
            *    Test included method with a credentials meeting both security constraints
            **/
            public function testMethodInAfterLogoutWithBothRolesCreds():void
            {
                ro.setCredentials("samplemanager","samplepassword");
                var token:AsyncToken = ro.echoLong(2);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectResultHandler);
                token.expected = 2;
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            
            
            //General Result and Fault Handlers (many-to-one)
            
            private function expectResultHandler(event: Object):void
            {
                if (event is FaultEvent)
                {
                    Assert.fail(event.fault.faultString);
                }
                else
                {
                    Assert.assertEquals( event.token.expected, event.result);
                }
            }
            
            private function expectFaultHandler(event: Object):void
            {
                if (event is FaultEvent)
                {
                    //Seth advise not checking faultCode at this time.
                    //
                    //just test that you got a fault in your security-constraint tests. 
                    //there are lots of problems with these codes and they may need to change when authentication/authorization is fixed. 
                    //Probably best not to make these tests directly dependent on that.
                    //Assert.assertEquals( event.token.expected, event.fault.faultCode);
                }
                else
                {
                    Assert.fail("Should not have result. Security enforced");
                }
            }
            
            
        ]]>
    </mx:Script>
</mx:Application>