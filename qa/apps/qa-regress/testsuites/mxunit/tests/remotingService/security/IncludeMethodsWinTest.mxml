<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="startup()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->
    <!-- Destination Definition - exclude is ignored -->
    <!--
    <destination id="qa.secured.includeWin.echoservice.Echo">
        <properties>
            <source>dev.echoservice.Echo</source>
            <include-methods>
	            <method name="echoShort"></method>
	            <method name="echoInt" security-constraint="sample-users-basic"></method>
	            <method name="echoIntClass" security-constraint="sample-users"></method>
	            <method name="echoLong" security-constraint="sample-managers"></method>                 
            </include-methods>
            <exclude-methods>
	            <method name="echoShort"></method>
	            <method name="echoInt"></method>
	            <method name="echoString"></method>
            </exclude-methods>
        </properties>
    </destination>
    -->

    <mx:RemoteObject id="ro" destination="qa.secured.includeWin.echoservice.Echo"
        result="event.token.resultHandler(event)" fault="event.token.faultHandler(event)"/>
    <mx:Script>
        <![CDATA[
            
            import qa.mxunit.*;
            import mx.rpc.events.*;
            import mx.rpc.AsyncToken;

            private function startup():void
            {
                //these tests have order dependency, please don't change
                var tests:Array = new Array();
                tests.push("testMethodIn");
                tests.push("testMethodNotIn");
                tests.push("testMethodRequiredAuthenticationFault");
                tests.push("testMethodRequiredAuthWithBadCredentials");
                tests.push("testMethodRequiredAuthWithCredentials");
                tests.push("testMethodInDiffSecurityConstraint");
                //comment out since there is application exception which prevent the app continue to run
                //tests.push("testLoginAsDifferentUserWithoutLogout");
                tests.push("testPreviousUnAuthorizationNotDestroyAuthenticatedUser");
                tests.push("testLogoutAuthenticatedUser");
                tests.push("testMethodInAfterLogout");
                MXUnitManager.addTests(this, tests, 10000);   
            }
            
            /**
            * test included method with no security constraint, should allow
            **/
            public function testMethodIn():void
            {
                var expected:uint = 2;
                var token:AsyncToken = ro.echoShort(expected);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectResultHandler);
                token.expected = expected;
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            
             /**
            * test not included method with no security constraint, should get Server.ResourceUnavailable
            **/
            public function testMethodNotIn():void
            {
                var token:AsyncToken = ro.echoString("2");
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Server.ResourceUnavailable";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            
            /**
            * test not included method with  security constraint, should get Client.Authentication fault
            **/
            public function testMethodRequiredAuthenticationFault():void
            {
                var token:AsyncToken = ro.echoIntClass(2);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Client.Authentication";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            /**
            * test not included method with  security constraint with bad credentials
            **/
            public function testMethodRequiredAuthWithBadCredentials():void
            {
                var expected:uint = 2;
                ro.setCredentials("baduser", "badpassword");
                var token:AsyncToken = ro.echoIntClass(expected);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Channel.Authentication.Error";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
             /**
            * test not included method with  security constraint with good credentials
            **/
            public function testMethodRequiredAuthWithCredentials():void
            {
                var expected:uint = 2;
                ro.setCredentials("sampleuser", "samplepassword");
                var token:AsyncToken = ro.echoIntClass(expected);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectResultHandler);
                token.expected = expected;
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            /**
            * test not included method with different security constraint from login user
            **/
            public function testMethodInDiffSecurityConstraint():void
            {
                var token:AsyncToken = ro.echoLong(2);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Client.Authorization";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            
            /**
            * test login before previous user logout
            **/
            public function testLoginAsDifferentUserWithoutLogout():void
            {
                var token:AsyncToken = ro.echoLong(2);
                ro.setCredentials("samplemanager", "samplepassword");
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectFaultHandler);
                token.expected = "Client.Authorization";
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            /**
            * test bad login doesn't invalidate previous login
            **/
            public function testPreviousUnAuthorizationNotDestroyAuthenticatedUser():void
            {
                var expected:uint = 2;
                var token:AsyncToken = ro.echoIntClass(expected);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectResultHandler);
                token.expected = expected;
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            /**
            * test logout
            **/
            public function testLogoutAuthenticatedUser():void
            {
                var expected:uint = 2;
                ro.logout();
                var timer:Timer = new Timer(2000, 1);
                timer.start();
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(logoutHandler);
                timer.addEventListener(TimerEvent.TIMER, handler);
            }
            
            //Dedicated Handlers for particular tests (one-to-one)
            private function logoutHandler(event: Event):void
            {
                var token:AsyncToken = ro.echoIntClass(2);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(afterLogoutInvokeMethodHasConstraintHandler);
                token.resultHandler = handler;
                token.faultHandler = handler;     
            }
            
            private function afterLogoutInvokeMethodHasConstraintHandler(event: Object): void
            {
                if (event is FaultEvent)
                {
                    Assert.assertEquals( "Client.Authentication", event.fault.faultCode);
                }
                else
                {
                    Assert.fail("Should not have result. Security enforced");
                }    
            }
            /**
            * test invoke a method after logout
            **/
            public function testMethodInAfterLogout():void
            {
                var expected:uint = 2;
                var token:AsyncToken = ro.echoShort(expected);
                Assert.assertNotNull("Unable to invoke remoteobject call", token);
                var handler:Function = MXUnitManager.getInstance().currentTest.addAsync(expectResultHandler);
                token.expected = expected;
                token.resultHandler = handler;
                token.faultHandler = handler;
            }
            
            
            
            //General Result and Fault Handlers (many-to-one)
            
            private function expectResultHandler(event: Object):void
            {
                if (event is FaultEvent)
                {
                    Assert.fail(event.fault.faultString);
                }
                else
                {
                    Assert.assertEquals(event.result, event.token.expected);
                }
            }
            
            private function expectFaultHandler(event: Object):void
            {
                if (event is FaultEvent)
                {
                    //Seth advise not checking faultCode at this time.
                    //
                    //just test that you got a fault in your security-constraint tests. 
                    //there are lots of problems with these codes and they may need to change when authentication/authorization is fixed. 
                    //Probably best not to make these tests directly dependent on that.
                    //Assert.assertEquals( event.token.expected, event.fault.faultCode);
                }
                else
                {
                    Assert.fail("Should not have result. Security enforced");
                }
            }
            
            
        ]]>
    </mx:Script>
</mx:Application>