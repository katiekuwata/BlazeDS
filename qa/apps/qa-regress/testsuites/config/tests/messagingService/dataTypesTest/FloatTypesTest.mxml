<?xml version="1.0"?>

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
            result="testHandler(event,false)" fault="testHandler(event,true)"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


        private var amfChannel:ChannelSet;
        private var httpChannel:ChannelSet;
       
        private var amfChannelac:ChannelSet;
        private var httpChannelac:ChannelSet;
       

        private var expectedValue:Number = 3;
        private var expectedArray:Array = [-3,0,3];

        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));
            

            MXUnitManager.detectTests(this,20000);

            //MXUnitManager.addTests(this,["testArrayCollectionEchoFloatClassesAMF"],10000);
        }
        
        /**
        *    Test float through amf channel
        **/
        public function testEchoFloatAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoFloat(expectedValue);
            call.expected = expectedValue;
        }
        /**
        *    Test float through http channel
        **/
        public function testEchoFloatHttp():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoFloat(expectedValue);
            call.expected = expectedValue;
        }
        

        //float class
        /**
        *    Test java Float through amf channel
        **/
        public function testEchoFloatClassAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoFloatClass(expectedValue);
            call.expected = expectedValue;
        }
        /**
        *    Test java Float through http channel
        **/
        public function testEchoFloatClassHttp():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoFloatClass(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test java Float through amf channel
        **/
        public function testEchoFloatClassNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoFloatClass(null);
            call.expected = null;
        }
        /**
        *    Test java Float with null value through http channel
        **/
        public function testEchoFloatClassNullHttp():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoFloatClass(null);
            call.expected = null;
        }
        
        //float[]
        /**
        *    Test java float[] through amf channel
        **/
        public function testEchoFloatsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoFloats(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test java float[] through rtmp channel
        **/
        public function testEchoFloatsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoFloats(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test java float[] through amf channel
        **/
        public function testEchoFloatsAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoFloats(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test java float[] through http channel
        **/
        public function testEchoFloatsHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoFloats(expectedArray);
            call.expected = expectedArray;

        }
      
        /**
        *    Test java float[] with [] through amf channel
        **/
        public function testEchoFloatsEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoFloats([]);
            call.expected = [];

        }
        /**
        *    Test java float[] with [] through http channel
        **/
        public function testEchoFloatsEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoFloats([]);
            call.expected = [];

        }
        /**
        *    Test java float[] with [] through amf channel
        **/
       public function testEchoFloatsEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoFloats([]);
            call.expected = [];

        }
        /**
        *    Test java float[] with [] through http channel
        **/
        public function testEchoFloatsEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoFloats([]);
            call.expected = [];

        }
      
        //float[] -paremter null
        /**
        *    Test java float[] with null through amf channel
        **/
        public function testEchoFloatsNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoFloats(null);
            call.expected = null;

        }
        /**
        *    Test java float[] with null through http channel
        **/
        public function testEchoFloatsNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoFloats(null);
            call.expected = null;

        }
        /**
        *    Test java float[] with null through amf channel
        **/
        public function testEchoFloatsNullAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoFloats(null);
            call.expected = null;

        }
        /**
        *    Test java float[] with null through http channel
        **/
        public function testEchoFloatsNullHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoFloats(null);
            call.expected = null;

        }
 
        //Float[]
        /**
        *    Test java Float[]  through amf channel
        **/
        public function testEchoFloatClassesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoFloatClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test java Float[]  through http channel
        **/
        public function testEchoFloatClassesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoFloatClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test java Float[]  through amf channel
        **/
         public function testEchoFloatClassesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoFloatClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test java Float[]  through http channel
        **/
        public function testEchoFloatClassesHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoFloatClasses(expectedArray);
            call.expected = expectedArray;

        }

 
        //Float Classes - [null,null,3,99,null]
        /**
        *    Test java Float[] with some nulls  through amf channel
        *     [null,null,3,99,null]
        **/
        public function testEchoFloatClassesNullsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoFloatClasses([null,null,3,99,null]);
            call.expected = [null,null,3,99,null];

        }
        /**
        *    Test java Float[] with some nulls  through http channel
        *     [null,null,3,99,null]
        **/
        public function testEchoFloatClassesNullsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoFloatClasses([null,null,3,99,null]);
            call.expected = [null,null,3,99,null];

        }
        /**
        *    Test java Float[] with some nulls  through amf channel
        *     [null,null,3,99,null]
        **/
       
       public function testEchoFloatClassesNullsAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoFloatClasses([null,null,3,99,null]);
            call.expected = [null,null,3,99,null];

        }
        /**
        *    Test java Float[] with some nulls  through http channel
        *     [null,null,3,99,null]
        **/
        public function testEchoFloatClassesNullsHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoFloatClasses([null,null,3,99,null]);
            call.expected = [null,null,3,99,null];

        }
       

       
        private function testHandler(e:Object, fromFault:Boolean):void
        {
            if (e.token.expectFault != null)
            {
                Assert.currentTest.doPass(e.fault.faultString);
            }
            else if (fromFault)
            {
                Assert.currentTest.doFail(e.fault.faultString);
            }
            else
            {
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>