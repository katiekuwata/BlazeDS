<?xml version="1.0"?>
<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
            result="testHandler(event,false)" fault="testHandler(event,true)"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
    	import qa.Utils;
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


        private var amfChannel:ChannelSet;
        private var httpChannel:ChannelSet;
       
        private var amfChannelac:ChannelSet;
        private var httpChannelac:ChannelSet;
       
		/*
			long (in Java): The long data type is a 64-bit signed two's complement integer. 
			It has a minimum value of -9,223,372,036,854,775,808 and a maximum value of 9,223,372,036,854,775,807 (inclusive). 
			Use this data type when you need a range of values wider than those provided by int.
		*/
		private static var MAX_LONG_AS_STRING:String = "9223372036854775807";
        private var expectedValue:String = MAX_LONG_AS_STRING + MAX_LONG_AS_STRING;
        private var expectedArray:Array = [expectedValue,null,expectedValue];

        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));

            MXUnitManager.detectTests(this,100000);

            //MXUnitManager.addTests(this,["testArrayCollectionEchoBooleanClassesAMF"],10000);
        }
        
        /**
        *  Test BigInteger using amf channel
        **/
        public function testEchoBigIntegerAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigInteger(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *  Test BigInteger with nusing amf channel
        **/
        public function testEchoNegativeBigIntegerAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigInteger("-" + expectedValue);
            call.expected = "-" + expectedValue;
        }
        
        /**
        *  Test BigInteger with null value using amf channel
        **/
        public function testEchoBigIntegerNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigInteger(null);
            call.expected = null;
        }

        /**
        *  Test BigInteger[] using amf channel
        **/
        public function testEchoBigIntegersAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigIntegers(expectedArray);
            call.expected = expectedArray;
        }

        
        //http
        /**
        *  Test BigInteger using http channel
        **/
        public function testEchoBigIntegerHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.EchoBigInteger(expectedValue);
            call.expected = expectedValue;
        }
        
         /**
        *  Test BigInteger with null value using http channel
        **/
        public function testEchoBigIntegerNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.EchoBigInteger(null);
            call.expected = null;
        }

         /**
        *  Test BigInteger[] using http channel
        **/
        public function testEchoBigIntegersHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.EchoBigIntegers(expectedArray);
            call.expected = expectedArray;
        }



        private function testHandler(e:Object, fromFault:Boolean):void
        {
            if (e.token.expectFault)
            {
                Assert.currentTest.doPass(e.fault.faultString);
            }
            else if (fromFault)
            {
                Assert.currentTest.doFail(e.fault.faultString);
            }
            else
            {
            	trace("class type returned: " + Utils.getClassName(e.result));
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>