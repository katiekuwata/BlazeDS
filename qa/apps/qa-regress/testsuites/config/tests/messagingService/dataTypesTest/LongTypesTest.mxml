<?xml version="1.0"?>
<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
            result="testHandler(event,false)" fault="testHandler(event,true)"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
    
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


         ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;

        private var expectedValue:Number = uint.MAX_VALUE;
        private var expectedArray:Array = [int.MIN_VALUE,0,-9007199254740992, 9007199254740992];
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        */
        private function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));

            MXUnitManager.detectTests(this,20000);
        
            //MXUnitManager.addTests(this,["testEchoLongsAMF", "testEchoLongsHTTP"],10000);
        }
        /**
        *    Test java long through amf channel with uint.MAX_Value
        **/
        public function testEchoLongAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLong(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test java long through amf channel with negative uint.MAX_Value
        **/
        public function testEchoNegLongAMF():void
        {
            ro.channelSet = amfChannel;
            //-expectedValue is actionScript Number
            var call:Object = ro.echoLong(-expectedValue);
            call.expected = -expectedValue;
        }
        /**
        *    Test java long through http channel with int.MAX_VALUE
        **/
        public function testEchoLongHttp():void
        {
            ro.channelSet = httpChannel;
            //http  channel bug - failed with uint.MAX_Value
            var call:Object = ro.echoLong(int.MAX_VALUE);
            call.expected = int.MAX_VALUE;
        }

        //int class
        /**
        *    Test java Long through amf channel with uint.MAX_Value
        **/
        public function testEchoLongClassAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLongClass(expectedValue);
            call.expected = expectedValue;
        }
        /**
        *    Test java Long through http channel with int.MAX_VALUE
        **/
        public function testEchoLongClassHttp():void
        {
            ro.channelSet = httpChannel;
            //http  channel bug - failed with uint.MAX_Value
            var call:Object = ro.echoLongClass(int.MAX_VALUE);
            call.expected = int.MAX_VALUE;
        }

        //int class with null as parameter
        /**
        *    Test java Long through amf channel with null
        **/
        public function testEchoLongClassNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLongClass(null);
            call.expected = null;
        }
        /**
        *    Test java Long through http channel with null
        **/
        public function testEchoLongClassNullHttp():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLongClass(null);
            call.expected = null;
        }

        /**
        *    Test sending and receiving an java long[] through amf channel
        **/
        public function testEchoLongsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLongs(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving an java long[] through http channel
        **/
        public function testEchoLongsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLongs(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving an java long[] through amf channel
        **/
        public function testEchoLongsAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoLongs(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving an java long[] through http channel
        **/
        public function testEchoLongsHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoLongs(expectedArray);
            call.expected = expectedArray;

        }

       /**
        *    Test sending and receiving an java long[] through amf channel with no element
        **/
        public function testEchoLongsEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLongs([]);
            call.expected = [];

        }
        /**
        *    Test sending and receiving an java long[] through http channel with no element
        **/
        public function testEchoLongsEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLongs([]);
            call.expected = [];

        }
        /**
        *    Test sending and receiving an java long[] through amf channel with no element
        **/
        public function testEchoLongsEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoLongs([]);
            call.expected = [];

        }
        /**
        *    Test sending and receiving an java long[] through http channel with no element
        **/
        public function testEchoLongsEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoLongs([]);
            call.expected = [];

        }

        //int[] -paremter null
        /**
        *    Test sending and receiving an java long[] through amf channel with null
        **/
        public function testEchoLongsNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLongs(null);
            call.expected = null;

        }
        /**
        *    Test sending and receiving an java long[] through http channel with null
        **/
        public function testEchoLongsNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLongs(null);
            call.expected = null;

        }
        /**
        *    Test sending and receiving an java long[] through amf channel with null
        **/
        public function testEchoLongsNullAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoLongs(null);
            call.expected = null;

        }
        /**
        *    Test sending and receiving an java long[] through amf channel with null
        **/
        public function testEchoLongsNullHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoLongs(null);
            call.expected = null;

        }

        //Long[]
        /**
        *    Test sending and receiving an java Long[] through amf channel
        **/
        public function testEchoLongClassesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLongClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving an java Long[] through http channel
        **/
        public function testEchoLongClassesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLongClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving an java Long[] through amf channel
        **/
        public function testEchoLongClassesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoLongClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving an java Long[] through http channel
        **/
        public function testEchoLongClassesHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoLongClasses(expectedArray);
            call.expected = expectedArray;

        }

       

        //Long[] - using []
        /**
        *    Test sending and receiving an java Long[] through amf channel with no element
        **/
        public function testEchoLongClassesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLongClasses([]);
            call.expected = [];

        }
        /**
        *    Test sending and receiving an java Long[] through http channel with no element
        **/
        public function testEchoLongClassesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLongClasses([]);
            call.expected = [];

        }
        /**
        *    Test sending and receiving an java Long[] through amf channel with no element
        **/
        public function testEchoLongClassesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoLongClasses([]);
            call.expected = [];

        }
        /**
        *    Test sending and receiving an java Long[] through http channel with no element
        **/
        public function testEchoLongClassesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoLongClasses([]);
            call.expected = [];

        }

        //Long[] - using ArrayCollection()
        /**
        *    Test sending and receiving an java Long[] through amf channel with empty arraycollection
        **/
        public function testACEchoLongClassesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLongClasses(new ArrayCollection([]));
            call.expected = [];

        }
        /**
        *    Test sending and receiving an java Long[] through http channel with empty arraycollection
        **/
        public function testACEchoLongClassesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLongClasses(new ArrayCollection([]));
            call.expected = [];

        }
        /**
        *    Test sending and receiving an java Long[] through amf channel with empty arraycollection
        **/
        public function testACEchoLongClassesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoLongClasses(new ArrayCollection([]));
            call.expected = [];

        }
        /**
        *    Test sending and receiving an java Long[] through http channel with empty arraycollection
        **/
        public function testACEchoLongClassesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoLongClasses(new ArrayCollection([]));
            call.expected = [];

        }

        //Long Classes - [null,null,3,999,null]
        /**
        *    Test sending and receiving an java Long[] through amf channel with some nulls
        **/
        public function testEchoLongClassesNullsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLongClasses([null,null,3,999,null]);
            call.expected = [null,null,3,999,null];

        }
        /**
        *    Test sending and receiving an java Long[] through http channel with some nulls
        **/
        public function testEchoLongClassesNullsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLongClasses([null,null,3,999,null]);
            call.expected = [null,null,3,999,null];

        }
        /**
        *    Test sending and receiving an java Long[] through amf channel with some nulls
        **/
        public function testEchoLongClassesNullsAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoLongClasses([null,null,3,999,null]);
            call.expected = [null,null,3,999,null];

        }
        /**
        *    Test sending and receiving an java Long[] through http channel with some nulls
        **/
        public function testEchoLongClassesNullsHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoLongClasses([null,null,3,999,null]);
            call.expected = [null,null,3,999,null];

        }




        private function testHandler(e:Object, fromFault:Boolean):void
        {
            if (e.token.expectFault)
            {
                Assert.currentTest.doPass(e.fault.faultString);
            }
            else if (fromFault)
            {
                Assert.currentTest.doFail(e.fault.faultString);
            }
            else
            {
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>