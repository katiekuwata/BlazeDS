<?xml version="1.0"?>
<service class="flex.messaging.services.RemotingService" id="remoting-service">

    <adapters>
        <adapter-definition class="flex.messaging.services.remoting.adapters.JavaAdapter" default="true" id="java-object"></adapter-definition>
    </adapters>

    

<default-channels>
        <channel ref="qa-amf"></channel>
        <channel ref="qa-http"></channel>        
        <channel ref="qa-amf-ac"></channel>
        <channel ref="qa-http-ac"></channel>        
        <channel ref="qa-secure-amf"></channel>
    </default-channels>
<destination channels="qa-amf" id="HSqlAssemblerTestHelper">
        <properties>
            <source>db.hsql.Helper</source>
        </properties>
    </destination>
<destination channels="qa-amf" id="HSqlAssemblerTestHelperN">
        <properties>
            <source>db.hsql.HelperN</source>
        </properties>
    </destination>
<destination channels="qa-amf" id="amfConnectionTestService">
        <properties>
            <source>remoting.amfclient.AMFConnectionTestService</source>
        </properties>
    </destination>
<destination channels="qa-amf" id="RuntimeManagement">
        <properties>
            <source>flex.management.jmx.MBeanServerGateway</source>
        </properties>
        <!-- uncomment when on Websphere with administrative security enabled 
             should call setCrendentials("manager","manager1")   -->
        <!--
        <security>
            <security-constraint ref="console"/>
        </security>
        -->
    </destination>
<destination id="qa.remoting.InheritTest">
        <properties>
            <source>dev.remoting.inherit.ChildClass</source>
        </properties>
    </destination>
<destination channels="qa-amf" id="qa.amf.remoting.InheritTest">
        <properties>
            <source>dev.remoting.inherit.ChildClass</source>
        </properties>
    </destination>
<destination channels="qa-http" id="qa.http.remoting.InheritTest">
        <properties>
            <source>dev.remoting.inherit.ChildClass</source>
        </properties>
    </destination>
<destination id="codecoverage.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
            <network>
                <cluster ref="default-tcp-cluster"></cluster>
            </network>            
        </properties>
        
    </destination>
<destination id="qa.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
        </properties>
    </destination>
<destination id="dev.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
        </properties>
    </destination>
<destination channels="qa-amf" id="qa.amf.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
        </properties>
    </destination>
<destination channels="qa-http" id="qa.http.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
        </properties>
    </destination>
<destination id="qa.echoservice.Echo2">
        <properties>
            <source>dev.echoservice.Echo2</source>
        </properties>
    </destination>
<destination channels="qa-amf" id="qa.amf.echoservice.Echo2">
        <properties>
            <source>dev.echoservice.Echo2</source>
        </properties>
    </destination>
<destination channels="qa-http" id="qa.http.echoservice.Echo2">
        <properties>
            <source>dev.echoservice.Echo2</source>
        </properties>
    </destination>
<destination id="qa.remoting.Test">
        <properties>
            <factory>remotingTestFactory</factory>
            <source>blazeds.qa.remotingService.TestServices</source>
            <scope>session</scope>
        </properties>
    </destination>
<destination channels="qa-amf" id="qa.amf.remoting.Test">
        <properties>
            <source>blazeds.qa.remotingService.TestServices</source>
            <scope>session</scope>
        </properties>
    </destination>
<destination channels="qa-http" id="qa.http.remoting.Test">
        <properties>
            <source>blazeds.qa.remotingService.TestServices</source>
            <scope>session</scope>
        </properties>
    </destination>
<destination id="qa.stateless.remoting.Test">
        <properties>
            <source>blazeds.qa.remotingService.TestServices</source>
            <scope>request</scope>
        </properties>
    </destination>
<destination channels="qa-amf" id="qa.amf.stateless.remoting.Test">
        <properties>
            <source>blazeds.qa.remotingService.TestServices</source>
            <scope>request</scope>
        </properties>
    </destination>
<destination channels="qa-http" id="qa.http.stateless.remoting.Test">
        <properties>
            <source>blazeds.qa.remotingService.TestServices</source>
            <scope>request</scope>
        </properties>
    </destination>
<destination id="qa.secured.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
            <scope>session</scope>
        </properties>
        <security>
            <security-constraint ref="sample-users"></security-constraint>
        </security>
    </destination>
<destination id="qa.amf.secured.echoservice.Echo">
        <channels>
            <channel ref="qa-amf"></channel>
        </channels>
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
            <scope>session</scope>
        </properties>
        <security>
            <security-constraint ref="sample-users"></security-constraint>
        </security>
    </destination>
<destination id="qa.http.secured.echoservice.Echo">
        <channels>
            <channel ref="qa-http"></channel>
        </channels>
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
            <scope>session</scope>
        </properties>
        <security>
            <security-constraint ref="sample-users"></security-constraint>
        </security>
    </destination>
<destination id="qa.http.secured.PCA.echoservice.Echo">
        <channels>
            <channel ref="qa-http"></channel>
        </channels>
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
            <scope>session</scope>
        </properties>
        <security>
            <security-constraint ref="sample-users-per-client-authentication"></security-constraint>
        </security>
    </destination>
<destination id="qa.secured.remoting.Test">
        <properties>
            <source>blazeds.qa.remotingService.TestServices</source>
            <scope>session</scope>
        </properties>
        <security>
            <security-constraint ref="sample-users"></security-constraint>
        </security>
    </destination>
<destination channels="qa-amf" id="qa.amf.secured.remoting.Test">
        <properties>
            <source>blazeds.qa.remotingService.TestServices</source>
            <scope>session</scope>
        </properties>
        <security>
            <security-constraint ref="sample-users"></security-constraint>
        </security>
    </destination>
<destination channels="qa-http" id="qa.http.secured.remoting.Test">
        <properties>
            <source>blazeds.qa.remotingService.TestServices</source>
            <scope>session</scope>
        </properties>
        <security>
            <security-constraint ref="sample-users"></security-constraint>
        </security>
    </destination>
<destination id="qa.secured.methodIncludes.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
             <scope>session</scope>
            <include-methods>
            	<method name="echoShort"></method>
            	<method name="echoInt" security-constraint="sample-users-basic"></method>
            	<method name="echoIntClass" security-constraint="sample-users"></method>
            	<method name="echoLong" security-constraint="sample-managers"></method>            	
            </include-methods>
        </properties>
    </destination>
<destination id="qa.secured.methodExcludes.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
            <scope>request</scope>
            <exclude-methods>
            	<method name="echoShort"></method>
            	<method name="echoInt"></method>
            	<method name="echoIntClass"></method>
            	<method name="echoLong"></method>            	
            </exclude-methods>
        </properties>
    </destination>
<destination id="qa.secured.includeWin.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
            <include-methods>
	            <method name="echoShort"></method>
	            <method name="echoInt" security-constraint="sample-users-basic"></method>
	            <method name="echoIntClass" security-constraint="sample-users"></method>
	            <method name="echoLong" security-constraint="sample-managers"></method>                 
            </include-methods>
            <exclude-methods>
	            <method name="echoShort"></method>
	            <method name="echoInt"></method>
	            <method name="echoString"></method>
            </exclude-methods>
        </properties>
    </destination>
<destination id="qa.secured.nestedConstraints.echoservice.Echo">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
            <scope>application</scope>
            <include-methods>
            	<method name="echoShort"></method>
            	<method name="echoInt"></method>
            	<method name="echoIntClass"></method>
            	<method name="echoLong" security-constraint="sample-managers"></method>            	
            </include-methods>
            <exclude-methods>
	            <method name="echoString"></method>
            </exclude-methods>
        </properties>
        <security>
            <security-constraint ref="sample-users"></security-constraint>
        </security>
    </destination>
<destination id="qa.errorhandling">
        <properties>
            <source>errorhandling.testException</source>
        </properties>
    </destination>
<destination id="WeatherService">
        <properties>
            <source>dev.weather.WeatherService</source>
        </properties>
    </destination>
<destination id="qa.data.associations.CountryService">
        <properties>
            <source>qa.data.associations.CountryService</source>
        </properties>
    </destination>
<destination id="ServerPush">
        <properties>
            <source>qa.messaging.ROPushServerMessage</source>
            <scope>request</scope>
        </properties>
	</destination>
<destination id="ServerPush_OverlappingChannelSets">
        <properties>
            <source>qa.messaging.ROPushServerMessage</source>
            <scope>request</scope>
        </properties>
        <channels>            
            <channel ref="qa-unreachable-amf"></channel>
            <channel ref="qa-amf"></channel>			
        </channels>
	</destination>
<destination id="ROMessageDestination">
       <properties>
           <source>runtimeconfig.remoteobjects.ROMessageDestination</source>
       </properties>
    </destination>
<destination id="RuntimeConfigurator">
        <properties>
            <source>runtimeconfig.remoteobjects.RuntimeConfigurator</source>
        </properties>
    </destination>
<destination id="remoting.enumtest">
        <properties>
            <source>remoting.datatype.EnumTypeTest</source>
        </properties>
    </destination>
<destination id="MBeanObjectNameResolver">
        <properties>
            <source>qa.management.MBeanObjectNameResolver</source>
        </properties>
		<!-- uncomment when on Websphere with administrative security enabled 
             should call setCrendentials("manager","manager1")   -->
		<!--
		<security>
            <security-constraint ref="console"/>
        </security>
		-->
    </destination>
<destination id="ImageSnapshotType">
        <properties>
            <source>blazeds.qa.remotingService.ImageSnapshotType</source>
        </properties>
    </destination>
<destination id="FlexSessionAttributeListenerTest">
        <properties>
            <source>remoting.session.FlexSessionAttributeListenerTest</source>
        </properties>
    </destination>
<destination id="DupAttributeIDDest1">
        <properties>
            <source>dev.weather.WeatherService</source>
			<scope>session</scope>
			<attribute-id>foo</attribute-id>
        </properties>
    </destination>
<destination id="DupAttributeIDDest2">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
			<scope>session</scope>
			<attribute-id>foo</attribute-id>
        </properties>
    </destination>
<destination id="ConstructorNegativeTest">
        <properties>
            <source>remoting.ConstructorNegativeTest</source>
			<scope>session</scope>
        </properties>
    </destination>
<destination id="filteredAck">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
        </properties>
    </destination>
<destination id="filteredFault">
        <properties>
            <source>blazeds.qa.remotingService.Echo</source>
        </properties>
    </destination>
<destination channels="qa-amf" id="msgbrokertest-ro">
        <properties>
            <source>blazeds.qa.messagingService.filters.MessageFilterBrokerConfig</source>
        </properties>        
    </destination>
<destination channels="qa-amf" id="validatorconfig-ro">
        <properties>
            <source>blazeds.qa.messagingService.validators.DeserializationValidatorBrokerConfig</source>
        </properties>        
    </destination>
</service>