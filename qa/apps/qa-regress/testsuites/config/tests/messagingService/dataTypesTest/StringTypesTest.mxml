<?xml version="1.0"?>
<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
<!--
*
* ADOBE CONFIDENTIAL
* ___________________
*
*  Copyright 2008 Adobe Systems Incorporated
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Adobe Systems Incorporated and its suppliers,
* if any.  The intellectual and technical concepts contained
* herein are proprietary to Adobe Systems Incorporated and its
* suppliers and may be covered by U.S. and Foreign Patents,
* patents in process, and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe Systems Incorporated.
-->

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
            result="testHandler(event,false)" fault="testHandler(event,true)"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


         ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;


        private var expectedValue:String = "Flex";
        private var expectedArray:Array = [expectedValue,null,""];
        private var longStr1M: String;
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        */
        private function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));
            
            longStr1M = ">&\\&amp;&gt;";
            while (longStr1M.length < 1000000)
            {
                longStr1M += Math.random();    
            }           

            MXUnitManager.detectTests(this,20000);

            //MXUnitManager.addTests(this,["testEcho1MBLongStringHTTP"],15000);
        }
        /**
        *    Test sending and receiving a java String through amf channel
        **/
        public function testEchoStringAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoString(expectedValue);
            call.expected = expectedValue;
        }
        /**
        *    Test sending and receiving a 1 mega bytes java String through amf channel
        **/
        public function testEcho1MBLongStringAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoString(longStr1M);
            call.expected = longStr1M;   
        }
       
        /**
        *    Test java String through amf channel with null
        **/
        public function testEchoStringNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoString(null);
            call.expected = null;
        }

        /**
        *    Test java String[] through amf channel 
        **/
        public function testEchoStringsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoStrings(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test ArrayList of String through amf channel, parameter is array
        *     ro.echoArrayList(expectedArray)
        **/
        public function testEchoArrayListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    Test ArrayList of String through amf channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        **/
        public function testArrayCollectionEchoArrayListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = expectedArray;
        }
        /**
        *    Test ArrayList of String through amf channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: ArrayCollection of String
        **/
        public function testArrayCollectionEchoArrayListAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }
        /**
        *    Test Vector of String through amf channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: Array of String (legacy collection channel)
        **/
        public function testEchoVectorAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    Test HashSet of String through amf channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: Array of String (legacy collection channel)
        **/
        public function testEchoHashSetAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoHashSet([expectedValue]);
            call.expected = [expectedValue];
        }
        /**
        *    Test LinkedList of String through amf channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: Array of String (legacy collection channel)
        **/
        public function testEchoLinkedListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }


        //http
        /**
        *    Test sending and receiving a java String through http channel
        **/
        public function testEchoStringHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoString(expectedValue);
            call.expected = expectedValue;
        }
        /**
        *    Test sending and receiving a 1 mega bytes java String through http channel
        **/
        public function testEcho1MBLongStringHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoString(longStr1M);
            call.expected = longStr1M;   
        }
       
        /**
        *    Test java String through http channel with null
        **/
        public function testEchoStringNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoString(null);
            call.expected = null;
        }

        /**
        *    Test java String[] through http channel 
        **/
        public function testEchoStringsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoStrings(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test ArrayList of String through http channel, parameter is array
        *     ro.echoArrayList(expectedArray)
        **/
        public function testEchoArrayListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    Test ArrayList of String through http channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        **/
        public function testArrayCollectionEchoArrayListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = expectedArray;
        }
        /**
        *    Test ArrayList of String through http channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: ArrayCollection of String
        **/
        public function testArrayCollectionEchoArrayListHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }
        /**
        *    Test Vector of String through http channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: Array of String (legacy collection channel)
        **/
        public function testEchoVectorHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    Test HashSet of String through http channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: Array of String (legacy collection channel)
        **/
        public function testEchoHashSetHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoHashSet([expectedValue]);
            call.expected = [expectedValue];
        }
        /**
        *    Test LinkedList of String through http channel, parameter is arrayCollection
        *     ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: Array of String (legacy collection channel)
        **/
        public function testEchoLinkedListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }


        private function testHandler(e:Object, fromFault:Boolean):void
        {
            if (e.token.expectFault)
            {
                Assert.currentTest.doPass(e.fault.faultString);
            }
            else if (fromFault)
            {
                Assert.currentTest.doFail(e.fault.faultString);
            }
            else
            {
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>