<?xml version="1.0"?>

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->
    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
            result="testHandler(event,false)" fault="testHandler(event,true)"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


        private var amfChannel:ChannelSet;
        private var httpChannel:ChannelSet;
       

        private var amfChannelac:ChannelSet;
        private var httpChannelac:ChannelSet;



        private var expectedValue:Number = 1.79769313486231e+308;
        private var expectedArray:Array = [Number.MIN_VALUE,0,Number.MAX_VALUE, 9007199254740992, -9007199254740992, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NaN];

        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));    
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));


           MXUnitManager.detectTests(this,20000);

        }
        
        /**
        *echo max value and compare the return with string
        *in order to make sure the number reference have the required 
        *precision
        **/
        public function testEchoMaxDoubleAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDouble(expectedValue);
            call.expected = "1.79769313486231e+308";
        }
     
        //double class
        /**
        *    Test java Double through amf channel
        **/
        public function testEchoDoubleClassAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubleClass(expectedValue);
            call.expected = expectedValue;
        }
        /**
        *    Test java Double through http channel
        **/
        public function testEchoDoubleClassHttp():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubleClass(expectedValue);
            call.expected = expectedValue;
        }
        


        /**
        *    Test java Double with null as parameter through amf channel
        **/
        public function testEchoDoubleClassNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubleClass(null);
            call.expected = null;
        }
        
        /**
        *    test Double with null as parameter through http channel
        **/
        public function testEchoDoubleClassNullHttp():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubleClass(null);
            call.expected = null;
        }

        /**
        *    test double[] through amf channel
        **/
        public function testEchoDoublesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubles(expectedArray);
            call.expected = expectedArray;

        }
        
        /**
        *    test double[] through http channel
        **/
        public function testEchoDoublesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubles(expectedArray);
            call.expected = expectedArray;

        }
        
        /**
        *    test Dodoubleuble[] through amf channel
        **/
        public function testEchoDoublesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubles(expectedArray);
            call.expected = expectedArray;

        }
        
        /**
        *    test double[] through http channel
        **/
        public function testEchoDoublesHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubles(expectedArray);
            call.expected = expectedArray;

        }
     

        //double[] using empty []
        /**
        *    test double[] with empty array[] through amf channel
        **/
        public function testEchoDoublesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubles([]);
            call.expected = [];

        }
        /**
        *    test double[] with empty array[] through http channel
        **/
        public function testEchoDoublesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubles([]);
            call.expected = [];

        }
        
        /**
        *    test double[] with empty array[] through amf channel
        **/
        public function testEchoDoublesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubles([]);
            call.expected = [];

        }
        
        /**
        *    test double[] with empty array[] through http channel
        **/
        public function testEchoDoublesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubles([]);
            call.expected = [];

        }


        /**
        *    test double[] with null through amf channel
        **/
        public function testEchoDoublesNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubles(null);
            call.expected = null;

        }
        /**
        *    test double[] with null through http channel
        **/
        public function testEchoDoublesNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubles(null);
            call.expected = null;

        }
        /**
        *    test double[] with null through amf channel
        **/
        public function testEchoDoublesNullAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubles(null);
            call.expected = null;

        }
        /**
        *    test double[] with null through http channel
        **/
        public function testEchoDoublesNullHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubles(null);
            call.expected = null;

        }

        //Double[]
        /**
        *    test Double[] through amf channel
        **/
        public function testEchoDoubleClassesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubleClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    test Double[] through http channel
        **/
        public function testEchoDoubleClassesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubleClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    test Double[] through amf channel
        **/
        public function testEchoDoubleClassesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubleClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    test Double[] through http channel
        **/
        public function testEchoDoubleClassesHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubleClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    test Double in arrayList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray));
        *    expected result: Array of numbers
        **/
        public function testArrayAsListEchoDoubleClassesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = expectedArray;
        }
        /**
        *    test Double in arrayList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray));
        *    expected result: ArrayCollection of numbers
        **/
        public function testArrayCollectionEchoDoubleClassesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }
        /**
        *    test Double in arrayList through amf channel
        *    ro.echoArrayList(expectedArray);
        *    expected result: Array of numbers
        **/
        public function testArrayAsListEchoDoubleClassesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    test Double in arrayList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result: ArrayCollection of numbers
        **/
        public function testArrayCollectionEchoDoubleClassesHTTP():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }


        //Double[] - using []
        /**
        *    test Double[] with [] through amf channel    
        **/
        public function testEchoDoubleClassesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubleClasses([]);
            call.expected = [];

        }
        /**
        *    test Double[] with [] through http channel    
        **/
        public function testEchoDoubleClassesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubleClasses([]);
            call.expected = [];

        }
        /**
        *    test Double[] with [] through amf channel    
        **/
        public function testEchoDoubleClassesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubleClasses([]);
            call.expected = [];

        }
        /**
        *    test Double[] with [] through http channel    
        **/
        public function testEchoDoubleClassesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubleClasses([]);
            call.expected = [];

        }

        //Double[] - using ArrayCollection()
        /**
        *    test Double[] with empty ArrayCollection through amf channel    
        **/
        public function testACEchoDoubleClassesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubleClasses(new ArrayCollection([]));
            call.expected = [];

        }
        /**
        *    test Double[] with empty ArrayCollection through http channel    
        **/
        public function testACEchoDoubleClassesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubleClasses(new ArrayCollection([]));
            call.expected = [];

        }
        /**
        *    test Double[] with empty ArrayCollection through amf channel    
        **/
        public function testACEchoDoubleClassesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubleClasses(new ArrayCollection([]));
            call.expected = [];

        }
        /**
        *    test Double[] with empty ArrayCollection through http channel    
        **/
        public function testACEchoDoubleClassesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubleClasses(new ArrayCollection([]));
            call.expected = [];

        }


        /**
        *    test Double[] through amf channel 
        *    Double Classes - [null,null,3.33,999,null]
        **/
        public function testEchoDoubleClassesNullsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            call.expected = [null,null,3.33,999,null];

        }
        /**
        *    test Double[] through http channel 
        *    Double Classes - [null,null,3.33,999,null]
        **/
        public function testEchoDoubleClassesNullsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            call.expected = [null,null,3.33,999,null];

        }
        
        /**
        *    test Double[] through amf channel 
        *    Double Classes - [null,null,3.33,999,null]
        **/
        public function testEchoDoubleClassesNullsAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            call.expected = [null,null,3.33,999,null];

        }
        /**
        *    test Double[] through amf channel 
        *    Double Classes - [null,null,3.33,999,null]
        **/
        public function testEchoDoubleClassesNullsHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoDoubleClasses([null,null,3.33,999,null]);
            call.expected = [null,null,3.33,999,null];

        }


        //Java ArrayList
        /**
        *    Test Number in arrayList through amf channel
        **/
        public function testEchoArrayListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test Number in arrayList through http channel
        **/
        public function testEchoArrayListHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoArrayList(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test Number in arrayList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoArrayListAMFAC():void 
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);

        }
        /**
        *    Test Number in arrayList through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoArrayListHTTPAC():void   //this should fail, array-as-list is not used. it should only convert to []
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoArrayList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);

        }


        //Java Vector
        /**
        *    Test Number in vector through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testEchoVectorAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test Number in vector through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testEchoVectorHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test Number in vector through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoVectorAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoVector(expectedArray);
            call.expected = new ArrayCollection(expectedArray);

        }
        /**
        *    Test Number in vector through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoVectorHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoVector(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);

        }
        /**
        *    Test Number in hashset through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testHashSetAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoHashSet([3]);
            call.expected = [3];
        }
        /**
        *    Test Number in hashset through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testHashSetHTTP():void
        {
           ro.channelSet = httpChannel;
           var call:Object = ro.echoHashSet([3]);
           call.expected = [3];
        }
        /**
        *    Test Number in hashset through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testHashSetAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoHashSet([3]);
            call.expected = new ArrayCollection([3]);
        }
        /**
        *    Test Number in hashset through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testHashSetHTTPAC():void
        {
           ro.channelSet = httpChannelac;
           var call:Object = ro.echoHashSet([33]);
           call.expected = new ArrayCollection([33]);
        }

        /**
        *    Test Number in LinkedList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testEchoLinkedListAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    Test Number in LinkedList through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  Array of numbers
        **/
        public function testEchoLinkedListHTTP():void
        {
           ro.channelSet = httpChannel;
           var call:Object = ro.echoLinkedList(expectedArray);
            call.expected = expectedArray;
        }
        /**
        *    Test Number in LinkedList through amf channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoLinkedListAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoLinkedList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }
        /**
        *    Test Number in LinkedList through http channel
        *    ro.echoArrayList(new ArrayCollection(expectedArray))
        *    expected result:  ArrayCollection of numbers
        **/
        public function testEchoLinkedListHTTPAC():void
        {
           ro.channelSet = httpChannelac;
           var call:Object = ro.echoLinkedList(new ArrayCollection(expectedArray));
            call.expected = new ArrayCollection(expectedArray);
        }


        private function testHandler(e:Object, fromFault:Boolean):void
        {
            if (e.token.expectFault)
            {
                Assert.currentTest.doPass(e.fault.faultString);
            }
            else if (fromFault)
            {
                Assert.currentTest.doFail(e.fault.faultString);
            }
            else
            {
               
                Assert.currentTest.doAssertEquals(String(e.result),String(e.token.expected));
            }
        }
    ]]>
    </mx:Script>

</mx:Application>