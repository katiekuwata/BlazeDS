<?xml version="1.0"?>

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
            result="testHandler(event,false)" fault="testHandler(event,true)"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;

        private var expectedValue:Date = new Date(1997,6,1);
        private var now:Date = new Date();
        private var expectedArray:Array = [expectedValue,null,now];
        
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        */        
        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));

            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));
        
            MXUnitManager.detectTests(this,20000);

            //MXUnitManager.addTests(this,["testArrayCollectionEchoBooleanClassesAMF"],10000);
        }
        
        /**
        *    Test SQL Date through amf channel
        **/
        public function testEchoDateAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoSQLDate(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test SQL Date with Long
        **/
        public function testEchoDateLongAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoSQLDate(expectedValue.getTime());
            call.expected = expectedValue;
        }

         /**
        *    Test SQL Date[] through amf channel
        **/
        public function testEchoDatesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoSQLDates(expectedArray);
            call.expected = expectedArray;
        }
        
        /**
        *    Test SQL Time through amf channel
        **/
        public function testEchoTimeAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoTime(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test SQL Time with Long
        **/
        public function testEchoTimeLongAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoTime(expectedValue.getTime());
            call.expected = expectedValue;
        }

         /**
        *    Test SQL Time[] through amf channel
        **/
        public function testEchoTimesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoTimes(expectedArray);
            call.expected = expectedArray;
        }
         /**
        *    Test SQL Time through amf channel
        **/
        public function testEchoTimestampAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoTimestamp(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test SQL Time with Long
        **/
        public function testEchoTimestampLongAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoTimestamp(expectedValue.getTime());
            call.expected = expectedValue;
        }

         /**
        *    Test SQL Time[] through amf channel
        **/
        public function testEchoTimestampsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoTimestamps(expectedArray);
            call.expected = expectedArray;
        }



        //http
        /**
        *    Test Date through http channel
        **/
        public function testEchoDateHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoSQLDate(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test Date with Long through http channel
        **/
        public function testEchoDateLongHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoSQLDate(expectedValue.getTime());
            call.expected = expectedValue;
        }

        /**
        *    Test Date[] through http channel
        **/
        public function testEchoDatesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoSQLDates(expectedArray);
            call.expected = expectedArray;
        }
        //http
        /**
        *    Test Time through http channel
        **/
        public function testEchoTimeHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoTime(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *    Test Time with Long through http channel
        **/
        public function testEchoTimeLongHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoTime(expectedValue.getTime());
            call.expected = expectedValue;
        }

        /**
        *    Test Time[] through http channel
        **/
        public function testEchoTimesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoTimes(expectedArray);
            call.expected = expectedArray;
        }
 
  
        private function testHandler(e:Object, fromFault:Boolean):void
        {
            if (e.token.expectFault)
            {
                Assert.currentTest.doPass(e.fault.faultString);
            }
            else if (fromFault)
            {
                Assert.currentTest.doFail(e.fault.faultString);
            }
            else
            {
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>