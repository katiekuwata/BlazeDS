<?xml version="1.0"?>

<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
            result="testHandler(event,false)" fault="testHandler(event,true)"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
    	import qa.Utils;    
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


        ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;


		//When using a Number as the expected value, the following number causes a failure due to a loss of precision
        //private var expectedValue:Number = 1.7976931348623157;
		private var expectedValue:String = "123456789.79769313486231577976931348623157";
        private var expectedArray:Array = [expectedValue,null, "0"];
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        */
        public function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));

            MXUnitManager.detectTests(this,20000);

            //MXUnitManager.addTests(this,["testEchoBigDecimalAMF"],10000);
        }
        /**
        *  Test bigDecimal using amf channel
        **/
        public function testEchoBigDecimalAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigDecimal(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *  Test negative bigDecimal value using amf channel
        **/
        public function testEchoNegativeBigDecimalAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigDecimal("-" + expectedValue);
            call.expected = "-" + expectedValue;
        }

        /**
        *  Test null value using amf channel
        **/
        public function testEchoBigDecimalNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigDecimal(null);
            call.expected = null;
        }

        /**
        *  Test BigDecimal[] value using amf channel
        **/
        public function testEchoBigDecimalsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.EchoBigDecimals(expectedArray);
            call.expected = expectedArray;
        }

      

        //http
        /**
        *  Test bigDecimal using http channel
        **/
        public function testEchoBigDecimalHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.EchoBigDecimal(expectedValue);
            call.expected = expectedValue;
        }
        
        /**
        *  Test bigDecimal with null value using http channel
        **/
        public function testEchoBigDecimalNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.EchoBigDecimal(null);
            call.expected = null;
        }

        /**
        *  Test BigDecimal[] using http channel
        **/
        public function testEchoBigDecimalsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.EchoBigDecimals(expectedArray);
            call.expected = expectedArray;
        }

  

        private function testHandler(e:Object, fromFault:Boolean):void
        {
            if (e.token.expectFault)
            {
                Assert.currentTest.doPass(e.fault.faultString);
            }
            else if (fromFault)
            {
                Assert.currentTest.doFail(e.fault.faultString);
            }
            else
            {
            	trace("class type returned: " + Utils.getClassName(e.result));            	
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>