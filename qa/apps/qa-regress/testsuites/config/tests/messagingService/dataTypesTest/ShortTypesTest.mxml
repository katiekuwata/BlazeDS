<?xml version="1.0"?>
<mx:Application  width='800' height='800' xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setUp()">
 <!--

 ADOBE CONFIDENTIAL
 ___________________

  Copyright 2008 Adobe Systems Incorporated
  All Rights Reserved.

 NOTICE:  All information contained herein is, and remains
 the property of Adobe Systems Incorporated and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to Adobe Systems Incorporated and its
 suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from Adobe Systems Incorporated.
-->

    <mx:RemoteObject destination="qa.echoservice.Echo" id="ro"
            result="testHandler(event,false)" fault="testHandler(event,true)"/>

    <mx:TraceTarget id="tt"/>
    <mx:Script>
    <![CDATA[
        import qa.mxunit.*;
        import mx.core.mx_internal;
        import mx.messaging.ChannelSet;
        import mx.messaging.channels.*;
        import mx.messaging.config.ServerConfig;
        import mx.collections.*;
        import mx.rpc.events.*;


         ////////////////////////////////////////////////////////////////////////////
        //
        // Variables
        //
        ////////////////////////////////////////////////////////////////////////////        
        //amf channel which legacy-collection is true
        private var amfChannel:ChannelSet;
        //http channel which legacy-collection is true
        private var httpChannel:ChannelSet;
        //amf channel which legacy-collection is false
        private var amfChannelac:ChannelSet;
        //amf channel which legacy-collection is false
        private var httpChannelac:ChannelSet;
        

        private var expectedValue:Number = 3;
        private var expectedArray:Array = [-3,0,3];
        
        ////////////////////////////////////////////////////////////////////////////
        //
        // Setup method.
        //
        //////////////////////////////////////////////////////////////////////////// 
        
        /**
        *  This setup method dynamically creates a series of tests, and 
        *  creates different channelsets. Same data is going to test under different
        *  channelSets
        */
        private function setUp():void
        {
            amfChannel = new ChannelSet();
            amfChannel.addChannel(ServerConfig.getChannel("qa-amf"));
            httpChannel = new ChannelSet();
            httpChannel.addChannel(ServerConfig.getChannel("qa-http"));
        
            amfChannelac = new ChannelSet();
            amfChannelac.addChannel(ServerConfig.getChannel("qa-amf-ac"));
            httpChannelac = new ChannelSet();
            httpChannelac.addChannel(ServerConfig.getChannel("qa-http-ac"));
          
            MXUnitManager.detectTests(this,20000);

            //MXUnitManager.addTests(this,["testArrayCollectionEchoIntClassesAMF"],10000);
        }
        
        /**
        *    Test sending and receiving a java short through amf channel
        **/
        public function testEchoShortAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoShort(expectedValue);
            call.expected = expectedValue;
        }
        /**
        *    Test sending and receiving a java short through http channel
        **/
        public function testEchoShortHttp():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoShort(expectedValue);
            call.expected = expectedValue;
        }

        //short class
        /**
        *    Test sending and receiving a java Short through amf channel
        **/
        public function testEchoShortClassAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoShortClass(expectedValue);
            call.expected = expectedValue;
        }
        /**
        *    Test sending and receiving a java Short through http channel
        **/
        public function testEchoShortClassHttp():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoShortClass(expectedValue);
            call.expected = expectedValue;
        }



        //short[]
        /**
        *    Test sending and receiving a java short[] through amf channel
        **/
        public function testEchoShortsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoShorts(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving a java short[] through http channel
        **/
        public function testEchoShortsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoShorts(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving a java short[] through amf channel
        **/
        public function testEchoShortsAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoShorts(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving a java short[] through http channel
        **/
        public function testEchoShortsHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoShorts(expectedArray);
            call.expected = expectedArray;

        }
        //int[] using empty []
        /**
        *    Test sending and receiving a java short[] through amf channel with no element
        **/
        public function testEchoShortsEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoShorts([]);
            call.expected = [];

        }
        /**
        *    Test sending and receiving a java short[] through http channel with no element
        **/
        public function testEchoShortsEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoShorts([]);
            call.expected = [];

        }
        /**
        *    Test sending and receiving a java short[] through amf channel with no element
        **/
        public function testEchoShortsEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoShorts([]);
            call.expected = [];

        }
        /**
        *    Test sending and receiving a java short[] through http channel with no element
        **/
        public function testEchoShortsEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoShorts([]);
            call.expected = [];

        }

        //int[] -paremter null
        /**
        *    Test sending and receiving a java short[] through amf channel with a null
        **/
        public function testEchoShortsNullAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoShorts(null);
            call.expected = null;

        }
        /**
        *    Test sending and receiving a java short[] through http channel with a null
        **/
        public function testEchoShortsNullHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoShorts(null);
            call.expected = null;

        }
        /**
        *    Test sending and receiving a java short[] through amf channel with a null
        **/
        public function testEchoShortsNullAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoShorts(null);
            call.expected = null;

        }
        /**
        *    Test sending and receiving a java short[] through http channel with a null
        **/
        public function testEchoShortsNullHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoShorts(null);
            call.expected = null;

        }
        //Short[]
        /**
        *    Test sending and receiving a java Short[] through amf channel with an empty array
        **/
        public function testEchoShortClassesAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoShortClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving a java Short[] through http channel with an empty array
        **/
        public function testEchoShortClassesHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoShortClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving a java Short[] through amf channel with an empty array
        **/
        public function testEchoShortClassesAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoShortClasses(expectedArray);
            call.expected = expectedArray;

        }
        /**
        *    Test sending and receiving a java Short[] through http channel with an empty array
        **/
        public function testEchoShortClassesHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoShortClasses(expectedArray);
            call.expected = expectedArray;

        }
        
        //Short[] - using []
        public function testEchoShortClassesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoShortClasses([]);
            call.expected = [];

        }
        public function testEchoShortClassesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoShortClasses([]);
            call.expected = [];

        }
        public function testEchoShortClassesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoShortClasses([]);
            call.expected = [];

        }
        public function testEchoShortClassesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoShortClasses([]);
            call.expected = [];

        }

        //Short[] - using ArrayCollection()
        /**
        *    Test sending and receiving a java Short[] through amf channel with an arrayCollection
        **/
        public function testACEchoShortClassesEmptyAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoShortClasses(new ArrayCollection([]));
            call.expected = [];

        }
         /**
        *    Test sending and receiving a java Short[] through http channel with an arrayCollection
        **/
        public function testACEchoShortClassesEmptyHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoShortClasses(new ArrayCollection([]));
            call.expected = [];

        }
        /**
        *    Test sending and receiving a java Short[] through amf channel with an arrayCollection
        **/
        public function testACEchoShortClassesEmptyAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoShortClasses(new ArrayCollection([]));
            call.expected = [];

        }
         /**
        *    Test sending and receiving a java Short[] through http channel with an arrayCollection
        **/
        public function testACEchoShortClassesEmptyHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoShortClasses(new ArrayCollection([]));
            call.expected = [];

        }

        //Short Classes - [null,null,3,999,null]
        /**
        *    Test sending and receiving a java Short[] through amf channel with some nulls
        **/
        public function testEchoShortClassesNullsAMF():void
        {
            ro.channelSet = amfChannel;
            var call:Object = ro.echoShortClasses([null,null,3,999,null]);
            call.expected = [null,null,3,999,null];

        }
        /**
        *    Test sending and receiving a java Short[] through http channel with some nulls
        **/
        public function testEchoShortClassesNullsHTTP():void
        {
            ro.channelSet = httpChannel;
            var call:Object = ro.echoShortClasses([null,null,3,999,null]);
            call.expected = [null,null,3,999,null];

        }
        /**
        *    Test sending and receiving a java Short[] through amf channel with some nulls
        **/
        public function testEchoShortClassesNullsAMFAC():void
        {
            ro.channelSet = amfChannelac;
            var call:Object = ro.echoShortClasses([null,null,3,999,null]);
            call.expected = [null,null,3,999,null];

        }
        /**
        *    Test sending and receiving a java Short[] through http channel with some nulls
        **/
        public function testEchoShortClassesNullsHTTPAC():void
        {
            ro.channelSet = httpChannelac;
            var call:Object = ro.echoShortClasses([null,null,3,999,null]);
            call.expected = [null,null,3,999,null];

        }


        private function testHandler(e:Object, fromFault:Boolean):void
        {
            if (e.token.expectFault)
            {
                Assert.currentTest.doPass(e.fault.faultString);
            }
            else if (fromFault)
            {
                Assert.currentTest.doFail(e.fault.faultString);
            }
            else
            {
                Assert.currentTest.doAssertEquals(e.result,e.token.expected);
            }
        }
    ]]>
    </mx:Script>

</mx:Application>