<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute">
  <mx:Script>
    <![CDATA[
      import mx.managers.PopUpManager;
      import mx.core.Application;
      import mx.controls.Alert;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      import mx.rpc.http.mxml.HTTPService;
      import mx.rpc.http.HTTPService;
	  import flash.net.*;
      
      protected var records_:Array = null;
      
      protected var httpService:mx.rpc.http.mxml.HTTPService = null;
      
      [Bindable("recordsChange")]
      public function set records(_records:Array):void
      {
        this.records_ = _records;
				var e:Event = new Event("recordsChange");
				dispatchEvent(e);
      }
      
      public function get records():Array
      {
        return records_;
      }


      protected function getXML():void
      {
        var resultFormat:String = cbResultFormat.selectedItem as String;
        var params:Object = new Object();
        httpService = new mx.rpc.http.mxml.HTTPService();
        httpService.concurrency = "single";
        httpService.showBusyCursor = true;
        var lastIndex:int = url.lastIndexOf("/");
        var fileName:String = null;
        if(chbUseLeakFile.selected)
        {
          // It leaks... :(
          fileName = "pbentries.xml";
        }
        else
        {
          // It doesn't leak... :)
          fileName = "leaktest.xml";          
        }
        var _url:String = url.substr(0, lastIndex+1) + fileName;
        httpService.url = _url;
        httpService.resultFormat = resultFormat;
        httpService.method = "POST";
        httpService.addEventListener(ResultEvent.RESULT, processResult);
        httpService.addEventListener(FaultEvent.FAULT, processFault);
        httpService.send(params);
      }
      
      protected function processResult(e:ResultEvent):void
      {
        var resultFormat:String = cbResultFormat.selectedItem as String;
        removeListeners();
        if(resultFormat == mx.rpc.http.HTTPService.RESULT_FORMAT_XML)
        {
          setArrayFromXMLNode();
        }
        else
        {
          setArrayFromXML(); 
        }
        destroyHttpService();
      }
      
      // format= "e4x"
      protected function setArrayFromXML():void
      {
	    var xml_:XML = XML(httpService.lastResult);
        var ar:Array = new Array();
        var x:XML = null;
        var xl:XMLList = xml_.phonebookEntries[0].phonebookEntry;
        for each(x in xl)
        {
          var record:Object = new Object();
          var prop:XML = null;
          var props:XMLList = x.children();
          for each(prop in props)
          {
          	var propName:String = prop.localName();
          	record[propName] = prop.toString();
          }
          ar.push(record);
        }
        records = ar;
      }
      
      // format= "xml"
      protected function setArrayFromXMLNode():void
      {
        var xml_:XMLNode = httpService.lastResult as XMLNode;
        var ar:Array = new Array();
        var x:XMLNode = null;
        var xl:Array = xml_.lastChild.childNodes;
        for each(x in xl)
        {
          var record:Object = new Object();
          var prop:XMLNode = null;
          var props:Array = x.childNodes;
          for each(prop in props)
          {
            record[prop.localName] = prop.firstChild!=null ? prop.firstChild.nodeValue : null;
          }
          ar.push(record);
        }
        records = ar;
      }
      
      protected function destroyHttpService():void
      {
        httpService.clearResult(true);
        httpService.disconnect();
        httpService = null;
        memory.text = String(flash.system.System.totalMemory);
        memoryMB.text = String(flash.system.System.totalMemory/(1024*1024));
      }
      
      protected function processFault(e:FaultEvent):void
      {
        removeListeners();
        Alert.show(e.fault.faultString, e.fault.faultCode);
        destroyHttpService();
      }
      
      protected function removeListeners():void
      {
        httpService.removeEventListener(ResultEvent.RESULT, processResult);
        httpService.removeEventListener(FaultEvent.FAULT, processFault);
      }
      
      protected function collect():void
      {
        // Garbage Collection
        try
        {
           new LocalConnection().connect('foo');
           new LocalConnection().connect('foo');
        }
        catch(e:*)
        {
        }
        memory.text = String(flash.system.System.totalMemory);
        memoryMB.text = String(flash.system.System.totalMemory/(1024*1024));
      }
    ]]>
  </mx:Script>
  <mx:ArrayCollection id="alRecords" source="{records}" />
  <mx:Label x="10" y="10" text="Result format:" id="lResultFormat"/>
  <mx:ComboBox x="104" y="8" id="cbResultFormat">
    <mx:Array>
     <mx:String>e4x</mx:String>
     <mx:String>xml</mx:String>
    </mx:Array>
  </mx:ComboBox>
  <mx:DataGrid id="dgRecords" x="10" y="36" width="936" height="437"
      dataProvider="{alRecords}"
     verticalScrollPolicy="auto" horizontalScrollPolicy="auto">
  </mx:DataGrid>
  <mx:Button x="355" y="496" label="Get xml" id="btnGetXML" click="{getXML();}" />
  <mx:Button x="155" y="496" label="GC" id="btnGC" click="{collect();}" />
  <mx:CheckBox x="276" y="10" label="Use &quot;LEAK&quot; file:" labelPlacement="left" id="chbUseLeakFile" selected="true"/>
  <mx:Label x="405" y="10" text="?" width="182" id="memory"/>
  <mx:Label x="605" y="10" text="?" width="182" id="memoryMB"/>
</mx:Application>
