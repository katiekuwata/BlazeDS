<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" applicationComplete="run()">
    
    <mx:HTTPService id="myService" useProxy="true" destination="echoParams_http"
        result="onServiceResult(event)"	fault="onServiceFault(event)" />
		
    <mx:HTTPService id="myServiceSecured" useProxy="true" destination="echoParamsSecure_http"
        result="onServiceResultSecured(event)"	fault="onServiceFaultSecured(event)" />
				
	<mx:Script>
	<![CDATA[

		/******************************************************************************************
		*   This test makes sure a user can add a top level security-constraint in proxy-config.xml
		*   for all destiations if individual destination doesn't have one(bug 83477).  
		*   Add the following line to the top level of proxy-config.xml.
		*
		*   <default-security-constraint ref="custom-read-access" />
		*
		*   restart the server and run the mxml.  Make sure both tests pass.
		*******************************************************************************************/

		import mx.utils.ObjectUtil;
		import qa.mxunit.*;
		import mx.rpc.events.*;

		public var request:Object = {param1:"Anonymous"};

		private var cred:Object = {username:"employee", password:"employee"};
		private var cred2:Object = {username:"sampleuser", password:"samplepassword"};

		public var result:String = "";
		public var resultSecured:String = "";

		public function run():void
		{
			myService.setCredentials(cred["username"], cred["password"]);
			myService.send(request);

			MXUnitManager.delay = 5000;
			MXUnitManager.addTests(this,["Test_DefaultSecurity", "Test_YieldToPredefinedConstraintSecurity"],1000);
		}
				
		private function onServiceFault(event:FaultEvent):void
		{
			result = "FaultString:" + event.fault.faultString + " Faultdetail:" + event.fault.faultDetail;
			myService.logout();
			runSecureTest();			
		}

		private function onServiceResult(event:ResultEvent):void
		{
			result = event.result.parameters["param1"];
			myService.logout();
			runSecureTest();
		}

		private function runSecureTest():void
		{
			var t:Timer = new Timer(100, 1);
			t.addEventListener(TimerEvent.TIMER_COMPLETE, onTimer);			
			t.start();
		}

		private function onTimer(event:TimerEvent):void
		{
			myServiceSecured.setCredentials(cred2["username"], cred2["password"]);
			myServiceSecured.send(request);
		}

		private function onServiceFaultSecured(event:FaultEvent):void
		{
			resultSecured = "FaultString:" + event.fault.faultString + " Faultdetail:" + event.fault.faultDetail;
			myServiceSecured.logout();
		}

		private function onServiceResultSecured(event:ResultEvent):void
		{
			resultSecured = event.result.parameters["param1"];
			myServiceSecured.logout();
		}

		public function Test_DefaultSecurity():void 
		{
			log("destination = echoParams_http,  result =  " + result);
			Assert.isTrue(result == "Anonymous", "fail to get proper result back");
		}
	
		public function Test_YieldToPredefinedConstraintSecurity():void
		{
			log("destination = echoParamsSecure_http,  result =  " + resultSecured);
			Assert.isTrue(resultSecured == "Anonymous", "fail to get proper result back");
		}
	
		private function log(obj:Object):void
		{			
			this.output.text +=  ObjectUtil.toString(obj) + "\n";
		}
        ]]>
    </mx:Script>

    <mx:TextArea id="output" width="50%" height="40%"/>
</mx:Application>
