<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="run()">
<mx:Script>
	<![CDATA[
//	import mx.messaging.management.Attribute;
	import mx.utils.ObjectUtil;
        import mx.rpc.remoting.RemoteObject;

        import mx.messaging.ChannelSet;
        import mx.messaging.channels.AMFChannel;

        import mx.rpc.events.ResultEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.AsyncToken;
        import mx.rpc.IResponder;
        import mx.rpc.Fault;
        import mx.rpc.AsyncResponder;

        import qa.mxunit.MXUnitManager;
        import qa.mxunit.Assert;

        private var runtimeManagement:RemoteObject;
        private var csAMF:ChannelSet;
        public static var handler:Function;  
        private var manager:MXUnitManager;
        private var TargetLevel:int = 2;
        private var HTTPObjectInstance:Object;
         
    /*
        These tests require manual setup steps which can not be checked-in to source control.
        When creating a new MBean, the MBean server, which is part of the jdk, is not aware of the app server or blazeds classpath.  
        Therefore, the MBean class needs to get added to the app server's classpath.
        On TomCat, this can be done by editting the apache-tomcat\bin\setclasspath.bat file and adding the MBean jar there.  For ex:
        set CLASSPATH=%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\simpleMBean.jar
        
        In this case, I copied simpleMBean.jar from this directory over to my %JAVA_HOME%\lib directory.      
    */
        private function run():void
        {
           //configure the MXUnitManager           
           manager = MXUnitManager.getInstance();                                                               
           // flex/management/jmx/MBeanServerGateway.java
           runtimeManagement = new RemoteObject("RuntimeManagement");

          manager.addTests(this, ["testcreateMBean","testcreateMBeanParams","testcreateMBeanAlreadyExists","testunregistercreatedMBean","testunregistercreatedMBeanParms"], 5000);
        //    manager.detectTests(this,5000);
        }

        public function testcreateMBean():void
        {        
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],createMBeanHandler);      
            var token:AsyncToken = runtimeManagement.createMBean("Simple", "codecoverage:Simple=NoPackageSimpleMBean" );
        }
        
        public function createMBeanHandler(event:Object = null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\n createMBean result: " + ObjectUtil.toString(event.result) + "\n";
               Assert.assertEquals("Simple", event.result.className);
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: " + event.fault.faultCode);
            }
        }
        
        public function testcreateMBeanParams():void
        {        
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],createMBeanParamsHandler);      
            var token:AsyncToken = runtimeManagement.createMBean("Simple", "codecoverage:Simple=NoPackageSimpleMBeanParams",null,null );
        }
        
        public function createMBeanParamsHandler(event:Object = null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\n createMBean result: " + ObjectUtil.toString(event.result) + "\n";
               Assert.assertEquals("Simple", event.result.className);
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: " + event.fault.faultCode);
            }
        }
        
        public function testcreateMBeanAlreadyExists():void
        {        
        	handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],createMBeanAlreadyExistsHandler);      
            var token:AsyncToken = runtimeManagement.createMBean("Simple", "codecoverage:Simple=NoPackageSimpleMBean" );
        }
        
        public function createMBeanAlreadyExistsHandler(event:Object = null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\n createMBean result: " + ObjectUtil.toString(event.result) + "\n";
               Assert.fail("this createMBean should throw an already exists exception");
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.assertEquals("The MBean, 'codecoverage:Simple=NoPackageSimpleMBean', already exists and is registered with the MBean server.", event.fault.faultString);
            }
       }
       
       public function testunregistercreatedMBean():void
       {        
           handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],unregisterMBeanHandler);      
           var token:AsyncToken = runtimeManagement.unregisterMBean("codecoverage:Simple=NoPackageSimpleMBean");
       }
       
       public function testunregistercreatedMBeanParms():void
       {        
           handler = manager.currentTest.chain(runtimeManagement,[ResultEvent.RESULT,FaultEvent.FAULT],unregisterMBeanHandler);      
           var token:AsyncToken = runtimeManagement.unregisterMBean("codecoverage:Simple=NoPackageSimpleMBeanParams");
       }
       
       public function unregisterMBeanHandler(event:Object = null):void   
        {
            if (event is ResultEvent)
            {	
               out.text += "\nunregisterMBean result: " + ObjectUtil.toString(event.result) + "\n";
               Assert.assertNull(event.result);
            }
            else
            {
         	   out.text += ObjectUtil.toString(event.fault);
               Assert.fail("Should not have FaultEvent: " + event.fault.faultString + ",Code: " + event.fault.faultCode);
            }
        }
       
    ]]>
</mx:Script>
<mx:TextArea id="out" width="90%" height="250"/>

</mx:Application>