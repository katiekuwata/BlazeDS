<?xml version="1.0"?>

<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->

<!-- 

This a test for ChannelSet.login, ChannelSet.logout and ChannleSet.disconnect methods

-->


<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
    creationComplete="creationCompleteHandler();">
    

    <mx:Panel id="mainPanel" height="100%" width="100%">
        <mx:HBox>    
        	<mx:Label text="Producer"/>        
        	<mx:Button label="Send Foo{counter}" click="sendMessage()"/>
			<mx:Button label="Disconnect" click="producer.disconnect();" enabled="{producer.connected}"/> 
            <mx:CheckBox label="Connected?" selected="{producer.connected}"/>
            <mx:CheckBox label="Authenticated?" selected="{producer.authenticated}"/>				   	
        </mx:HBox>        	
        <mx:HBox>
        	<mx:Label text="Consumer"/>
			<mx:Button label="Subcribe" click="subscribeConsumer();" enabled="{!consumer.subscribed}"/>    
			<mx:Button label="Unsubscribe" click="consumer.unsubscribe();" enabled="{consumer.subscribed}"/>
			<mx:Button label="Poll" click="poll();"/>			
			<mx:Button label="Disconnect" click="consumer.disconnect();" enabled="{consumer.connected}"/>
            <mx:CheckBox label="Connected?" selected="{consumer.connected}"/>
            <mx:CheckBox label="Authenticated?" selected="{consumer.authenticated}"/>			
			<mx:CheckBox label="Subscribed?" selected="{consumer.subscribed}"/>			
        </mx:HBox> 
        <mx:HBox>
            <mx:Button label="Login" click="doLogin()"/>
            <mx:Button label="Logout" click="doLogout()"/>
            <mx:CheckBox label="Authenticated?" selected="{pcs.authenticated}"/>			 
            <mx:Button label="Disconnect all.." click="pcs.disconnectAll()"/>
        </mx:HBox>                    
        <mx:Button label="Clear" click='ta.text = ""'/>        
        <mx:TextArea id="ta" width="100%" height="100%"/>           
    </mx:Panel>
    
    <mx:Producer id="producer" 
        destination="secured_message_amf"
        fault="faultHandler(event)"/>
               
    <mx:Consumer id="consumer" 
        destination="secured_message_amf"
        fault="faultHandler(event)" 
        message="messageHandler(event)"/>

    <mx:Consumer id="consumer2" 
        destination="secured_message_amf"
        fault="faultHandler(event)" 
        message="messageHandler2(event)"/>
                    
    <mx:Script>
        <![CDATA[
        
    	    import mx.messaging.events.MessageFaultEvent;	    
            import mx.messaging.events.MessageEvent;
        
			import mx.messaging.ChannelSet;            
            import mx.messaging.Producer;
            import mx.messaging.Consumer;
            import mx.messaging.config.ServerConfig;
			import mx.messaging.channels.PollingChannel;                
			import mx.messaging.messages.AsyncMessage;  	

			import mx.logging.Log;
	        import mx.logging.targets.TraceTarget;	

            import mx.rpc.*;
            import mx.rpc.events.*;		
	        
	        import mx.controls.Alert;
	        
	        [Bindable]
	        public var pcs:ChannelSet;
			public var pc:PollingChannel;                
			
			[Bindable]				                	
			public var counter:int = 0;

    		private function creationCompleteHandler():void
    		{
                var target:TraceTarget = new TraceTarget();
		        target.includeLevel = true;
		        target.filters = ["mx.messaging.*", "mx.rpc.*"];
		        Log.addTarget(target); 

                        pcs = ServerConfig.getChannelSet("secured_message_amf");
                        // Alert.show("pcs.toString: " + pcs.toString());
                        pcs.addEventListener(ResultEvent.RESULT, rpcResultHandler);
                        pcs.addEventListener(FaultEvent.FAULT, rpcFaultHandler);         			
    		}

            private function rpcResultHandler(event:ResultEvent):void
            {
                ta.text += "ChannelSet got rpc result: " + event + "\n";
            }

            private function rpcFaultHandler(event:FaultEvent):void
            {
	        ta.text += "ChannelSet got rpc fault: " + event + "\n";
            }

            private function doLogin():void
            {
                var token:AsyncToken = pcs.login("sampleuser", "samplepassword");
                token.op = "login";
                addResponder(token);
            }

            private function addResponder(token:AsyncToken):void
            {
                var r:AsyncResponder = new AsyncResponder(tokenR, tokenF, token);
                token.addResponder(r);
            }

            private function tokenR(data:Object, token:AsyncToken):void
            {
                ta.text += "Result for token op '" + token.op + "': " + data + "\n";
            }

            private function tokenF(fault:Object, token:AsyncToken):void
            {
                ta.text += "Fault for token op '" + token.op + "': " + fault + "\n";
            }

            private function doLogout():void
            {
 	        var token:AsyncToken = pcs.logout();
                token.op = "logout";
                addResponder(token);                
            }
    		     		 
            private function sendMessage():void
            {
                var msg:AsyncMessage = new AsyncMessage();
                msg.body = "Foo" + counter++;            
                producer.send(msg);
            }
                                                            
            private function messageHandler(event:MessageEvent):void
            {
                ta.text += "Consumer: received message: "+ event.message.body + "\n";  
            }

            private function messageHandler2(event:MessageEvent):void
            {
                ta.text += "Consumer2: received message: "+ event.message.body + "\n";  
            }
                       
            private function faultHandler(event:Object):void
            {
                ta.text += "Received fault: " + event.faultString + "\n";
            }      
            
			private function poll():void
			{
            	ta.text += "Polling" + "\n";
	            if (!consumer.subscribed)
	            {
	            	subscribeConsumer();
	            }            
            	pc.poll();
        	}
        	
        	private function subscribeConsumer():void
        	{
            	ta.text += "Subscribing Consumer \n";
	            consumer.subscribe();  
        		
            	pcs = consumer.channelSet;
            	pc = PollingChannel(pcs.currentChannel);	        		
        	}

                private function subscribeConsumer2():void
        	{
            	ta.text += "Subscribing Consumer2 \n";
	            consumer2.subscribe();  
        		
            	var pcs:ChannelSet = consumer2.channelSet;
            	pc = PollingChannel(pcs.currentChannel);	        		
        	}
        ]]>
    </mx:Script>

</mx:Application>