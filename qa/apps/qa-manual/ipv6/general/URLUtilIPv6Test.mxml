<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2008 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" creationComplete="addTests()">

    <mx:Script>
        <![CDATA[    
        
        /*****************************************************************
         *  This example tests mx.util.URLUtil IPv6 URL parsing functions.
         *  Run the test with a global IPv6 address and [::1].  
         *  Change the targetUrl accordingly.
         *****************************************************************/
           
        import qa.mxunit.*;
        import qa.mxunit.Assert;
        import mx.utils.URLUtil;
                
        public static var targetUrl: String = "[::1]";
                
        public function addTests():void {
            MXUnitManager.delay = 5000;
            MXUnitManager.detectTests(this, 5000); 
        }             
               
        internal static var rootURL1 : String = "http://" + targetUrl + ":8400/qa-regress/foo.mxml.swf";
	    internal static var rootURL2 : String = "http://" + targetUrl + "/qa-regress/foo.mxml.swf";
	    internal static var rootURL3 : String = "http://" + targetUrl + ":8400";
	    internal static var rootURL4 : String = "http://" + targetUrl + ":8400/";
	    internal static var rootURL5 : String = "http://" + targetUrl + ":8400/qa-regress";
	    internal static var rootURL6 : String = "http://" + targetUrl + ":8400/qa-regress/";
	
	    internal static var rootURL1s : String = "https://" + targetUrl + ":8400/qa-regress/foo.mxml.swf";
	    internal static var rootURL2s : String = "https://" + targetUrl + "/qa-regress/foo.mxml.swf";
	    internal static var rootURL3s : String = "https://" + targetUrl + ":8400";
	    internal static var rootURL4s : String = "https://" + targetUrl + ":8400/";
	    internal static var rootURL5s : String = "https://" + targetUrl + ":8400/qa-regress";
	    internal static var rootURL6s : String = "https://" + targetUrl + ":8400/qa-regress/";
	
	    internal static var endAbs : String = "/end";
	    internal static var endRel : String = "end";
	
	    internal static var fullEnd : String = "http://end";
	    internal static var fullEnds : String = "https://end"
	
	    public function testPassingHttp() :void
	    {
	         Assert.assertEquals(URLUtil.getFullURL(rootURL1, fullEnd), fullEnd);
	         Assert.assertEquals(URLUtil.getFullURL(rootURL1, fullEnds), fullEnds);
	    }
	
	    public function testPassingHttps() :void
	    {
	         Assert.assertEquals(URLUtil.getFullURL(rootURL1s, fullEnd), fullEnd);
	         Assert.assertEquals(URLUtil.getFullURL(rootURL1s, fullEnds), fullEnds);
	    }
	
	    public function testFullWithPortAbsolute() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL1, endAbs));
	
	    }
	
	    public function testFullWithPortRelative() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/qa-regress/end", URLUtil.getFullURL(rootURL1, endRel));
	    }
	
	    public function testFullWithPortAbsoluteS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL1s, endAbs));
	
	    }
	
	    public function testFullWithPortRelativeS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/qa-regress/end", URLUtil.getFullURL(rootURL1s, endRel));
	    }
	
	    public function testFullNoPortAbsolute() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + "/end", URLUtil.getFullURL(rootURL2, endAbs));
	    }
	
	    public function testFullNoPortRelative() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + "/qa-regress/end", URLUtil.getFullURL(rootURL2, endRel));
	    }
	
	    public function testFullNoPortAbsoluteS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + "/end", URLUtil.getFullURL(rootURL2s, endAbs));
	    }
	
	    public function testFullNoPortRelativeS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + "/qa-regress/end", URLUtil.getFullURL(rootURL2s, endRel));
	    }
	
	    public function testHostNoTrailAbsolute() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL3, endAbs));
	    }
	
	    public function testHostNoTrailRelative() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL3, endRel));
	    }
	
	    public function testHostNoTrailAbsoluteS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL3s, endAbs));
	    }
	
	    public function testHostNoTrailRelativeS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL3s, endRel));
	    }
	
	    public function testHostWithTrailAbsolute() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL4, endAbs));
	    }
	
	    public function testHostWithTrailRelative() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL4, endRel));
	    }
	
	    public function testHostWithTrailAbsoluteS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL4s, endAbs));
	    }
	
	    public function testHostWithTrailRelativeS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL4s, endRel));
	    }
	
	    public function testPathNoTrailAbsolute() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL5, endAbs));
	    }
	
	    public function testPathNoTrailRelative() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL5, endRel));
	    }
	
	    public function testPathNoTrailAbsoluteS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL5s, endAbs));
	    }
	
	    public function testPathNoTrailRelativeS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL5s, endRel));
	    }
	
	    public function testPathWithTrailAbsolute() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL6, endAbs));
	    }
	
	    public function testPathWithTrailRelative() :void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/qa-regress/end", URLUtil.getFullURL(rootURL6, endRel));
	    }
	
	    public function testPathWithTrailAbsoluteS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/end", URLUtil.getFullURL(rootURL6s, endAbs));
	    }
	
	    public function testPathWithTrailRelativeS() :void
	    {
	        Assert.assertEquals("https://" + targetUrl + ":8400/qa-regress/end", URLUtil.getFullURL(rootURL6s, endRel));
	    }
	
	    public function testIsHttp_http() :void
	    {
	        Assert.assertTrue(URLUtil.isHttpURL("http://asdfasdf"));
	    }
	
	    public function testIsHttp_https() :void
	    {
	        Assert.assertTrue(URLUtil.isHttpURL("https://asdfasdf"));
	    }
	
	    public function testIsHttp_bogus() :void
	    {
	        Assert.assertFalse(URLUtil.isHttpURL("bogus://"));
	    }
	
	    public function testDomainHttp() :void
	    {
	        Assert.assertEquals("foo.bar.com", URLUtil.getServerNameWithPort("http://foo.bar.com/foo"));
	    }
	
	    public function testDomainHttps() :void
	    {
	        Assert.assertEquals("foo.bar.com", URLUtil.getServerNameWithPort("https://foo.bar.com/foo"));
	    }
	
	    public function testDomainPortNoTrail() :void
	    {
	        Assert.assertEquals("foo.bar.com:8400", URLUtil.getServerNameWithPort("http://foo.bar.com:8400"));
	    }
	
	    public function testDomainPortWithTrail() :void
	    {
	        Assert.assertEquals("foo.bar.com:8400", URLUtil.getServerNameWithPort("http://foo.bar.com:8400/foo"));
	    }
	
	    public function testDomainNoPortDoubleTrail() :void
	    {
	        Assert.assertEquals("foo.bar.com", URLUtil.getServerNameWithPort("http://foo.bar.com/foo/lurhmann"));
	    }
	
	    public function testGetProtocol():void
	    {
	        Assert.assertEquals("https", URLUtil.getProtocol("https://" + targetUrl + ":8400/test.swf"));
	        Assert.assertEquals("http", URLUtil.getProtocol("http://" + targetUrl + ":8400/test.swf"));
	        Assert.assertEquals("https", URLUtil.getProtocol("https://" + targetUrl + ":2700/"));
	    }
	
	    public function testReplacePort():void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":2700/test.swf", URLUtil.replacePort("http://" + targetUrl + ":8400/test.swf", 2700));
	        Assert.assertEquals("http://" + targetUrl + ":2035/test.swf", URLUtil.replacePort("http://" + targetUrl + "/test.swf", 2035));
	        Assert.assertEquals("http://" + targetUrl + ":2035", URLUtil.replacePort("http://" + targetUrl + "", 2035));
	        Assert.assertEquals("https://" + targetUrl + ":3500/", URLUtil.replacePort("https://" + targetUrl + ":2700/", 3500));
	    }
	
	    public function testReplaceProtocol():void
	    {
	        Assert.assertEquals("http222://" + targetUrl + ":8400/test.swf", URLUtil.replaceProtocol("http://" + targetUrl + ":8400/test.swf", "http222"));
	    }
	
	    public function testReplaceTokens():void
	    {
	        Assert.assertEquals("http://" + targetUrl + ":8400/test.swf", URLUtil.replaceTokens("http://{server.name}:8400/test.swf"));
	        Assert.assertEquals("http://" + targetUrl + ":8400/test.swf", URLUtil.replaceTokens("http://" + targetUrl + ":{server.port}/test.swf"));
	        Assert.assertEquals("http://" + targetUrl + ":8400/test.swf", URLUtil.replaceTokens("http://{server.name}:{server.port}/test.swf"));
	    }
	   
	    public function testGetPort():void{
	    	Assert.assertEquals(8400, URLUtil.getPort("http://" + targetUrl + ":8400/test.swf"));	
		Assert.assertEquals(8400, URLUtil.getPort("http://" + targetUrl + ":8400/test.swf"));	
		Assert.assertEquals(8400, URLUtil.getPort("http://myhost:8400/test.swf"));		    	    	
	    }
	    
	    public function testGetServerName():void{
	    	Assert.assertEquals( targetUrl + ":8400", URLUtil.getServerNameWithPort("http://" + targetUrl + ":8400/foo"));
	    	Assert.assertEquals( targetUrl + "", URLUtil.getServerName("http://" + targetUrl + ":8400/foo"));
	    }	    
	    
	  	public function testIPHttp() :void
	    {
	        Assert.assertEquals( targetUrl + "", URLUtil.getServerNameWithPort("http://" + targetUrl + "/foo"));
	    }
	
	    public function testIPHttps() :void
	    {
	        Assert.assertEquals( targetUrl , URLUtil.getServerNameWithPort("https://" + targetUrl + "/foo"));
	    }
	
	    public function testIPPortNoTrail() :void
	    {
	        Assert.assertEquals( targetUrl + ":8400", URLUtil.getServerNameWithPort("http://" + targetUrl + ":8400"));
	    }
	
	    public function testIPPortWithTrail() :void
	    {
	        Assert.assertEquals( targetUrl + ":8400", URLUtil.getServerNameWithPort("http://" + targetUrl + ":8400/foo"));
	    }
	
	    public function testIPNoPortDoubleTrail() :void
	    {
	        Assert.assertEquals( targetUrl + "", URLUtil.getServerNameWithPort("http://" + targetUrl + "/foo"));
	    }
            
        ]]>
    </mx:Script>
</mx:Application>
