<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
    pageTitle="Collaborative Dashboard"
    creationComplete="initApp()">


    <mx:Style source="main.css"/>

	<mx:Script>
        <![CDATA[

    	import mx.messaging.messages.AsyncMessage;
    	import mx.messaging.messages.IMessage;
    	import mx.collections.ArrayCollection;
    	import mx.messaging.events.MessageEvent;
    	import mx.rpc.events.ResultEvent;

		[Bindable]
        public var slicedMonthData:ArrayCollection;

		[Bindable]
        public var slicedRegionData:ArrayCollection;
        
        private var monthData:Array;
        private var regionData:Array;

        private function initApp():void
        {
            consumer.subscribe();
           	srv.send();
            slicedMonthData = new ArrayCollection();
            slicedRegionData = new ArrayCollection();   
        }

        private function resultHandler(event:ResultEvent):void
        {
            monthData = event.result.list.month.source as Array;
			slider.maximum = monthData.length - 1;
			slider.values = [0, monthData.length - 1];
            slicedMonthData.source = monthData;
            regionBreakdown.month = monthData[0];
            
            regionData = new Array(monthData.length);
            var monthTotal:Number;
            
            for (var i:Number = 0; i < monthData.length; i++) 
        	{
                regionData[i] = {name: monthData[i].name, average: 0, revenue: 0};
                var regions:Array = monthData[i].region.source;
                monthTotal = 0;
                for (var j:Number = 0; j < regions.length; j++)
                {
                    monthTotal += regions[j].revenue;
                }
                regionData[i].average = monthTotal/monthData[i].region.length
            }
            slicedRegionData.source = regionData.slice(slider.values[0], slider.values[1]);
        }
        
        private function getSliderLabel(value:String):String 
    	{
            return monthData[parseInt(value)].name;
        }
        
   	    // Send messages when user's selection changes
        private function monthChange():void
    	{
            var message:IMessage = new AsyncMessage();
            message.body = {month: timeline.selectedMonth};
            producer.send(message);
        }

        private function rangeChange():void
    	{
            var message:IMessage = new AsyncMessage();
            message.body = {min: slider.values[0], max: slider.values[1]+1};
            producer.send(message);
        }

        private function regionChange():void
    	{
            var message: IMessage = new AsyncMessage();
            message.body = {region: regionBreakdown.selectedRegion};
            producer.send(message);
       	}

        // Handle incoming messages
        private function messageHandler(event:MessageEvent):void
    	{
            var body:Object = event.message.body;

            if (body.min != null) //range
        	{
                slider.values = [body.min, body.max - 1];

                if (monthData != null)
                   slicedMonthData.source = monthData.slice(body.min, body.max);
                if (regionData != null)
                   slicedRegionData.source = regionData.slice(body.min, body.max);

            } 
            else if (body.month != null) //month in timeline
        	{
                regionBreakdown.month = body.month;
            } 
            else if (body.region != null) //region from breakdown
        	{
                regionBreakdown.selectedRegion = body.region;
                regionDetail.region = body.region.name;

                for (var i: Number = 0; i < monthData.length; i++) 
            	{
                    var regions: Array = monthData[i].region.source;
                    for (var j: Number = 0; j < regions.length; j++) 
                	{
                        if (regions[j].name == body.region.name)
                    	{
                            regionData[i].revenue = regions[j].revenue;
                            break;
                        }
                    }
                }
                slicedRegionData.source = regionData.slice(slider.values[0], slider.values[1] + 1);
            }
        }
        
        private function toggleSeries():void
		{
            var message: IMessage = new AsyncMessage();
			if (currentState=="series")
			{
				currentState = "";
	            message.body.series = false;
			} 
			else
			{
				currentState = "series";
	            message.body.series = true;
			}
            producer.send(message);
		}

        private function dataGridCurrencyFormat(item:Object, column:Object):String
        {
            return cf.format(item[column.dataField]);
        }

        ]]>
    </mx:Script>

    <mx:Producer id="producer" destination="dashboard"/>
    <mx:Consumer id="consumer" destination="dashboard" message="messageHandler(event)"/>

    <mx:HTTPService id="srv" url="results.xml" useProxy="false" result="resultHandler(event)"/>

    <mx:CurrencyFormatter id="cf"/>

    <mx:HBox width="100%" verticalAlign="middle" horizontalAlign="right" paddingRight="40">
        <mx:Label text="Welcome, Guest |"/>
        <mx:ComboBox id="cb">
        	<mx:dataProvider>
        		<mx:String>Revenue Timeline</mx:String>
        	</mx:dataProvider>
        </mx:ComboBox>
    </mx:HBox>

	<mx:HDividedBox width="100%" height="100%">

		<mx:Panel id="timelinePanel" title="Revenue Timeline" width="100%" height="100%">
	        <RevenueTimeline id="timeline" revenueData="{slicedMonthData.source}"
	        	monthChange="monthChange()"/>
		    <mx:ControlBar horizontalGap="4">
		        <mx:ToggleButtonBar dataProvider="{timeline}"/>
		        <mx:Spacer width="10"/>
		        <mx:Label text="Range:"/>
		        <mx:HSlider id="slider" width="150" thumbCount="2" snapInterval="1" minimum="0"
		            dataTipFormatFunction="getSliderLabel"
		            change="rangeChange()"/>
		    </mx:ControlBar>
		</mx:Panel>
	
	    <mx:VDividedBox width="100%" height="100%">
	        <RegionBreakdown id="regionBreakdown" regionChange="regionChange()" width="100%" height="50%" />
	        <RegionDetail id="regionDetail" revenueData="{slicedRegionData.source}" width="100%" height="50%" />
	    </mx:VDividedBox>
		
	</mx:HDividedBox>

</mx:Application>