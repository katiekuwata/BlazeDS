<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" 
	backgroundGradientColors="[#FFFFFF,#FFFFFF]"
	layout="horizontal" horizontalAlign="left" verticalGap="8" 
	creationComplete="initApp()">

	<mx:Style source="main.css"/>

	<mx:Script>
		<![CDATA[
			import mx.messaging.channels.HTTPChannel;
			import mx.messaging.channels.AMFChannel;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.messaging.Channel;
			import mx.messaging.ChannelSet;
			import mx.messaging.config.ServerConfig;
			import mx.messaging.events.MessageEvent;
			import samples.portfolio.Stock;
			import mx.messaging.Consumer;
	
			private var consumers:Object;		
	
			[Bindable]
			private var items:ArrayCollection;
	
			private var stockMap:Object;
			
			private function initApp():void
			{
				var channelSet:ChannelSet = ServerConfig.getChannelSet("market-data-feed");
				channels.dataProvider = channelSet.channelIds;
				consumers = new Object();
				stockMap = new Object();
				items = new ArrayCollection();
				initializeWatchList(["IBM", "JBLU", "ADBE", "GE", "C"]);
				displayChannelInfo();
			}
			
			private function deleteSymbol():void
			{
				var symbol:String = dg.selectedItem.symbol;
				unsubscribe(symbol);
				items.removeItemAt(dg.selectedIndex);
				delete stockMap[symbol];
			}
			
			public function initializeWatchList(list:Array):void
			{
				for (var i:int=0; i<list.length; i++)
				{
					addSymbol(list[i]);	
				}
			}
			
			private function addSymbol(symbol:String):void
			{
				if (symbol == null || symbol == "")
				{
					Alert.show("Cannot add an empty symbol");
					return;
				}
	
				symbol = symbol.toUpperCase();
				if (stockMap.hasOwnProperty(symbol))
				{
					Alert.show("Symbol '" + symbol + "' is already in the list");
					return;
				}
	
				var stock:Stock = new Stock();
				stock.symbol = symbol;
				stockMap[symbol] = stock;
				items.addItem(stock);
				subscribe(symbol);
			}
			
			private function subscribe(symbol:String):void
			{
				var consumer:Consumer = new Consumer();
				consumer.destination = "market-data-feed";
				consumer.subtopic = symbol;
				consumer.channelSet = new ChannelSet([channels.selectedItem]);
				consumer.addEventListener(MessageEvent.MESSAGE, messageHandler);
				consumer.subscribe();
				consumers[symbol] = consumer;
			}
			
			private function unsubscribe(symbol:String):void
			{
				if (consumers[symbol])
				{
					var consumer:Consumer = consumers[symbol];
					consumer.removeEventListener(MessageEvent.MESSAGE, messageHandler);
					if (consumer.subscribed)
					{
						consumer.unsubscribe();
					}
					consumer.channelSet.disconnectAll();
					consumers[symbol] = null;
				}
			}
	
			private function channelChange():void
			{
				displayChannelInfo();	

				var i:int;
				// Get rid of all the subscriptions that use the previously selected channel 
				for (i=0; i<items.length; i++)
				{
					unsubscribe(items.getItemAt(i).symbol)
				}
				
				// Subscribe using the newly selected channel
				for (i=0; i<items.length; i++)
				{
					subscribe(items.getItemAt(i).symbol)
				}
			}
	
			private function displayChannelInfo():void
			{
				var channel:Object = ServerConfig.getChannel(channels.selectedItem as String);
				channelId.text = channel.id;
				channelClass.text = getQualifiedClassName(channel);
				endpoint.text = channel.endpoint;
				if (channel is AMFChannel || channel is HTTPChannel)
				{
					pollingEnabled.text = channel.pollingEnabled;
					pollingInterval.text = channel.pollingInterval;
				}
				else
				{
					pollingEnabled.text = "n/a";
					pollingInterval.text = "n/a";
				}
				perClientSettings.visible = channel.id.indexOf("per-client") >= 0;
			}
			
			private function messageHandler(event:MessageEvent):void 
			{
				var changedStock:Stock = event.message.body as Stock;
				var stock:Stock = stockMap[changedStock.symbol];
				
				BackgroundColorRenderer.symbol = changedStock.symbol;
				
				if (stock)
				{
					stock.open = changedStock.open;
					stock.change = changedStock.change;
					stock.last = changedStock.last;
					stock.high = changedStock.high;
					stock.low = changedStock.low;
					stock.date = changedStock.date;
				}
	        }
			
			private function formatNumber(item:Object, column:DataGridColumn):String
			{
				return nf.format(item[column.dataField]);
			}
			
			// Only used for the per-client-qos channels
			private function setDelay():void
			{
				configSrv.setAttribute("market-data-delay", delay.text);
			}

		
		]]>
	</mx:Script>
	
	<!-- Only used for the per-client-qos channels to provide per-client config values --> 
	<mx:RemoteObject id="configSrv" destination="flex-client-qos-config"/>
	
	<mx:NumberFormatter id="nf" precision="2"/>

	<mx:Panel title="Watch List" width="400" height="400">
		<mx:DataGrid id="dg" dataProvider="{items}" width="100%" height="100%">
			<mx:columns>
				<mx:DataGridColumn headerText="Symbol" dataField="symbol" width="80"/>
				<mx:DataGridColumn headerText="Open" dataField="open" labelFunction="formatNumber" textAlign="right" width="60"/>
				<mx:DataGridColumn headerText="Last" dataField="last" itemRenderer="BackgroundColorRenderer" labelFunction="formatNumber" textAlign="right" width="60"/>
				<mx:DataGridColumn headerText="Change" dataField="change" itemRenderer="ColorRenderer" labelFunction="formatNumber" textAlign="right" width="60"/>
				<mx:DataGridColumn headerText="High" dataField="high" labelFunction="formatNumber" textAlign="right" width="60"/>
				<mx:DataGridColumn headerText="Low" dataField="low" labelFunction="formatNumber" textAlign="right" width="60"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:ControlBar>
			<mx:TextInput id="symbol" enter="addSymbol(symbol.text);symbol.text='';" width="50"/>
			<mx:Button label="Add Symbol" click="addSymbol(symbol.text);symbol.text='';"/>
			<mx:Spacer width="100%"/>
			<mx:Button label="Delete Symbol" click="deleteSymbol()" enabled="{dg.selectedItem}"/>
		</mx:ControlBar>
	</mx:Panel>
	
	<mx:Form>
		<mx:FormItem label="Select a channel">
			<mx:ComboBox id="channels" change="channelChange()"/>
		</mx:FormItem>
		<mx:FormItem label="Channel Id">
			<mx:Label id="channelId"/>
		</mx:FormItem>
		<mx:FormItem label="Channel Class">
			<mx:Label id="channelClass"/>
		</mx:FormItem>
		<mx:FormItem label="Endpoint">
			<mx:Label id="endpoint"/>
		</mx:FormItem>
		<mx:FormItem label="Polling Enabled">
			<mx:Label id="pollingEnabled"/>
		</mx:FormItem>
		<mx:FormItem label="Polling Interval (millis)">
			<mx:Label id="pollingInterval"/>
		</mx:FormItem>
		<mx:FormItem id="perClientSettings" label="Custom (Per Client) Quote Delay" direction="horizontal">
			<mx:TextInput id="delay" width="80" text="5000"/>
			<mx:Button label="Apply" click="setDelay()"/>
		</mx:FormItem>
	</mx:Form>
	
</mx:Application>
