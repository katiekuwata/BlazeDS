<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
    creationComplete="creationCompleteHandler();">

    <!-- An example where the client relies on piggybacking for server updates.
         The intended use for piggybacking is to support very light-weight psuedo-polling,
         where rather than the client channel polling the server on a fixed or adaptive interval,
         when the client sends a non-command message to the server (via a Producer or RemoteObject or DataService)
         we'll piggyback any pending data for the client's messaging or data management subscriptions
         along with the response to the client's message. Piggybacking can also be used
         on a channel that has polling enabled but on a wide interval like 5 or 10 seconds or more,
         in which case the app will feel more responsive if the client is sending messages to the server.
    -->
    <mx:Panel id="mainPanel" height="100%" width="100%">
        <mx:HBox>
            <mx:Label text="Producer"/>
            <mx:Button label="Send Foo{counter}" click="sendMessage()"/>
            <mx:Button label="Disconnect" click="producer.disconnect();" enabled="{producer.connected}"/>
            <mx:CheckBox label="Connected?" selected="{producer.connected}"/>
        </mx:HBox>
        <mx:HBox>
            <mx:Label text="Consumer"/>
            <mx:Button label="Subcribe" click="consumer.subscribe();" enabled="{!consumer.subscribed}"/>
            <mx:Button label="Unsubscribe" click="consumer.unsubscribe();" enabled="{consumer.subscribed}"/>
            <mx:Button label="Disconnect" click="consumer.disconnect();" enabled="{consumer.connected}"/>
            <mx:CheckBox label="Connected?" selected="{consumer.connected}"/>
            <mx:CheckBox label="Subscribed?" selected="{consumer.subscribed}"/>
        </mx:HBox>
        <mx:Button label="Clear" click='ta.text = ""'/>
        <mx:TextArea id="ta" width="100%" height="100%"/>
    </mx:Panel>

    <mx:Producer id="producer"
        destination="messaging_HTTP_Piggyback"
        fault="faultHandler(event)"/>

    <mx:Consumer id="consumer"
        destination="messaging_HTTP_Piggyback"
        fault="faultHandler(event)"
        message="messageHandler(event)"/>

    <mx:Script>
        <![CDATA[

            import mx.messaging.events.MessageFaultEvent;
            import mx.messaging.events.MessageEvent;

            import mx.messaging.ChannelSet;
            import mx.messaging.Producer;
            import mx.messaging.Consumer;
            import mx.messaging.messages.AsyncMessage;

            import mx.logging.Log;
            import mx.logging.targets.TraceTarget;

            [Bindable]
            public var counter:int = 0;

            private function creationCompleteHandler():void
            {
                var target:TraceTarget = new TraceTarget();
                target.includeLevel = true;
                target.filters = ["mx.messaging.*", "mx.rpc.*"];
                Log.addTarget(target);
            }

            private function sendMessage():void
            {
                var msg:AsyncMessage = new AsyncMessage();
                msg.body = "Foo" + counter++;
                producer.send(msg);
            }

            private function messageHandler(event:MessageEvent):void
            {
                ta.text += "Consumer received message: "+ event.message.body + "\n";
            }

            private function faultHandler(event:Object):void
            {
                ta.text += "Received fault: " + event.faultString + "\n";
            }
        ]]>
    </mx:Script>

</mx:Application>