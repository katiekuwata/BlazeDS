<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
    creationComplete="creationCompleteHandler();">

    <!-- A sample that one can use to talk to messaging destinations with outbound
         throttling and IGNORE policy using different channels supported by BlazeDS.
         Destinations have low outbound throttling limits and the sample
         can be used to generate high number of message to see outbound throttling
         handled according to the policy.
     -->
    <mx:Panel id="mainPanel" height="100%" width="100%">
        <mx:HBox>
            <mx:Label text="Destination to use "/>
            <mx:ComboBox id="destinationsCB" dataProvider="{destinations}" selectedIndex="0" width="300"
                change="setupChannelsCB();"/>
        </mx:HBox>
        <mx:HBox>
            <mx:Label text="Channel to use "/>
            <mx:ComboBox id="channelsCB" selectedIndex="0" width="200"
                change="setupComponents();"/>
            <mx:Button label="Poll" click="poll()"
                enabled="{!currentChannel.mx_internal::realtime}"/>
        </mx:HBox>
        <mx:HBox>
            <mx:Label text="Push messages"/>
            <mx:Label text="Push rate per second"/>
            <mx:TextInput id="ti1" width="50" text="10"/>
            <mx:Label text="Number of runs"/>
            <mx:TextInput id="ti2" width="50" text="-1"/>
            <mx:Button label="Start push" click="startPush();"/>
            <mx:Button label="Stop push" click="stopPush();"/>
        </mx:HBox>
        <mx:HBox>
            <mx:Label text="Consumer"/>
            <mx:Button label="Subcribe" click="consumerSubscribe();" enabled="{!consumer.subscribed}"/>
            <mx:Button label="Unsubscribe" click="consumerUnsubscribe();" enabled="{consumer.subscribed}"/>
            <mx:Button label="Disconnect" click="consumer.disconnect();" enabled="{consumer.connected}"/>
            <mx:CheckBox label="Connected?" selected="{consumer.connected}"/>
            <mx:CheckBox label="Subscribed?" selected="{consumer.subscribed}"/>
        </mx:HBox>
        <mx:HBox>
            <mx:Label text="Message receive rate"/>
            <mx:Label text="In the last second: {currentRate.toFixed(2)}m/s"/>
            <mx:Label text="Since subscribe: {globalRate.toFixed(2)}m/s"/>
        </mx:HBox>
        <mx:HBox width="100%">
            <mx:Spacer width="100%"/>
            <mx:CheckBox id="dmCB" label="Display received messages?" selected="{displayMessages}"/>
            <mx:Button label="Clear" click='output.text = ""'/>
        </mx:HBox>
        <mx:TextArea id="output" width="100%" height="100%"/>
    </mx:Panel>

    <mx:Binding source="dmCB.selected" destination="displayMessages"/>

    <mx:RemoteObject id="serverPushRO" destination="serverPushRO"/>

    <mx:Consumer id="consumer"
        fault="consumerFaultHandler(event)"
        message="consumerMessageHandler(event)"/>

    <mx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.core.mx_internal;
            import mx.messaging.ChannelSet;
            import mx.messaging.Channel;
            import mx.messaging.channels.PollingChannel;
            import mx.messaging.config.ServerConfig;
            import mx.messaging.events.MessageFaultEvent;
            import mx.messaging.events.MessageEvent;
            import mx.messaging.messages.AsyncMessage;

            import mx.logging.Log;
            import mx.logging.targets.TraceTarget;

            [Bindable]
            public var currentChannel:Channel;
            [Bindable]
            public var destinations:Array = ['messaging_ThrottleOutbound_PolicyIgnore'];
            [Bindable]
            public var destinationId:String;
            [Bindable]
            public var displayMessages:Boolean;

            // How often to measure the message rate.
            public const MEASUREMENT_TIME_MILLIS:int = 1000;
            private var measurementTimer:Timer;

            // Used to keep track of global message receive rate since subscription.
            [Bindable]
            public var globalRate:Number;
            private var globalStartTime:Number;
            private var globalMessages:int;

            // Used to keep track of message receive rate in the last second.
            [Bindable]
            private var currentRate:Number;
            [Bindable]
            private var interval:Number;
            private var startTime:int = 0;
            private var currentMessages:int;

            private function creationCompleteHandler():void
            {
                var target:TraceTarget = new TraceTarget();
                target.includeLevel = true;
                target.filters = ["mx.messaging.*", "mx.rpc.*"];
                Log.addTarget(target);

                displayMessages = true;
                setupChannelsCB();
                setupComponents();

                measurementTimer = new Timer(MEASUREMENT_TIME_MILLIS, 0);
                measurementTimer.addEventListener(TimerEvent.TIMER, measurementTimerHandler);
            }

            private function setupChannelsCB():void
            {
                destinationId = destinationsCB.selectedLabel;
                channelsCB.dataProvider = new ArrayCollection((ServerConfig.getChannelSet(destinationId) as ChannelSet).channelIds);
            }

            private function setupComponents():void
            {
                currentChannel = ServerConfig.getChannel(channelsCB.selectedItem.toString());

                consumer.unsubscribe();
                consumer.destination = destinationId;
                var cs:ChannelSet = new ChannelSet();
                cs.addChannel(currentChannel);
                consumer.channelSet = cs;
            }

            private function consumerSubscribe():void
            {
                globalStartTime = getTimer();
                globalMessages = 0;
                currentMessages = 0;
                startTime = 0;

                if (!measurementTimer.running)
                    measurementTimer.start();

                consumer.subscribe();
            }

            private function consumerUnsubscribe():void
            {
                globalRate = 0;
                currentRate = 0;
                if (measurementTimer.running)
                    measurementTimer.stop();
                if (consumer.subscribed)
                    consumer.unsubscribe();
            }

            private function consumerMessageHandler(event:MessageEvent):void
            {
                currentMessages++;
                globalMessages++;

                if (displayMessages)
                    output.text += "Consumer received message: "+ event.message.body + "\n";
            }

            private function consumerFaultHandler(event:MessageFaultEvent):void
            {
                output.text += "Consumer received fault: " + event.faultString + "\n";
            }

            private function measurementTimerHandler(event:TimerEvent):void
            {
                var now:int = getTimer();
                if (startTime == 0)
                {
                    globalStartTime = now;
                    startTime = now;
                }

                var temp:Number = Number(now - startTime);
                if (temp >= MEASUREMENT_TIME_MILLIS)
                {
                    interval = temp;
                    currentRate = 1000.0 * currentMessages / interval;
                    globalRate = 1000.0 * globalMessages / Number(now - globalStartTime);
                    currentMessages = 0;
                    startTime = now;
                }
            }

            private function startPush():void
            {
                serverPushRO.startPush(destinationId, uint(ti1.text), 1000, uint(ti2.text));
            }

            private function stopPush():void
            {
                serverPushRO.stopPush();
            }

            private function poll():void
            {
                output.text += "Polling" + "\n";
                (currentChannel as PollingChannel).poll();
            }
        ]]>
    </mx:Script>
</mx:Application>